"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[47902],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,k=g["".concat(s,".").concat(m)]||g[m]||u[m]||l;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},93520:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={title:"skywalking-logger",keywords:["Apache APISIX","API Gateway","Plugin","SkyWalking Logger","skywalking-logger"],description:"The skywalking-logger pushes request and response logs as JSON objects to SkyWalking OAP server in batches and supports the customization of log formats."},o=void 0,i={unversionedId:"plugins/skywalking-logger",id:"version-3.14/plugins/skywalking-logger",isDocsHomePage:!1,title:"skywalking-logger",description:"The skywalking-logger pushes request and response logs as JSON objects to SkyWalking OAP server in batches and supports the customization of log formats.",source:"@site/docs-apisix_versioned_docs/version-3.14/plugins/skywalking-logger.md",sourceDirName:"plugins",slug:"/plugins/skywalking-logger",permalink:"/docs/apisix/plugins/skywalking-logger",editUrl:"/edit#https://github.com/apache/apisix/edit/release/3.14/docs/en/latest/plugins/skywalking-logger.md",tags:[],version:"3.14",frontMatter:{title:"skywalking-logger",keywords:["Apache APISIX","API Gateway","Plugin","SkyWalking Logger","skywalking-logger"],description:"The skywalking-logger pushes request and response logs as JSON objects to SkyWalking OAP server in batches and supports the customization of log formats."},sidebar:"version-3.14/docs",previous:{title:"http-logger",permalink:"/docs/apisix/plugins/http-logger"},next:{title:"tcp-logger",permalink:"/docs/apisix/plugins/tcp-logger"}},s=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Metadata",id:"metadata",children:[]},{value:"Examples",id:"examples",children:[{value:"Log Requests in Default Log Format",id:"log-requests-in-default-log-format",children:[]},{value:"Log Request and Response Headers With Plugin Metadata",id:"log-request-and-response-headers-with-plugin-metadata",children:[]},{value:"Log Request Bodies Conditionally",id:"log-request-bodies-conditionally",children:[]},{value:"Associate Traces with Logs",id:"associate-traces-with-logs",children:[]}]}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/skywalking-logger"})),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin pushes request and response logs as JSON objects to SkyWalking OAP server in batches and supports the customization of log formats."),(0,r.kt)("p",null,"If there is an existing tracing context, it sets up the trace-log correlation automatically and relies on ",(0,r.kt)("a",{parentName:"p",href:"https://skywalking.apache.org/docs/main/next/en/api/x-process-propagation-headers-v3/"},"SkyWalking Cross Process Propagation Headers Protocol"),"."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endpoint_addr"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"URI of the SkyWalking OAP server.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"service_name"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},'"APISIX"'),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Service name for the SkyWalking reporter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"service_instance_name"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},'"APISIX Instance Name"'),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Service instance name for the SkyWalking reporter. Set it to ",(0,r.kt)("inlineCode",{parentName:"td"},"$hostname")," to directly get the local hostname.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"log_format"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Custom log format in key-value pairs in JSON format. Support ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/apisix-variable"},"APISIX")," or ",(0,r.kt)("a",{parentName:"td",href:"http://nginx.org/en/docs/varindex.html"},"Nginx variables")," in values if the string starts with ",(0,r.kt)("inlineCode",{parentName:"td"},"$"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timeout"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"[1,...]"),(0,r.kt)("td",{parentName:"tr",align:null},"Time to keep the connection alive for after sending a request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},'"skywalking logger"'),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier to identify the logger. If you use Prometheus to monitor APISIX metrics, the name is exported in ",(0,r.kt)("inlineCode",{parentName:"td"},"apisix_batch_process_entries"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"include_req_body"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, include the request body in the log. Note that if the request body is too big to be kept in the memory, it can not be logged due to NGINX's limitations."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"include_req_body_expr"),(0,r.kt)("td",{parentName:"tr",align:null},"array","[array]"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An array of one or more conditions in the form of ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/api7/lua-resty-expr"},"lua-resty-expr"),". Used when the ",(0,r.kt)("inlineCode",{parentName:"td"},"include_req_body")," is true. Request body would only be logged when the expressions configured here evaluate to true."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"include_resp_body"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, include the response body in the log."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"include_resp_body_expr"),(0,r.kt)("td",{parentName:"tr",align:null},"array","[array]"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An array of one or more conditions in the form of ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/api7/lua-resty-expr"},"lua-resty-expr"),". Used when the ",(0,r.kt)("inlineCode",{parentName:"td"},"include_resp_body")," is true. Response body would only be logged when the expressions configured here evaluate to true."),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"This Plugin supports using batch processors to aggregate and process entries (logs/data) in a batch. This avoids the need for frequently submitting the data. The batch processor submits data every ",(0,r.kt)("inlineCode",{parentName:"p"},"5")," seconds or when the data in the queue reaches ",(0,r.kt)("inlineCode",{parentName:"p"},"1000"),". See ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/batch-processor#configuration"},"Batch Processor")," for more information or setting your custom configuration."),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"You can also set the format of the logs by configuring the Plugin metadata. The following configurations are available:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"log_format"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Custom log format in key-value pairs in JSON format. Support ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/apisix-variable"},"APISIX")," or ",(0,r.kt)("a",{parentName:"td",href:"http://nginx.org/en/docs/varindex.html"},"NGINX variables")," in values.")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The examples below demonstrate how you can configure ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin for different scenarios."),(0,r.kt)("p",null,"To follow along the example, start a storage, OAP and Booster UI with Docker Compose, following ",(0,r.kt)("a",{parentName:"p",href:"https://skywalking.apache.org/docs/main/next/en/setup/backend/backend-docker/"},"Skywalking's documentation"),". Once set up, the OAP server should be listening on ",(0,r.kt)("inlineCode",{parentName:"p"},"12800")," and you should be able to access the UI at ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can fetch the ",(0,r.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,r.kt)("h3",{id:"log-requests-in-default-log-format"},"Log Requests in Default Log Format"),(0,r.kt)("p",null,"The following example demonstrates how you can configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin on a Route to log information of requests hitting the Route."),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin and configure the Plugin with your OAP server URI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "skywalking-logger-route",\n    "uri": "/anything",\n    "plugins": {\n      "skywalking-logger": {\n        "endpoint_addr": "http://192.168.2.103:12800"\n      }\n    },\n    "upstream": {\n      "nodes": {\n        "httpbin.org:80": 1\n      },\n      "type": "roundrobin"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request to the Route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080"},"Skywalking UI"),", navigate to ",(0,r.kt)("strong",{parentName:"p"},"General Service")," > ",(0,r.kt)("strong",{parentName:"p"},"Services"),". You should see a service called ",(0,r.kt)("inlineCode",{parentName:"p"},"APISIX")," with a log entry corresponding to your request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "upstream_latency": 674,\n  "request": {\n    "method": "GET",\n    "headers": {\n      "user-agent": "curl/8.6.0",\n      "host": "127.0.0.1:9080",\n      "accept": "*/*"\n    },\n    "url": "http://127.0.0.1:9080/anything",\n    "size": 85,\n    "querystring": {},\n    "uri": "/anything"\n  },\n  "client_ip": "192.168.65.1",\n  "route_id": "skywalking-logger-route",\n  "start_time": 1736945107345,\n  "upstream": "3.210.94.60:80",\n  "server": {\n    "version": "3.11.0",\n    "hostname": "7edbcebe8eb3"\n  },\n  "service_id": "",\n  "response": {\n    "size": 619,\n    "status": 200,\n    "headers": {\n      "content-type": "application/json",\n      "date": "Thu, 16 Jan 2025 12:45:08 GMT",\n      "server": "APISIX/3.11.0",\n      "access-control-allow-origin": "*",\n      "connection": "close",\n      "access-control-allow-credentials": "true",\n      "content-length": "391"\n    }\n  },\n  "latency": 764.9998664856,\n  "apisix_latency": 90.999866485596\n}\n')),(0,r.kt)("h3",{id:"log-request-and-response-headers-with-plugin-metadata"},"Log Request and Response Headers With Plugin Metadata"),(0,r.kt)("p",null,"The following example demonstrates how you can customize log format using Plugin metadata and built-in variables to log specific headers from request and response."),(0,r.kt)("p",null,"In APISIX, Plugin metadata is used to configure the common metadata fields of all Plugin instances of the same Plugin. It is useful when a Plugin is enabled across multiple resources and requires a universal update to their metadata fields."),(0,r.kt)("p",null,"First, create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin and configure the Plugin with your OAP server URI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "skywalking-logger-route",\n    "uri": "/anything",\n    "plugins": {\n      "skywalking-logger": {\n        "endpoint_addr": "http://192.168.2.103:12800"\n      }\n    },\n    "upstream": {\n      "nodes": {\n        "httpbin.org:80": 1\n      },\n      "type": "roundrobin"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Next, configure the Plugin metadata for ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," to log the custom request header ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," and the response header ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/plugin_metadata/skywalking-logger" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "log_format": {\n      "host": "$host",\n      "@timestamp": "$time_iso8601",\n      "client_ip": "$remote_addr",\n      "env": "$http_env",\n      "resp_content_type": "$sent_http_Content_Type"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request to the Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -H "env: dev"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response. In ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080"},"Skywalking UI"),", navigate to ",(0,r.kt)("strong",{parentName:"p"},"General Service")," > ",(0,r.kt)("strong",{parentName:"p"},"Services"),". You should see a service called ",(0,r.kt)("inlineCode",{parentName:"p"},"APISIX")," with a log entry corresponding to your request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "route_id": "skywalking-logger-route",\n    "client_ip": "192.168.65.1",\n    "@timestamp": "2025-01-16T12:51:53+00:00",\n    "host": "127.0.0.1",\n    "env": "dev",\n    "resp_content_type": "application/json"\n  }\n]\n')),(0,r.kt)("h3",{id:"log-request-bodies-conditionally"},"Log Request Bodies Conditionally"),(0,r.kt)("p",null,"The following example demonstrates how you can conditionally log request body."),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin as such, to only include request body if the URL query string ",(0,r.kt)("inlineCode",{parentName:"p"},"log_body")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"yes"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "skywalking-logger-route",\n    "uri": "/anything",\n    "plugins": {\n      "skywalking-logger": {\n        "endpoint_addr": "http://192.168.2.103:12800",\n        "include_req_body": true,\n        "include_req_body_expr": [["arg_log_body", "==", "yes"]]\n      }\n    },\n    "upstream": {\n      "nodes": {\n        "httpbin.org:80": 1\n      },\n      "type": "roundrobin"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request to the Route with a URL query string satisfying the condition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything?log_body=yes" -X POST -d \'{"env": "dev"}\'\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response. In ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080"},"Skywalking UI"),", navigate to ",(0,r.kt)("strong",{parentName:"p"},"General Service")," > ",(0,r.kt)("strong",{parentName:"p"},"Services"),". You should see a service called ",(0,r.kt)("inlineCode",{parentName:"p"},"APISIX")," with a log entry corresponding to your request, with the request body logged:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "request": {\n      "url": "http://127.0.0.1:9080/anything?log_body=yes",\n      "querystring": {\n        "log_body": "yes"\n      },\n      "uri": "/anything?log_body=yes",\n      ...,\n      "body": "{\\"env\\": \\"dev\\"}",\n    },\n    ...\n  }\n]\n')),(0,r.kt)("p",null,"Send a request to the Route without any URL query string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -X POST -d \'{"env": "dev"}\'\n')),(0,r.kt)("p",null,"You should not observe a log entry without the request body."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you have customized the ",(0,r.kt)("inlineCode",{parentName:"p"},"log_format")," in addition to setting ",(0,r.kt)("inlineCode",{parentName:"p"},"include_req_body")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"include_resp_body")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the Plugin would not include the bodies in the logs."),(0,r.kt)("p",{parentName:"div"},"As a workaround, you may be able to use the NGINX variable ",(0,r.kt)("inlineCode",{parentName:"p"},"$request_body")," in the log format, such as:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "skywalking-logger": {\n    ...,\n    "log_format": {"body": "$request_body"}\n  }\n}\n')))),(0,r.kt)("h3",{id:"associate-traces-with-logs"},"Associate Traces with Logs"),(0,r.kt)("p",null,"The following example demonstrates how you can configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin on a Route to log information of requests hitting the route."),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"skywalking-logger")," Plugin and configure the Plugin with your OAP server URI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "skywalking-logger-route",\n    "uri": "/anything",\n    "plugins": {\n      "skywalking": {\n        "sample_ratio": 1\n      },\n      "skywalking-logger": {\n        "endpoint_addr": "http://192.168.2.103:12800"\n      }\n    },\n    "upstream": {\n      "nodes": {\n        "httpbin.org:80": 1\n      },\n      "type": "roundrobin"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Generate a few requests to the Route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything"\n')),(0,r.kt)("p",null,"You should receive ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," responses."),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080"},"Skywalking UI"),", navigate to ",(0,r.kt)("strong",{parentName:"p"},"General Service")," > ",(0,r.kt)("strong",{parentName:"p"},"Services"),". You should see a service called ",(0,r.kt)("inlineCode",{parentName:"p"},"APISIX")," with a trace corresponding to your request, where you can view the associated logs:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://static.apiseven.com/uploads/2025/01/16/soUpXm6b_trace-view-logs.png",alt:"trace context"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://static.apiseven.com/uploads/2025/01/16/XD934LvU_associated-logs.png",alt:"associated log"})))}d.isMDXComponent=!0}}]);