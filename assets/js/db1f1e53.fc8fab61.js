"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[39105],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},60768:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"Monitoring APISIX with Helm Chart",keywords:["APISIX Ingress Controller","Apache APISIX","Prometheus","Grafana"],description:"A tutorial on configuring monitoring services for APISIX."},i=void 0,s={unversionedId:"monitoring",id:"version-1.7.0/monitoring",isDocsHomePage:!1,title:"Monitoring APISIX with Helm Chart",description:"A tutorial on configuring monitoring services for APISIX.",source:"@site/docs-apisix-ingress-controller_versioned_docs/version-1.7.0/monitoring.md",sourceDirName:".",slug:"/monitoring",permalink:"/docs/ingress-controller/1.7.0/monitoring",editUrl:"/edit#https://github.com/apache/apisix-ingress-controller/edit/v1.7.0/docs/en/latest/monitoring.md",tags:[],version:"1.7.0",frontMatter:{title:"Monitoring APISIX with Helm Chart",keywords:["APISIX Ingress Controller","Apache APISIX","Prometheus","Grafana"],description:"A tutorial on configuring monitoring services for APISIX."},sidebar:"version-1.7.0/docs",previous:{title:"FAQ",permalink:"/docs/ingress-controller/1.7.0/FAQ"},next:{title:"Upgrade Guide",permalink:"/docs/ingress-controller/1.7.0/upgrade"}},l=[{value:"Install Prometheus and Grafana",id:"install-prometheus-and-grafana",children:[]},{value:"Install APISIX",id:"install-apisix",children:[]},{value:"Configure Grafana Dashboard",id:"configure-grafana-dashboard",children:[]},{value:"Manual Configuration and Troubleshooting",id:"manual-configuration-and-troubleshooting",children:[{value:"Service Monitor and APISIX Service",id:"service-monitor-and-apisix-service",children:[]},{value:"Prometheus Spec",id:"prometheus-spec",children:[]}]}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"APISIX has detailed telemetry data. With helm chart, we can easily configure the monitoring system."),(0,a.kt)("p",null,"This tutorial will show how to achieve it."),(0,a.kt)("h2",{id:"install-prometheus-and-grafana"},"Install Prometheus and Grafana"),(0,a.kt)("p",null,"To collect metrics and visualize them, we need to install Prometheus and Grafana first."),(0,a.kt)("p",null,"The APISIX helm chart we will deploy later also contains a ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," resource, so we should ensure the cluster has its CRD installed. Installing Prometheus Operator will apply the required CRD."),(0,a.kt)("p",null,"Run the following command to install Prometheus Operator and Grafana:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\nhelm install -n monitoring prometheus prometheus-community/kube-prometheus-stack \\\n  --create-namespace \\\n  --set 'prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false'\n")),(0,a.kt)("p",null,"We set option ",(0,a.kt)("inlineCode",{parentName:"p"},"prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues")," to false to force Prometheus to watch all service monitors in the cluster for test purposes."),(0,a.kt)("p",null,"The default Grafana username and password is ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"prom-operator"),"."),(0,a.kt)("h2",{id:"install-apisix"},"Install APISIX"),(0,a.kt)("p",null,"We should enable service monitor to tell Prometheus to collect metrics from APISIX."),(0,a.kt)("p",null,"Install APISIX via helm chart with ",(0,a.kt)("inlineCode",{parentName:"p"},"serviceMonitor.enabled=true")," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add apisix https://charts.apiseven.com\nhelm repo update\n\nhelm install apisix apisix/apisix --create-namespace --namespace apisix \\\n  --set ingress-controller.config.apisix.serviceNamespace=apisix \\\n  --set serviceMonitor.enabled=true \\\n  --set ingress-controller.enabled=true\n")),(0,a.kt)("h2",{id:"configure-grafana-dashboard"},"Configure Grafana Dashboard"),(0,a.kt)("p",null,"Import ",(0,a.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/dashboards/11719-apache-apisix/"},"APISIX Grafana dashboard")," via dashboard ID ",(0,a.kt)("inlineCode",{parentName:"p"},"11719"),"."),(0,a.kt)("p",null,'The dashboard should be able to display some data, including total requests, handled connections, etc. Routing-related panels such as bandwidth and latency will show "No data" because we haven\'t made any requests yet. Create some routes with the "prometheus" plugin enabled and make some requests to them to generate some data for these panels.'),(0,a.kt)("h2",{id:"manual-configuration-and-troubleshooting"},"Manual Configuration and Troubleshooting"),(0,a.kt)("p",null,"If you already have an installation of APISIX and Prometheus Operator, you can manually configure the ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," resource and the service that exposes APISIX metrics."),(0,a.kt)("h3",{id:"service-monitor-and-apisix-service"},"Service Monitor and APISIX Service"),(0,a.kt)("p",null,"The magic behind ",(0,a.kt)("inlineCode",{parentName:"p"},"serviceMonitor.enabled=true")," helm chart option is ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," resource. Its content is as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\n...\nspec:\n  namespaceSelector:\n    matchNames:\n    - apisix\n  selector:\n    matchLabels:\n      helm.sh/chart: apisix-1.1.1\n      app.kubernetes.io/name: apisix\n      app.kubernetes.io/instance: apisix\n      app.kubernetes.io/version: "3.1.1"\n      app.kubernetes.io/managed-by: Helm\n      app.kubernetes.io/service: apisix-gateway\n  endpoints:\n  - scheme: http\n    targetPort: prometheus\n    path: /apisix/prometheus/metrics\n    interval: 15s\n')),(0,a.kt)("p",null,"The spec uses ",(0,a.kt)("inlineCode",{parentName:"p"},"namespaceSelector")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"selector")," to match the ",(0,a.kt)("inlineCode",{parentName:"p"},"apisix-gateway")," service. The former matches the namespace of APISIX we deployed, and the latter matches the exact service ",(0,a.kt)("inlineCode",{parentName:"p"},"apisix-gateway"),"."),(0,a.kt)("p",null,"The field ",(0,a.kt)("inlineCode",{parentName:"p"},"endpoints")," tells Prometheus where to collect the metrics. Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"targetPort")," field points to the port of service with the same name. If your service doesn't have a port named ",(0,a.kt)("inlineCode",{parentName:"p"},"prometheus"),", create one."),(0,a.kt)("p",null,"The helm chart exposes APISIX metrics in the ",(0,a.kt)("inlineCode",{parentName:"p"},"apisix-gateway")," service by default. Change the selector to match your service if needed."),(0,a.kt)("h3",{id:"prometheus-spec"},"Prometheus Spec"),(0,a.kt)("p",null,"If everything works fine, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Status > Targets")," page of Prometheus Web UI will show the APISIX service monitor. If you don't see it, you should make sure Prometheus is watching the ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," resource we created."),(0,a.kt)("p",null,"By default, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Prometheus")," resource created by the helm chart ",(0,a.kt)("inlineCode",{parentName:"p"},"kube-prometheus-stack")," is as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: monitoring.coreos.com/v1\nkind: Prometheus\n...\nspec:\n  ...\n  serviceMonitorNamespaceSelector: {}\n  serviceMonitorSelector:\n    matchLabels:\n      release: prometheus\n")),(0,a.kt)("p",null,"Thus, we pass the option ",(0,a.kt)("inlineCode",{parentName:"p"},"prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false")," to clear the ",(0,a.kt)("inlineCode",{parentName:"p"},"serviceMonitorSelector")," field. Configure this resource to fit your needs."),(0,a.kt)("p",null,"For example, if you want to set service monitor selector to ",(0,a.kt)("inlineCode",{parentName:"p"},"prom=watching"),", your helm command should be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm install -n monitoring prometheus prometheus-community/kube-prometheus-stack \\\n  --create-namespace \\\n  --set 'prometheus.prometheusSpec.serviceMonitorSelector.matchLabels.prom=watching'\n")),(0,a.kt)("p",null,"Because we set values for ",(0,a.kt)("inlineCode",{parentName:"p"},"serviceMonitorSelector"),", so we don't need to configure ",(0,a.kt)("inlineCode",{parentName:"p"},"serviceMonitorSelectorNilUsesHelmValues")," anymore."))}c.isMDXComponent=!0}}]);