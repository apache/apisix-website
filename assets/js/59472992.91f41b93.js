"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[10749],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,p=c["".concat(l,".").concat(m)]||c[m]||h[m]||i;return n?a.createElement(p,s(s({ref:t},d),{},{components:n})):a.createElement(p,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},86649:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"hmac-auth",keywords:["Apache APISIX","API Gateway","Plugin","HMAC Authentication","hmac-auth"],description:"The hmac-auth Plugin supports HMAC authentication to ensure request integrity, preventing modifications during transmission and enhancing API security."},s=void 0,o={unversionedId:"plugins/hmac-auth",id:"plugins/hmac-auth",isDocsHomePage:!1,title:"hmac-auth",description:"The hmac-auth Plugin supports HMAC authentication to ensure request integrity, preventing modifications during transmission and enhancing API security.",source:"@site/docs/apisix/plugins/hmac-auth.md",sourceDirName:"plugins",slug:"/plugins/hmac-auth",permalink:"/docs/apisix/next/plugins/hmac-auth",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/hmac-auth.md",tags:[],version:"current",frontMatter:{title:"hmac-auth",keywords:["Apache APISIX","API Gateway","Plugin","HMAC Authentication","hmac-auth"],description:"The hmac-auth Plugin supports HMAC authentication to ensure request integrity, preventing modifications during transmission and enhancing API security."},sidebar:"docs",previous:{title:"cas-auth",permalink:"/docs/apisix/next/plugins/cas-auth"},next:{title:"authz-casbin",permalink:"/docs/apisix/next/plugins/authz-casbin"}},l=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Implement HMAC Authentication on a Route",id:"implement-hmac-authentication-on-a-route",children:[]},{value:"Hide Authorization Information From Upstream",id:"hide-authorization-information-from-upstream",children:[]},{value:"Enable Body Validation",id:"enable-body-validation",children:[]},{value:"Mandate Signed Headers",id:"mandate-signed-headers",children:[]},{value:"Rate Limit with Anonymous Consumer",id:"rate-limit-with-anonymous-consumer",children:[]}]}],u={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Plugin supports HMAC (Hash-based Message Authentication Code) authentication as a mechanism to ensure the integrity of requests, preventing them from being modified during transmissions. To use the Plugin, you would configure HMAC secret keys on ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/next/terminology/consumer"},"Consumers")," and enable the Plugin on Routes or Services."),(0,r.kt)("p",null,"When a Consumer is successfully authenticated, APISIX adds additional headers, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Consumer-Username"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Credential-Indentifier"),", and other Consumer custom headers if configured, to the request, before proxying it to the Upstream service. The Upstream service will be able to differentiate between consumers and implement additional logics as needed. If any of these values is not available, the corresponding header will not be added."),(0,r.kt)("p",null,"Once enabled, the Plugin verifies the HMAC signature in the request's ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header and check that incoming requests are from trusted sources. Specifically, when APISIX receives an HMAC-signed request, the key ID is extracted from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header. APISIX then retrieves the corresponding Consumer configuration, including the secret key. If the key ID is valid and exists, APISIX generates an HMAC signature using the request's ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," header and the secret key. If this generated signature matches the signature provided in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header, the request is authenticated and forwarded to Upstream services."),(0,r.kt)("p",null,"The Plugin implementation is based on ",(0,r.kt)("a",{parentName:"p",href:"https://www.ietf.org/archive/id/draft-cavage-http-signatures-12.txt"},"draft-cavage-http-signatures"),"."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,"The following attributes are available for configurations on Consumers or Credentials."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key_id"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for the Consumer, which identifies the associated configurations such as the secret key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secret_key"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Secret key used to generate an HMAC. This field supports saving the value in Secret Manager using the ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/next/terminology/secret"},"APISIX Secret")," resource.")))),(0,r.kt)("p",null,"The following attributes are available for configurations on Routes or Services."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowed_algorithms"),(0,r.kt)("td",{parentName:"tr",align:null},"array","[string]"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},'["hmac-sha1","hmac-sha256","hmac-sha512"]'),(0,r.kt)("td",{parentName:"tr",align:null},'combination of "hmac-sha1","hmac-sha256",and "hmac-sha512"'),(0,r.kt)("td",{parentName:"tr",align:null},"The list of HMAC algorithms allowed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clock_skew"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"300"),(0,r.kt)("td",{parentName:"tr",align:null},">=1"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum allowable time difference in seconds between the client request's timestamp and APISIX server's current time. This helps account for discrepancies in time synchronization between the client\u2019s and server\u2019s clocks and protect against replay attacks. The timestamp in the Date header (must be in GMT format) will be used for the calculation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"signed_headers"),(0,r.kt)("td",{parentName:"tr",align:null},"array","[string]"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The list of HMAC-signed headers that should be included in the client request's HMAC signature.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"validate_request_body"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"If true, validate the integrity of the request body to ensure it has not been tampered with during transmission. Specifically, the Plugin creates a SHA-256 base64-encoded digest and compare it to the ",(0,r.kt)("inlineCode",{parentName:"td"},"Digest")," header. If the Digest` header is missing or if the digests do not match, the validation fails.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hide_credentials"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"If true, do not pass the authorization request header to Upstream services.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"anonymous_consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Anonymous Consumer name. If configured, allow anonymous users to bypass the authentication.")))),(0,r.kt)("p",null,"NOTE: ",(0,r.kt)("inlineCode",{parentName:"p"},'encrypt_fields = {"secret_key"}')," is also defined in the schema, which means that the field will be stored encrypted in etcd. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugin-develop#encrypted-storage-fields"},"encrypted storage fields"),"."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The examples below demonstrate how you can work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Plugin for different scenarios."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can fetch the ",(0,r.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,r.kt)("h3",{id:"implement-hmac-authentication-on-a-route"},"Implement HMAC Authentication on a Route"),(0,r.kt)("p",null,"The following example demonstrates how to implement HMAC authentications on a route. You will also attach a Consumer custom ID to authenticated request in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer-Custom-Id")," header, which can be used to implement additional logics as needed."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"john")," with a custom ID label:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "john",\n    "labels": {\n      "custom_id": "495aec6a"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/john/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-hmac-auth",\n    "plugins": {\n      "hmac-auth": {\n        "key_id": "john-key",\n        "secret_key": "john-secret-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Plugin using its default configurations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "hmac-auth-route",\n    "uri": "/get",\n    "methods": ["GET"],\n    "plugins": {\n      "hmac-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Generate a signature. You can use the below Python snippet or other stack of your choice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="hmac-sig-header-gen.py"',title:'"hmac-sig-header-gen.py"'},'import hmac\nimport hashlib\nimport base64\nfrom datetime import datetime, timezone\n\nkey_id = "john-key"                # key id\nsecret_key = b"john-secret-key"    # secret key\nrequest_method = "GET"             # HTTP method\nrequest_path = "/get"              # Route URI\nalgorithm= "hmac-sha256"           # can use other algorithms in allowed_algorithms\n\n# get current datetime in GMT\n# note: the signature will become invalid after the clock skew (default 300s)\n# you can regenerate the signature after it becomes invalid, or increase the clock\n# skew to prolong the validity within the advised security boundary\ngmt_time = datetime.now(timezone.utc).strftime(\'%a, %d %b %Y %H:%M:%S GMT\')\n\n# construct the signing string (ordered)\n# the date and any subsequent custom headers should be lowercased and separated by a\n# single space character, i.e. `<key>:<space><value>`\n# https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-12#section-2.1.6\nsigning_string = (\n  f"{key_id}\\n"\n  f"{request_method} {request_path}\\n"\n  f"date: {gmt_time}\\n"\n)\n\n# create signature\nsignature = hmac.new(secret_key, signing_string.encode(\'utf-8\'), hashlib.sha256).digest()\nsignature_base64 = base64.b64encode(signature).decode(\'utf-8\')\n\n# construct the request headers\nheaders = {\n  "Date": gmt_time,\n  "Authorization": (\n    f\'Signature keyId="{key_id}",algorithm="{algorithm}",\'\n    f\'headers="@request-target date",\'\n    f\'signature="{signature_base64}"\'\n  )\n}\n\n# print headers\nprint(headers)\n')),(0,r.kt)("p",null,"Run the script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"python3 hmac-sig-header-gen.py\n")),(0,r.kt)("p",null,"You should see the request headers printed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"{'Date': 'Fri, 06 Sep 2024 06:41:29 GMT', 'Authorization': 'Signature keyId=\"john-key\",algorithm=\"hmac-sha256\",headers=\"@request-target date\",signature=\"wWfKQvPDr0wHQ4IHdluB4IzeNZcj0bGJs2wvoCOT5rM=\"'}\n")),(0,r.kt)("p",null,"Using the headers generated, send a request to the route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X GET "http://127.0.0.1:9080/get" \\\n  -H "Date: Fri, 06 Sep 2024 06:41:29 GMT" \\\n  -H \'Authorization: Signature keyId="john-key",algorithm="hmac-sha256",headers="@request-target date",signature="wWfKQvPDr0wHQ4IHdluB4IzeNZcj0bGJs2wvoCOT5rM="\'\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Authorization": "Signature keyId=\\"john-key\\",algorithm=\\"hmac-sha256\\",headers=\\"@request-target date\\",signature=\\"wWfKQvPDr0wHQ4IHdluB4IzeNZcj0bGJs2wvoCOT5rM=\\"",\n    "Date": "Fri, 06 Sep 2024 06:41:29 GMT",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66d96513-2e52d4f35c9b6a2772d667ea",\n    "X-Consumer-Username": "john",\n    "X-Credential-Identifier": "cred-john-hmac-auth",\n    "X-Consumer-Custom-Id": "495aec6a",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "origin": "192.168.65.1, 34.0.34.160",\n  "url": "http://127.0.0.1/get"\n}\n')),(0,r.kt)("h3",{id:"hide-authorization-information-from-upstream"},"Hide Authorization Information From Upstream"),(0,r.kt)("p",null,"As seen the in the ",(0,r.kt)("a",{parentName:"p",href:"#implement-hmac-authentication-on-a-route"},"last example"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header passed to the Upstream includes the signature and all other details. This could potentially introduce security risks."),(0,r.kt)("p",null,"The following example demonstrates how to prevent these information from being sent to the Upstream service."),(0,r.kt)("p",null,"Update the Plugin configuration to set ",(0,r.kt)("inlineCode",{parentName:"p"},"hide_credentials")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes/hmac-auth-route" -X PATCH \\\n-H "X-API-KEY: ${admin_key}" \\\n-d \'{\n  "plugins": {\n    "hmac-auth": {\n      "hide_credentials": true\n    }\n  }\n}\'\n')),(0,r.kt)("p",null,"Send a request to the route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X GET "http://127.0.0.1:9080/get" \\\n  -H "Date: Fri, 06 Sep 2024 06:41:29 GMT" \\\n  -H \'Authorization: Signature keyId="john-key",algorithm="hmac-sha256",headers="@request-target date",signature="wWfKQvPDr0wHQ4IHdluB4IzeNZcj0bGJs2wvoCOT5rM="\'\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response and notice the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header is entirely removed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66d96513-2e52d4f35c9b6a2772d667ea",\n    "X-Consumer-Username": "john",\n    "X-Credential-Identifier": "cred-john-hmac-auth",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "origin": "192.168.65.1, 34.0.34.160",\n  "url": "http://127.0.0.1/get"\n}\n')),(0,r.kt)("h3",{id:"enable-body-validation"},"Enable Body Validation"),(0,r.kt)("p",null,"The following example demonstrates how to enable body validation to ensure the integrity of the request body."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"john"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "john"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/john/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-hmac-auth",\n    "plugins": {\n      "hmac-auth": {\n        "key_id": "john-key",\n        "secret_key": "john-secret-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Plugin as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "hmac-auth-route",\n    "uri": "/post",\n    "methods": ["POST"],\n    "plugins": {\n      "hmac-auth": {\n        "validate_request_body": true\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Generate a signature. You can use the below Python snippet or other stack of your choice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="hmac-sig-digest-header-gen.py"',title:'"hmac-sig-digest-header-gen.py"'},'import hmac\nimport hashlib\nimport base64\nfrom datetime import datetime, timezone\n\nkey_id = "john-key"                 # key id\nsecret_key = b"john-secret-key"     # secret key\nrequest_method = "POST"             # HTTP method\nrequest_path = "/post"              # Route URI\nalgorithm= "hmac-sha256"            # can use other algorithms in allowed_algorithms\nbody = \'{"name": "world"}\'          # example request body\n\n# get current datetime in GMT\n# note: the signature will become invalid after the clock skew (default 300s).\n# you can regenerate the signature after it becomes invalid, or increase the clock\n# skew to prolong the validity within the advised security boundary\ngmt_time = datetime.now(timezone.utc).strftime(\'%a, %d %b %Y %H:%M:%S GMT\')\n\n# construct the signing string (ordered)\n# the date and any subsequent custom headers should be lowercased and separated by a\n# single space character, i.e. `<key>:<space><value>`\n# https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-12#section-2.1.6\nsigning_string = (\n    f"{key_id}\\n"\n    f"{request_method} {request_path}\\n"\n    f"date: {gmt_time}\\n"\n)\n\n# create signature\nsignature = hmac.new(secret_key, signing_string.encode(\'utf-8\'), hashlib.sha256).digest()\nsignature_base64 = base64.b64encode(signature).decode(\'utf-8\')\n\n# create the SHA-256 digest of the request body and base64 encode it\nbody_digest = hashlib.sha256(body.encode(\'utf-8\')).digest()\nbody_digest_base64 = base64.b64encode(body_digest).decode(\'utf-8\')\n\n# construct the request headers\nheaders = {\n    "Date": gmt_time,\n    "Digest": f"SHA-256={body_digest_base64}",\n    "Authorization": (\n        f\'Signature keyId="{key_id}",algorithm="hmac-sha256",\'\n        f\'headers="@request-target date",\'\n        f\'signature="{signature_base64}"\'\n    )\n}\n\n# print headers\nprint(headers)\n')),(0,r.kt)("p",null,"Run the script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"python3 hmac-sig-digest-header-gen.py\n")),(0,r.kt)("p",null,"You should see the request headers printed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"{'Date': 'Fri, 06 Sep 2024 09:16:16 GMT', 'Digest': 'SHA-256=78qzJuLwSpZ8HacsTdFCQJWxzPMOf8bYctRk2ySLpS8=', 'Authorization': 'Signature keyId=\"john-key\",algorithm=\"hmac-sha256\",headers=\"@request-target date\",signature=\"rjS6NxOBKmzS8CZL05uLiAfE16hXdIpMD/L/HukOTYE=\"'}\n")),(0,r.kt)("p",null,"Using the headers generated, send a request to the route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9080/post" -X POST \\\n  -H "Date: Fri, 06 Sep 2024 09:16:16 GMT" \\\n  -H "Digest: SHA-256=78qzJuLwSpZ8HacsTdFCQJWxzPMOf8bYctRk2ySLpS8=" \\\n  -H \'Authorization: Signature keyId="john-key",algorithm="hmac-sha256",headers="@request-target date",signature="rjS6NxOBKmzS8CZL05uLiAfE16hXdIpMD/L/HukOTYE="\' \\\n  -d \'{"name": "world"}\'\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "data": "",\n  "files": {},\n  "form": {\n    "{\\"name\\": \\"world\\"}": ""\n  },\n  "headers": {\n    "Accept": "*/*",\n    "Authorization": "Signature keyId=\\"john-key\\",algorithm=\\"hmac-sha256\\",headers=\\"@request-target date\\",signature=\\"rjS6NxOBKmzS8CZL05uLiAfE16hXdIpMD/L/HukOTYE=\\"",\n    "Content-Length": "17",\n    "Content-Type": "application/x-www-form-urlencoded",\n    "Date": "Fri, 06 Sep 2024 09:16:16 GMT",\n    "Digest": "SHA-256=78qzJuLwSpZ8HacsTdFCQJWxzPMOf8bYctRk2ySLpS8=",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66d978c3-49f929ad5237da5340bbbeb4",\n    "X-Consumer-Username": "john",\n    "X-Credential-Identifier": "cred-john-hmac-auth",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "json": null,\n  "origin": "192.168.65.1, 34.0.34.160",\n  "url": "http://127.0.0.1/post"\n}\n')),(0,r.kt)("p",null,"If you send a request without the digest or with an invalid digest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9080/post" -X POST \\\n  -H "Date: Fri, 06 Sep 2024 09:16:16 GMT" \\\n  -H "Digest: SHA-256=78qzJuLwSpZ8HacsTdFCQJWxzPMOf8bYctRk2ySLpS8=" \\\n  -H \'Authorization: Signature keyId="john-key",algorithm="hmac-sha256",headers="@request-target date",signature="rjS6NxOBKmzS8CZL05uLiAfE16hXdIpMD/L/HukOTYE="\' \\\n  -d \'{"name": "world"}\'\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," response with the following message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"message":"client request can\'t be validated"}\n')),(0,r.kt)("h3",{id:"mandate-signed-headers"},"Mandate Signed Headers"),(0,r.kt)("p",null,"The following example demonstrates how you can mandate certain headers to be signed in the request's HMAC signature."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"john"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "john"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/john/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-hmac-auth",\n    "plugins": {\n      "hmac-auth": {\n        "key_id": "john-key",\n        "secret_key": "john-secret-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Plugin which requires three headers to be present in the HMAC signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "hmac-auth-route",\n    "uri": "/get",\n    "methods": ["GET"],\n    "plugins": {\n      "hmac-auth": {\n        "signed_headers": ["date","x-custom-header-a","x-custom-header-b"]\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Generate a signature. You can use the below Python snippet or other stack of your choice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="hmac-sig-req-header-gen.py"',title:'"hmac-sig-req-header-gen.py"'},'import hmac\nimport hashlib\nimport base64\nfrom datetime import datetime, timezone\n\nkey_id = "john-key"                # key id\nsecret_key = b"john-secret-key"    # secret key\nrequest_method = "GET"             # HTTP method\nrequest_path = "/get"              # Route URI\nalgorithm= "hmac-sha256"           # can use other algorithms in allowed_algorithms\ncustom_header_a = "hello123"       # required custom header\ncustom_header_b = "world456"       # required custom header\n\n# get current datetime in GMT\n# note: the signature will become invalid after the clock skew (default 300s)\n# you can regenerate the signature after it becomes invalid, or increase the clock\n# skew to prolong the validity within the advised security boundary\ngmt_time = datetime.now(timezone.utc).strftime(\'%a, %d %b %Y %H:%M:%S GMT\')\n\n# construct the signing string (ordered)\n# the date and any subsequent custom headers should be lowercased and separated by a\n# single space character, i.e. `<key>:<space><value>`\n# https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-12#section-2.1.6\nsigning_string = (\n    f"{key_id}\\n"\n    f"{request_method} {request_path}\\n"\n    f"date: {gmt_time}\\n"\n    f"x-custom-header-a: {custom_header_a}\\n"\n    f"x-custom-header-b: {custom_header_b}\\n"\n)\n\n# create signature\nsignature = hmac.new(secret_key, signing_string.encode(\'utf-8\'), hashlib.sha256).digest()\nsignature_base64 = base64.b64encode(signature).decode(\'utf-8\')\n\n# construct the request headers\nheaders = {\n    "Date": gmt_time,\n    "Authorization": (\n        f\'Signature keyId="{key_id}",algorithm="hmac-sha256",\'\n        f\'headers="@request-target date x-custom-header-a x-custom-header-b",\'\n        f\'signature="{signature_base64}"\'\n    ),\n    "x-custom-header-a": custom_header_a,\n    "x-custom-header-b": custom_header_b\n}\n\n# print headers\nprint(headers)\n')),(0,r.kt)("p",null,"Run the script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"python3 hmac-sig-req-header-gen.py\n")),(0,r.kt)("p",null,"You should see the request headers printed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"{'Date': 'Fri, 06 Sep 2024 09:58:49 GMT', 'Authorization': 'Signature keyId=\"john-key\",algorithm=\"hmac-sha256\",headers=\"@request-target date x-custom-header-a x-custom-header-b\",signature=\"MwJR8JOhhRLIyaHlJ3Snbrf5hv0XwdeeRiijvX3A3yE=\"', 'x-custom-header-a': 'hello123', 'x-custom-header-b': 'world456'}\n")),(0,r.kt)("p",null,"Using the headers generated, send a request to the route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X GET "http://127.0.0.1:9080/get" \\\n     -H "Date: Fri, 06 Sep 2024 09:58:49 GMT" \\\n     -H \'Authorization: Signature keyId="john-key",algorithm="hmac-sha256",headers="@request-target date x-custom-header-a x-custom-header-b",signature="MwJR8JOhhRLIyaHlJ3Snbrf5hv0XwdeeRiijvX3A3yE="\' \\\n     -H "x-custom-header-a: hello123" \\\n     -H "x-custom-header-b: world456"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Authorization": "Signature keyId=\\"john-key\\",algorithm=\\"hmac-sha256\\",headers=\\"@request-target date x-custom-header-a x-custom-header-b\\",signature=\\"MwJR8JOhhRLIyaHlJ3Snbrf5hv0XwdeeRiijvX3A3yE=\\"",\n    "Date": "Fri, 06 Sep 2024 09:58:49 GMT",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66d98196-64a58db25ece71c077999ecd",\n    "X-Consumer-Username": "john",\n    "X-Credential-Identifier": "cred-john-hmac-auth",\n    "X-Custom-Header-A": "hello123",\n    "X-Custom-Header-B": "world456",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "origin": "192.168.65.1, 103.97.2.206",\n  "url": "http://127.0.0.1/get"\n}\n')),(0,r.kt)("h3",{id:"rate-limit-with-anonymous-consumer"},"Rate Limit with Anonymous Consumer"),(0,r.kt)("p",null,"The following example demonstrates how you can configure different rate limiting policies by regular and anonymous consumers, where the anonymous Consumer does not need to authenticate and has less quotas."),(0,r.kt)("p",null,"Create a regular Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"john")," and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 3 within a 30-second window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "john",\n    "plugins": {\n      "limit-count": {\n        "count": 3,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create the ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Credential for the Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"john"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/john/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-hmac-auth",\n    "plugins": {\n      "hmac-auth": {\n        "key_id": "john-key",\n        "secret_key": "john-secret-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create an anonymous user ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 1 within a 30-second window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "anonymous",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"hmac-auth")," Plugin to accept anonymous Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," from bypassing the authentication:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "hmac-auth-route",\n    "uri": "/get",\n    "methods": ["GET"],\n    "plugins": {\n      "hmac-auth": {\n        "anonymous_consumer": "anonymous"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Generate a signature. You can use the below Python snippet or other stack of your choice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="hmac-sig-header-gen.py"',title:'"hmac-sig-header-gen.py"'},'import hmac\nimport hashlib\nimport base64\nfrom datetime import datetime, timezone\n\nkey_id = "john-key"                # key id\nsecret_key = b"john-secret-key"    # secret key\nrequest_method = "GET"             # HTTP method\nrequest_path = "/get"              # Route URI\nalgorithm= "hmac-sha256"           # can use other algorithms in allowed_algorithms\n\n# get current datetime in GMT\n# note: the signature will become invalid after the clock skew (default 300s)\n# you can regenerate the signature after it becomes invalid, or increase the clock\n# skew to prolong the validity within the advised security boundary\ngmt_time = datetime.now(timezone.utc).strftime(\'%a, %d %b %Y %H:%M:%S GMT\')\n\n# construct the signing string (ordered)\n# the date and any subsequent custom headers should be lowercased and separated by a\n# single space character, i.e. `<key>:<space><value>`\n# https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures-12#section-2.1.6\nsigning_string = (\n  f"{key_id}\\n"\n  f"{request_method} {request_path}\\n"\n  f"date: {gmt_time}\\n"\n)\n\n# create signature\nsignature = hmac.new(secret_key, signing_string.encode(\'utf-8\'), hashlib.sha256).digest()\nsignature_base64 = base64.b64encode(signature).decode(\'utf-8\')\n\n# construct the request headers\nheaders = {\n  "Date": gmt_time,\n  "Authorization": (\n    f\'Signature keyId="{key_id}",algorithm="{algorithm}",\'\n    f\'headers="@request-target date",\'\n    f\'signature="{signature_base64}"\'\n  )\n}\n\n# print headers\nprint(headers)\n')),(0,r.kt)("p",null,"Run the script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"python3 hmac-sig-header-gen.py\n")),(0,r.kt)("p",null,"You should see the request headers printed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"{'Date': 'Mon, 21 Oct 2024 17:31:18 GMT', 'Authorization': 'Signature keyId=\"john-key\",algorithm=\"hmac-sha256\",headers=\"@request-target date\",signature=\"ztFfl9w7LmCrIuPjRC/DWSF4gN6Bt8dBBz4y+u1pzt8=\"'}\n")),(0,r.kt)("p",null,"To verify, send five consecutive requests with the generated headers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -H "Date: Mon, 21 Oct 2024 17:31:18 GMT" -H \'Authorization: Signature keyId="john-key",algorithm="hmac-sha256",headers="@request-target date",signature="ztFfl9w7LmCrIuPjRC/DWSF4gN6Bt8dBBz4y+u1pzt8="\' -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that out of the 5 requests, 3 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    3, 429:    2\n")),(0,r.kt)("p",null,"Send five anonymous requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that only one request was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    1, 429:    4\n")))}d.isMDXComponent=!0}}]);