"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[90890],{35318:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>p});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=r,k=u["".concat(s,".").concat(p)]||u[p]||d[p]||o;return n?a.createElement(k,i(i({ref:t},h),{},{components:n})):a.createElement(k,i({ref:t},h))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},78672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(25773),r=(n(27378),n(35318));const o={title:"Web resource caching: Client-Side",authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258"}],keywords:["Web","HTTP","Cache","Performance"],description:"The subject of Web resource caching is as old as the World Wide Web itself. However, I'd like to offer an as-exhaustive-as-possible catalog of how one can improve performance by caching. Web resource caching can happen in two different places: client-side - on the browser and server-side. This post is dedicated to the former; the next post will focus on the latter.",tags:["Ecosystem"],image:"https://static.apiseven.com/2022/12/13/63981dcbe4b0c.jpg"},i=void 0,l={permalink:"/blog/2022/12/07/web-caching-client",source:"@site/blog/2022/12/07/web-caching-client.md",title:"Web resource caching: Client-Side",description:"The subject of Web resource caching is as old as the World Wide Web itself. However, I'd like to offer an as-exhaustive-as-possible catalog of how one can improve performance by caching. Web resource caching can happen in two different places: client-side - on the browser and server-side. This post is dedicated to the former; the next post will focus on the latter.",date:"2022-12-07T00:00:00.000Z",formattedDate:"December 7, 2022",tags:[{label:"Ecosystem",permalink:"/blog/tags/ecosystem"}],readingTime:9.29,truncated:!0,authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258",imageURL:"https://avatars.githubusercontent.com/u/752258"}],prevItem:{title:"Web resource caching: Server-Side",permalink:"/blog/2022/12/14/web-caching-server"},nextItem:{title:"How to choose the right API Style and Technology",permalink:"/blog/2022/12/06/choose-the-right-api-style-technology"}},s={authorsImageUrls:[void 0]},c=[{value:"Caching 101",id:"caching-101",children:[],level:2},{value:"Early Web resource caching",id:"early-web-resource-caching",children:[],level:2},{value:"Cache-Control to the rescue",id:"cache-control-to-the-rescue",children:[],level:2},{value:"Last-Modified and ETag",id:"last-modified-and-etag",children:[],level:2},{value:"The Cache API",id:"the-cache-api",children:[],level:2},{value:"Summary",id:"summary",children:[],level:2},{value:"A bit of practice",id:"a-bit-of-practice",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],h={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The subject of Web resource caching is as old as the World Wide Web itself. However, I'd like to offer an as-exhaustive-as-possible catalog of how one can improve performance by caching. Web resource caching can happen in two different places: client-side - on the browser and server-side. This post is dedicated to the former; the next post will focus on the latter.")),(0,r.kt)("head",null,(0,r.kt)("link",{rel:"canonical",href:"https://blog.frankel.ch/web-caching/client/"})),(0,r.kt)("h2",{id:"caching-101"},"Caching 101"),(0,r.kt)("p",null,"The idea behind caching is simple: if a resource is a time- or resource-consuming to compute, do it once and store the result. When somebody requests the resource afterward, return the stored result instead of computing it a second time. It looks simple - and it is, but the devil is in the detail, as they say."),(0,r.kt)("p",null,'The problem is that a "computation" is not a mathematical one. In mathematics, the result of a computation is constant over time. On the Web, the resource you requested yesterday may be different if you request it today. Think about the weather forecast, for example. It all boils down to two related concepts: ',(0,r.kt)("strong",{parentName:"p"},"freshness")," and ",(0,r.kt)("strong",{parentName:"p"},"staleness"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A fresh response is one whose age has not yet exceeded its freshness lifetime. Conversely, a stale response is one where it has."),(0,r.kt)("p",{parentName:"blockquote"},"A response's freshness lifetime is the length of time between its generation by the origin server and its expiration time. An explicit expiration time is the time at which the origin server intends that a stored response can no longer be used by a ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache")," without further validation, whereas a heuristic expiration time is assigned by a ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache")," when no explicit expiration time is available. A response's age is the time that has passed since it was generated by, or successfully validated with, the origin server."),(0,r.kt)("p",{parentName:"blockquote"},'When a response is "fresh" in the cache, it can be used to satisfy subsequent requests without contacting the origin server, thereby improving efficiency.'),(0,r.kt)("p",{parentName:"blockquote"},"-- ",(0,r.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7234#section-4.2"},"RFC 7234 - 4.2. Freshness"))),(0,r.kt)("h2",{id:"early-web-resource-caching"},"Early Web resource caching"),(0,r.kt)("p",null,'Remember that the WWW was relatively simple at its beginning compared to nowadays. The client would send a request, and the server would return the requested resource. When the resource was a page, whether it was a static page or a server-rendered page was unimportant. Hence, early client-side caching was pretty "rustic".'),(0,r.kt)("p",null,"The first specification of Web caching is defined in ",(0,r.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7234"},"RFC 7234"),", ",(0,r.kt)("em",{parentName:"p"},"aka")," HTTP/1.1 Caching, in 2014. Note that it has been superseded by ",(0,r.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc9111"},"RFC 9111")," since 2022."),(0,r.kt)("p",null,"I won't talk here about the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pragma")," HTTP header since it's deprecated. The most straightforward cache management is through the ",(0,r.kt)("inlineCode",{parentName:"p"},"Expire")," response header. When the server returns the resource, it specifies after which timestamp the cache is stale. The browser has two options when a cached resource is requested:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Either the current time is ",(0,r.kt)("em",{parentName:"li"},"before")," the expiry timestamp: the resource is considered fresh, and the browser serves it from the local cache"),(0,r.kt)("li",{parentName:"ul"},"Or it's ",(0,r.kt)("em",{parentName:"li"},"after"),": the resource is considered stale, and the browser requires the resource from the server as it was not cached")),(0,r.kt)("p",null,"The benefit of ",(0,r.kt)("inlineCode",{parentName:"p"},"Expire")," is that it's a purely local decision. It doesn't need to send a request to the server. However, it has two main issues:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The decision to use the locally cached resource (or not) is based on heuristics. The resource may have changed server-side despite the ",(0,r.kt)("inlineCode",{parentName:"li"},"Expiry")," value being in the future, so the browser serves an out-of-date resource. Conversely, the browser may send a request because the time has expired, but the resource hasn't changed."),(0,r.kt)("li",{parentName:"ul"},"Moreover, ",(0,r.kt)("inlineCode",{parentName:"li"},"Expire")," is pretty basic. A resource is either fresh or stale; either return it from the ",(0,r.kt)("inlineCode",{parentName:"li"},"Cache")," or send the request again. We may want to have more control.")),(0,r.kt)("h2",{id:"cache-control-to-the-rescue"},"Cache-Control to the rescue"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control")," header aims to address the following requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Never cache a resource at all"),(0,r.kt)("li",{parentName:"ul"},"Validate if a resource should be served from the cache before serving it"),(0,r.kt)("li",{parentName:"ul"},"Can intermediate caches (proxies) cache the resource?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control")," is an HTTP header used on the request ",(0,r.kt)("strong",{parentName:"p"},"and")," the response. The header can contain different directives separated by commas. Exact directives vary depending on whether they're part of the request or the response."),(0,r.kt)("p",null,"All in all, ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control")," is quite complex. It might be well the subject of a dedicated post; I won't paraphrase the ",(0,r.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc9111#name-cache-control"},"specification"),"."),(0,r.kt)("p",null,"However, here's a visual help on how to configure ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control")," response headers."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://blog.frankel.ch/assets/generated/web-caching/cache-control-flow.svg",alt:"Cache Control flow"})),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#use_cases"},"Cache Control")," page of Mozilla Developer Network has some significant use cases of ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control"),", complete with configuration."),(0,r.kt)("p",null,"As ",(0,r.kt)("inlineCode",{parentName:"p"},"Expire"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control")," is also ",(0,r.kt)("strong",{parentName:"p"},"local"),": the browser serves the resource from its cache, if needed, without any request to the server."),(0,r.kt)("h2",{id:"last-modified-and-etag"},"Last-Modified and ETag"),(0,r.kt)("p",null,"To avoid the risk of serving an out-of-date resource, the browser ",(0,r.kt)("strong",{parentName:"p"},"must")," send a request to the server. Enters the ",(0,r.kt)("inlineCode",{parentName:"p"},"Last-Modified")," response header. ",(0,r.kt)("inlineCode",{parentName:"p"},"Last-Modified")," works in conjunction with the ",(0,r.kt)("inlineCode",{parentName:"p"},"If-Modified-Since")," ",(0,r.kt)("em",{parentName:"p"},"request")," header:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"If-Modified-Since")," request HTTP header makes the request conditional: the server sends back the requested resource, with a ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," status, only if it has been last modified after the given date. If the resource has not been modified since, the response is a ",(0,r.kt)("inlineCode",{parentName:"p"},"304")," without any body; the ",(0,r.kt)("inlineCode",{parentName:"p"},"Last-Modified")," response header of a previous request contains the date of last modification. Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"If-Unmodified-Since"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"If-Modified-Since")," can only be used with a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"HEAD"),"."),(0,r.kt)("p",{parentName:"blockquote"},"-- ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since"},"If-Modified-Since"))),(0,r.kt)("p",null,"Let's use a diagram to make clear how they interact:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://blog.frankel.ch/assets/generated/web-caching/last-modified-sequence.svg",alt:"Last-Modified sequence diagram"})),(0,r.kt)("p",null,"Note: the ",(0,r.kt)("inlineCode",{parentName:"p"},"If-Unmodified-Since")," has the opposite function for ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," and other non-idempotent methods. It returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"412 Precondition Failed")," HTTP error to avoid overwriting resources that have changed."),(0,r.kt)("p",null,"A resource's last modified timestamp correlates well with whether it has changed. It still needs improvement. For example, a batch job could update the resource with the same content but change the last modified timestamp."),(0,r.kt)("p",null,"Etags are an alternative to timestamps to avoid the above issue. The server computes the hash of the served resource and sends the ",(0,r.kt)("inlineCode",{parentName:"p"},"ETag")," header containing the value along with the resource. When a new request comes in with the ",(0,r.kt)("inlineCode",{parentName:"p"},"If-None-Match")," containing the hash value, the server compares it with the current hash. If they match, it returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"304")," as above."),(0,r.kt)("p",null,"It has the slight overhead of computing the hash vs. just handing the timestamp, but it's nowadays considered a good practice."),(0,r.kt)("h2",{id:"the-cache-api"},"The Cache API"),(0,r.kt)("p",null,"The most recent way to cache on the client side is via the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Cache"},"Cache API"),". It offers a general cache interface: you can think of it as a local key-value provided by the browser."),(0,r.kt)("p",null,"Here are the provided methods:"),(0,r.kt)("table",null,(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache.match(request, options)")),(0,r.kt)("td",null,"Returns a ",(0,r.kt)("code",null,"Promise")," that resolves to the response associated with the first matching request in the ",(0,r.kt)("code",null,"Cache")," object.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache.matchAll(request, options)")),(0,r.kt)("td",null,"Returns a ",(0,r.kt)("code",null,"Promise")," that resolves to an array of all matching responses in the ",(0,r.kt)("code",null,"Cache")," object.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache.add(request)")),(0,r.kt)("td",null,"Takes a URL, retrieves it and adds the resulting response object to the given cache. This is functionally equivalent to calling ",(0,r.kt)("code",null,"fetch()"),", then using ",(0,r.kt)("code",null,"put()")," to add the results to the cache.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache.addAll(requests)")),(0,r.kt)("td",null,"Takes an array of URLs, retrieves them, and adds the resulting response objects to the given cache.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache.put(request, response)")),(0,r.kt)("td",null,"Takes both a request and its response and adds it to the given cache.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache.delete(request, options)")),(0,r.kt)("td",null,"Finds the ",(0,r.kt)("code",null,"Cache")," entry whose key is the request, returning a ",(0,r.kt)("code",null,"Promise")," that resolves to ",(0,r.kt)("code",null,"true")," if a matching ",(0,r.kt)("code",null,"Cache")," entry is found and deleted. If no ",(0,r.kt)("code",null,"Cache")," entry is found, the ",(0,r.kt)("code",null,"Promise")," resolves to ",(0,r.kt)("code",null,"false"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache.keys(request, options)")),(0,r.kt)("td",null,"Returns a ",(0,r.kt)("code",null,"Promise")," that resolves to an array of ",(0,r.kt)("code",null,"Cache")," keys.")))),(0,r.kt)("p",null,"The Cache API works in conjunction with ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers"},"Service Workers"),". The flow is simple:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"You register a service worker on a URL"),(0,r.kt)("li",{parentName:"ol"},"The browser calls the worker before the URL fetch call"),(0,r.kt)("li",{parentName:"ol"},"From the worker, you can return resources from the cache and avoid ",(0,r.kt)("strong",{parentName:"li"},"any")," request to the server")),(0,r.kt)("p",null,"It allows us to put resources in the cache after the initial load so that the client can work offline - depending on the use case."),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Here's a summary of the above alternatives to cache resources client-side."),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Order"),(0,r.kt)("th",null,"Alternative"),(0,r.kt)("th",null,"Managed by"),(0,r.kt)("th",null,"Local"),(0,r.kt)("th",null,"Pros"),(0,r.kt)("th",null,"Cons"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"1"),(0,r.kt)("td",null,"Service worker + Cache API"),(0,r.kt)("td",null,"You"),(0,r.kt)("td",null,"Yes"),(0,r.kt)("td",null,"Flexible"),(0,r.kt)("td",null,(0,r.kt)("ul",null,(0,r.kt)("li",null,"Requires JavaScript coding skills"),(0,r.kt)("li",null,"Coding and maintenance time")))),(0,r.kt)("tr",null,(0,r.kt)("td",{rowspan:"2"},"2"),(0,r.kt)("td",null,(0,r.kt)("code",null,"Expire")),(0,r.kt)("td",null,"Browser"),(0,r.kt)("td",null,"Yes"),(0,r.kt)("td",null,"Easy configuration"),(0,r.kt)("td",null,(0,r.kt)("ul",null,(0,r.kt)("li",null,"Guess-based"),(0,r.kt)("li",null,"Simplistic")))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"Cache-Control")),(0,r.kt)("td",null,"Browser"),(0,r.kt)("td",null,"Yes"),(0,r.kt)("td",null,"Fine-grained control"),(0,r.kt)("td",null,(0,r.kt)("ul",null,(0,r.kt)("li",null,"Guess-based"),(0,r.kt)("li",null,"Complex configuration")))),(0,r.kt)("tr",null,(0,r.kt)("td",{rowspan:"2"},"3"),(0,r.kt)("td",null,(0,r.kt)("code",null,"Last-Modified")),(0,r.kt)("td",null,"Browser"),(0,r.kt)("td",null,"No"),(0,r.kt)("td",null,"Just works"),(0,r.kt)("td",null,"Mishandle unchanged resources with a different timestamp")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"ETag")),(0,r.kt)("td",null,"Browser"),(0,r.kt)("td",null,"No"),(0,r.kt)("td",null,"Just works"),(0,r.kt)("td",null,"Slightly more resource-sensitive to compute the hash")))),(0,r.kt)("p",null,"Note that those alternatives aren't exclusive. You may have a short ",(0,r.kt)("inlineCode",{parentName:"p"},"Expire")," header and rely on ",(0,r.kt)("inlineCode",{parentName:"p"},"ETag"),". You should probably use both a level 2 alternative and a level 3."),(0,r.kt)("h2",{id:"a-bit-of-practice"},"A bit of practice"),(0,r.kt)("p",null,"Let's put the theory that we have seen above into practice. I'll set up a two-tiered HTTP cache:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first tier caches resources locally for 10 seconds using ",(0,r.kt)("inlineCode",{parentName:"li"},"Cache-Control")),(0,r.kt)("li",{parentName:"ul"},"The second tier uses ",(0,r.kt)("inlineCode",{parentName:"li"},"ETag")," to avoid optimizing the data load over the network")),(0,r.kt)("p",null,"I'll use ",(0,r.kt)("a",{parentName:"p",href:"https://apisix.apache.org/"},"Apache APISIX"),". APISIX sits on the shoulder of giants, namely NGINX. NGINX adds ",(0,r.kt)("inlineCode",{parentName:"p"},"ETag")," response headers ",(0,r.kt)("em",{parentName:"p"},"by default"),"."),(0,r.kt)("p",null,"We only need to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control")," response header.\nWe achieve it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"response-rewrite")," plugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'upstreams:\n  - id: 1\n    type: roundrobin\n    nodes:\n      "content:8080": 1\nroutes:\n  - uri: /*\n    upstream_id: 1\n    plugins:\n      response-rewrite:\n        headers:\n          set:\n            Cache-Control: "max-age=10"\n')),(0,r.kt)("p",null,"Let's do it ",(0,r.kt)("em",{parentName:"p"},"without a browser")," first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -v localhost:9080\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nContent-Length: 147\nConnection: keep-alive\nDate: Thu, 24 Nov 2022 08:21:36 GMT\nAccept-Ranges: bytes\nLast-Modified: Wed, 23 Nov 2022 13:58:55 GMT\nETag: "637e271f-93"\nServer: APISIX/3.0.0\nCache-Control: max-age=10\n')),(0,r.kt)("p",null,"To prevent the server from sending the same resource, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ETag")," value in an ",(0,r.kt)("inlineCode",{parentName:"p"},"If-None-Match")," request header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -H 'If-None-Match: \"637e271f-93\"' -v localhost:9080\n")),(0,r.kt)("p",null,"The result is a ",(0,r.kt)("inlineCode",{parentName:"p"},"304 Not Modified")," as expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'HTTP/1.1 304 Not Modified\nContent-Type: text/html; charset=utf-8\nContent-Length: 147\nConnection: keep-alive\nDate: Thu, 24 Nov 2022 08:26:17 GMT\nAccept-Ranges: bytes\nLast-Modified: Wed, 23 Nov 2022 13:58:55 GMT\nETag: "637e271f-93"\nServer: APISIX/3.0.0\nCache-Control: max-age=10\n')),(0,r.kt)("p",null,"Now, we can do the same inside a browser. If we use the ",(0,r.kt)("em",{parentName:"p"},"resend"),"  feature a second time before 10 seconds have passed, the browser returns the resource from the cache without sending the request to the server."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this post, I described several alternatives to cache web resources: ",(0,r.kt)("inlineCode",{parentName:"p"},"Expiry")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache-Control"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Last-Modified")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ETag"),", and the Cache API and web workers."),(0,r.kt)("p",null,"You can easily set the HTTP response headers via a reverse proxy or an API Gateway. With Apache APISIX, ETags are enabled by default, and other headers are easily set up."),(0,r.kt)("p",null,"In the next post, I will describe caching server-side."),(0,r.kt)("p",null,"You can find the source code for this post on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ajavageek/web-caching"},"GitHub"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To go further:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/rfc/rfc7234"},"RFC 7234: HTTP/1.1: Caching (obsolete)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/rfc/rfc9111"},"RFC 9111: HTTP Caching")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching"},"HTTP caching")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control"},"Cache-Control")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://web.dev/http-cache/"},"Prevent unnecessary network requests with the HTTP Cache")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Cache"},"Cache API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://web.dev/service-worker-caching-and-http-caching/"},"Service worker caching and HTTP caching"))))}d.isMDXComponent=!0}}]);