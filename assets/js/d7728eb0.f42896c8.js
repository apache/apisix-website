"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[81098],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)a=o[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)a=o[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=i.createContext({}),c=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,g=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return a?i.createElement(g,r(r({ref:t},p),{},{components:a})):i.createElement(g,r({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var c=2;c<o;c++)r[c]=a[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},43511:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return l},assets:function(){return c},toc:function(){return p},default:function(){return u}});var i=a(87462),n=a(63366),o=(a(67294),a(3905)),r={title:"The observability of Apache APISIX",author:"Haochao Zhuang",authorURL:"https://github.com/dmsolr",authorImageURL:"https://avatars.githubusercontent.com/u/29735230?v=4",keywords:["Apache APISIX","observability","SkyWalking","Apache","Prometheus"],description:"This article introduces the observability capabilities of Apache APISIX and how to improve the observability capabilities of Apache APISIX through Apache SkyWalking.",tags:["Technology"]},s=void 0,l={permalink:"/blog/2021/11/04/skywalking",source:"@site/blog/2021/11/04/skywalking.md",title:"The observability of Apache APISIX",description:"This article introduces the observability capabilities of Apache APISIX and how to improve the observability capabilities of Apache APISIX through Apache SkyWalking.",date:"2021-11-04T00:00:00.000Z",formattedDate:"November 4, 2021",tags:[{label:"Technology",permalink:"/blog/tags/technology"}],readingTime:6.08,truncated:!0,authors:[{name:"Haochao Zhuang",url:"https://github.com/dmsolr",imageURL:"https://avatars.githubusercontent.com/u/29735230?v=4"}],prevItem:{title:"Cloud Monitoring with Datadog in Apache APISIX",permalink:"/blog/2021/11/12/apisix-datadog"},nextItem:{title:"How Apache APISIX protects Airwallex data sovereignty through the gateway layer",permalink:"/blog/2021/11/03/airwallex-usercase"}},c={authorsImageUrls:[void 0]},p=[{value:"Observability Capabilities of Apache APISIX",id:"observability-capabilities-of-apache-apisix",children:[{value:"Tracing",id:"tracing",children:[]},{value:"Metrics",id:"metrics",children:[]},{value:"Logging",id:"logging",children:[]},{value:"Support Querying Node Status",id:"support-querying-node-status",children:[]},{value:"Pitfalls",id:"pitfalls",children:[]}]},{value:"Use Apache SkyWalking to Enhance the Observation Capabilities of Apache APISIX",id:"use-apache-skywalking-to-enhance-the-observation-capabilities-of-apache-apisix",children:[{value:"One-stop Data Processing",id:"one-stop-data-processing",children:[]},{value:"More Detailed Data Presentation",id:"more-detailed-data-presentation",children:[]},{value:"Support Containerized Deployments",id:"support-containerized-deployments",children:[]}]},{value:"Future Plans",id:"future-plans",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],h={toc:p};function u(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,i.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This article introduces the observability capabilities of Apache APISIX and how to improve the observability capabilities of Apache APISIX through Apache SkyWalking.")),(0,o.kt)("p",null,"Observability is the ability to observe the runtime state and resource usage of the internal program of the system from the outside of the system. The main measures of observability are Metrics, Logging, and Tracing, and the following diagram shows the relationship between Metrics, Logging, and Tracing."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1635993536337-f8ee034d-ef3b-40b6-9886-ebde62d8edc6.png",alt:"Metrics, Logging and Tracing Relationship Diagram"})),(0,o.kt)("p",null,"For example, the overlap between Tracing and Logging represents the logs generated by Tracing at the request level, and the Tracing ID is used to associate Tracing and Logging. After performing certain aggregation operations on this log, some Metrics can be obtained. Tracing itself also generates some Metrics, such as the relationship between the call volume."),(0,o.kt)("h2",{id:"observability-capabilities-of-apache-apisix"},"Observability Capabilities of Apache APISIX"),(0,o.kt)("p",null,"Apache APISIX has comprehensive observability capabilities: support for Tracing and Metrics, a rich ecosystem of Logging plug-ins, and support for querying node status."),(0,o.kt)("h3",{id:"tracing"},"Tracing"),(0,o.kt)("p",null,"Apache APISIX supports a variety of Tracing plugins, including: Zipkin, OpenTracing and SkyWalking. Note that: Tracing plug-in is closed by default, you need to manually open Tracing plug-in before use. Tracing plugin needs to be bound to routing or global rules. If there is no requirement for sampling rate, it is recommended to bind to global rules to avoid omissions."),(0,o.kt)("h3",{id:"metrics"},"Metrics"),(0,o.kt)("p",null,"In Apache APISIX, Metrics related information is reported through Prometheus Exporter, which is compatible with the Prometheus data format. There are two things to be aware of when using the Prometheus Plugin in Apache APISIX."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"First, please try to improve the readability of the names of all three - route, service and upstream.")),(0,o.kt)("p",null,"There is a parameter named ",(0,o.kt)("inlineCode",{parentName:"p"},"prefer_name")," in Prometheus Plugin. When the value of this parameter is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", that is: ",(0,o.kt)("inlineCode",{parentName:"p"},"prefer_name: true"),". If the names of routing, service and upstream are relatively readable, This will bring some benefits: when you monitor the parameters on the large screen through Grafana, you can not only clearly display all the data, but also clearly know the source of the data. If the value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"prefer_name")," parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", only the ID of the resource will be displayed as the data source, such as the routing ID and upstream ID, which will cause the problem of low readability of the monitor screen."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Second, the Prometheus Plugin must be bound to a route or global rule before it can view the metrics of the specified resource.")),(0,o.kt)("p",null,"After the above setup, the Metrics data will be stored in Prometheus. Since Prometheus has good storage performance, but poor display performance, we need to use the Grafana Dashboard to display the data. We can see the Metrics for the Nginx instance, the Metrics for the network bandwidth, the Metrics for the routes and upstream, and more, as shown in the following image."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1635993660940-9c9bbb0b-d5f1-4add-b93d-1f076de9aebd.png",alt:"Grafana Dashboard"})),(0,o.kt)("h3",{id:"logging"},"Logging"),(0,o.kt)("p",null,"Apache APISIX supports a variety of logging plugins to share log data directly with other external platforms. The Error Log plug-in supports HTTP and TCP protocols, and is compatible with the log format of SkyWalking. Logs can also be synchronized to logging platforms for processing through log collection components such as FluentBit."),(0,o.kt)("p",null,"The Access Log plugin does not currently support nesting inside the log format. Because the Access Log plugin is route-level, it needs to be bound to a route in order to collect access logs for the route. However, the log format is global, and there can only be one global log format."),(0,o.kt)("h3",{id:"support-querying-node-status"},"Support Querying Node Status"),(0,o.kt)("p",null,"Apache APISIX supports querying node status. When enabled, information about the nodes can be collected via ",(0,o.kt)("inlineCode",{parentName:"p"},"/apisix/status"),", including the number of nodes, the number of waiting links, the number of connections processed, etc."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1635993774170-ca3bf15d-9f55-42ac-9a2f-2d8955f74c5c.png",alt:"Node Status"})),(0,o.kt)("h3",{id:"pitfalls"},"Pitfalls"),(0,o.kt)("p",null,"As mentioned above, Apache APISIX has a well-established observability capability to collect information such as Metrics, Logging, and Tracing. Although the built-in plug-in of Apache APISIX and Grafana Dashboard can solve the problems of monitoring data collection and indicator visualization, all kinds of data are scattered on various platforms. It is expected that an observability analysis platform can integrate Metrics, Logging, and Tracing information and link all data together."),(0,o.kt)("h2",{id:"use-apache-skywalking-to-enhance-the-observation-capabilities-of-apache-apisix"},"Use Apache SkyWalking to Enhance the Observation Capabilities of Apache APISIX"),(0,o.kt)("p",null,"Apache SkyWalking is an application performance monitoring (APM) and observability analysis platform for distributed systems. It provides multi-dimensional application performance analysis methods, from distributed topology diagrams to application performance indicators, traces, log correlation analysis and alarms."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1635993914263-b7511acd-9bcf-49ca-aa32-911fc85acfac.png",alt:"Apache SkyWalking"})),(0,o.kt)("h3",{id:"one-stop-data-processing"},"One-stop Data Processing"),(0,o.kt)("p",null,"Apache SkyWalking supports interfacing with Metrics, Logging, Tracing and other monitoring data, compatible with the Prometheus data model, and can also be used to generate new Metrics through secondary aggregation by Log Analysis Language."),(0,o.kt)("h3",{id:"more-detailed-data-presentation"},"More Detailed Data Presentation"),(0,o.kt)("p",null,"The Dashboard of Apache SkyWalking is divided into two areas: the upper area for feature selection and the lower area for panel content. The upper part is the feature selection area, and the lower part is the content of the dashboard, which provides Metrics related information in multiple entity dimensions, such as Global, Service, Example, Endpoint, etc., and supports different views to show the observability. Take the global view as an example, the displayed Metrics include: service load, number of slow services, number of unhealthy services, etc., as shown in the figure below."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1635993968588-403c9219-ae66-4b97-9eee-dcb97067b789.png",alt:"Data Display"})),(0,o.kt)("p",null,"Another thing worth mentioning is the Trace view of SkyWalking Dashboard. SkyWalking provides 3 display forms: list, tree diagram and table. Trace view is a typical view of distributed tracing. These views allow users to view trace data from different angles, especially the time-consuming relationship between spans."),(0,o.kt)("p",null,"SkyWalking Dashboard also supports topology diagrams. The topology diagram is the overall topology structure analyzed based on the probe uplink data. The topology diagram supports clicking to show and drill down the performance statistics, tracing, and alerts of individual services, and you can also click on the relationship lines in the topology diagram to show the performance Metrics between services and between service examples."),(0,o.kt)("h3",{id:"support-containerized-deployments"},"Support Containerized Deployments"),(0,o.kt)("p",null,"Kubernetes is an open source cloud-native containerized cluster management platform that aims to make deploying containerized applications simple and efficient. The Apache SkyWalking backend can be deployed in Kubernetes, and thanks to the efficient management of Kubernetes, high availability of UI components can be guaranteed."),(0,o.kt)("p",null,"If Apache APISIX is deployed on a cluster, Apache SkyWalking supports the deployment of SkyWalking Satellite in the form of sidecar or service discovery to monitor Apache APISIX in the cluster."),(0,o.kt)("h2",{id:"future-plans"},"Future Plans"),(0,o.kt)("p",null,"Apache APISIX will continue to enhance observability-related feature support in the future, such as"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Solve the problem of missing peer of SkyWalking Nginx-Lua plugin")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Support printing trace id in the log")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Access to the access log")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Support gateway metadata"))),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"This article introduces the observability capabilities of Apache APISIX and how Apache SkyWalking can enhance the observability capabilities of Apache APISIX. The two communities will continue to work together to further enhance the observability of Apache APISIX in the future. We hope you can get more involved in the Apache APISIX and Apache SkyWalking projects. If you are interested in these two open source projects but are not familiar with the code, writing articles, making videos, sharing them externally, and actively participating in community and mailing list discussions are all great ways to get involved."))}u.isMDXComponent=!0}}]);