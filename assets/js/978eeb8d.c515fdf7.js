"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[86189],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(25773),i=(n(27378),n(35318));const r={title:"Load Balancing AI/ML API with Apache APISIX",authors:[{name:"Sergey Nuzhnyy",title:"Author",url:"https://github.com/OctavianTheI",image_url:"https://github.com/OctavianTheI.png"},{name:"Yilia Lin",title:"Technical Writer",url:"https://github.com/Yilialinn",image_url:"https://github.com/Yilialinn.png"}],keywords:["API gateway","Apache APISIX","AI","AI/ML API","traffic management"],description:"This blog provides a step-by-step guide to configure Apache APISIX for AI traffic splitting and load balancing between API versions, covering security setup, canary testing, and deployment monitoring.",tags:["Ecosystem"],image:"https://static.api7.ai/uploads/2025/07/23/d1O3mllW_apisix-ai-ml-api.webp"},o=void 0,l={permalink:"/blog/2025/07/31/load-balancing-between-ai-ml-api-with-apisix",source:"@site/blog/2025/07/31/load-balancing-between-ai-ml-api-with-apisix.md",title:"Load Balancing AI/ML API with Apache APISIX",description:"This blog provides a step-by-step guide to configure Apache APISIX for AI traffic splitting and load balancing between API versions, covering security setup, canary testing, and deployment monitoring.",date:"2025-07-31T00:00:00.000Z",formattedDate:"July 31, 2025",tags:[{label:"Ecosystem",permalink:"/blog/tags/ecosystem"}],readingTime:4.53,truncated:!0,authors:[{name:"Sergey Nuzhnyy",title:"Author",url:"https://github.com/OctavianTheI",image_url:"https://github.com/OctavianTheI.png",imageURL:"https://github.com/OctavianTheI.png"},{name:"Yilia Lin",title:"Technical Writer",url:"https://github.com/Yilialinn",image_url:"https://github.com/Yilialinn.png",imageURL:"https://github.com/Yilialinn.png"}],prevItem:{title:"2025 Monthly Report (July 01 - July 31)",permalink:"/blog/2025/07/31/2025-july-monthly-report"},nextItem:{title:"Announcing APISIX Integration with AI/ML API",permalink:"/blog/2025/07/29/announcing-integration-of-apisix-and-ai-ml-api"}},s={authorsImageUrls:[void 0,void 0]},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Quickstart Installation",id:"quickstart-installation",children:[],level:2},{value:"Secure the Admin API",id:"secure-the-admin-api",children:[{value:"1. Set an Admin Key",id:"1-set-an-admin-key",children:[],level:3},{value:"2. Whitelist Management IPs (allow_admin)",id:"2-whitelist-management-ips-allow_admin",children:[],level:3},{value:"3. Restart APISIX",id:"3-restart-apisix",children:[],level:3}],level:2},{value:"Define Basic Routes for v1 and v2",id:"define-basic-routes-for-v1-and-v2",children:[{value:"1. Route for v1",id:"1-route-for-v1",children:[],level:3},{value:"2. Route for v2",id:"2-route-for-v2",children:[],level:3}],level:2},{value:"Implement Traffic Splitting (50/50)",id:"implement-traffic-splitting-5050",children:[],level:2},{value:"Verify Split Endpoint Functionality",id:"verify-split-endpoint-functionality",children:[],level:2},{value:"Load Test &amp; Distribution Validation",id:"load-test--distribution-validation",children:[],level:2},{value:"Best Practices &amp; Next Steps",id:"best-practices--next-steps",children:[],level:2},{value:"References",id:"references",children:[],level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This blog provides a step-by-step guide to configure Apache APISIX for AI traffic splitting and load balancing between API versions, covering security setup, canary testing, and deployment monitoring.")),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://aimlapi.com/"},(0,i.kt)("strong",{parentName:"a"},"AI/ML API"))," is a one-stop, OpenAI-compatible endpoint that is trusted by 150,000+ developers to 300+ state-of-the-art models\u2014chat, vision, image/video/music generation, embeddings, OCR, and more\u2014from Google, Meta, OpenAI, Anthropic, Mistral, and others."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix"},(0,i.kt)("strong",{parentName:"a"},"Apache APISIX"))," is a dynamic, real-time, high-performance API Gateway. APISIX API Gateway provides rich traffic management features and can serve as an AI Gateway through its flexible plugin system."),(0,i.kt)("p",null,"Modern AI workloads often require smooth version migrations, A/B testing, and rolling updates. This guide shows you how to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Install")," Apache APISIX with Docker quickstart."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Secure")," the Admin API with keys and IP whitelisting."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Define")," separate routes for API versions v1 and v2."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Implement")," weighted traffic splitting (50/50) via the ",(0,i.kt)("inlineCode",{parentName:"li"},"traffic-split")," plugin."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Verify")," the newly created split endpoint functionality."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Load test")," and ",(0,i.kt)("strong",{parentName:"li"},"monitor")," distribution accuracy.")),(0,i.kt)("p",null,"To perform authenticated requests, you'll need an AI/ML API key. You can get one at ",(0,i.kt)("a",{parentName:"p",href:"https://aimlapi.com/app/keys?utm_source=apisix&utm_medium=guide&utm_campaign=integration"},"https://aimlapi.com/app/keys/")," and use it as a Bearer token in your Authorization headers."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.api7.ai/uploads/2025/07/30/XdAXZUT6_generate-ai-ml-api-key.webp",alt:"Generate AI/ML API Key"})),(0,i.kt)("h2",{id:"quickstart-installation"},"Quickstart Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# 1. Download and run the quickstart script (includes etcd + APISIX)\ncurl -sL https://run.api7.ai/apisix/quickstart | sh\n\n# 2. Confirm APISIX is up and running\ncurl -I http://127.0.0.1:9080 | grep Server\n# \u279c Server: APISIX/3.13.0\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Tip:")," If you encounter port conflicts, adjust Docker host networking or map to different ports in the quickstart script.")),(0,i.kt)("h2",{id:"secure-the-admin-api"},"Secure the Admin API"),(0,i.kt)("p",null,"By default, quickstart bypasses Admin API authentication. For any non-development environment, enforce security:"),(0,i.kt)("h3",{id:"1-set-an-admin-key"},"1. Set an Admin Key"),(0,i.kt)("p",null,"Edit ",(0,i.kt)("inlineCode",{parentName:"p"},"conf/config.yaml")," inside the APISIX container or local install directory, replacing the example key with your own API key obtained from the link above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apisix:\n  enable_admin: true            # Enable Admin API\n  admin_key_required: true      # Reject unauthenticated Admin requests\n  admin_key:\n    - name: admin\n      key: YOUR_ADMIN_KEY_HERE  # Generated admin key - you can replace this with a secure key as you wish\n      role: admin\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Security Best Practice:")," Use at least 32 characters, mix letters/numbers/symbols, and rotate keys quarterly.")),(0,i.kt)("h3",{id:"2-whitelist-management-ips-allow_admin"},"2. Whitelist Management IPs (allow","_","admin)"),(0,i.kt)("p",null,"Add your management or local networks under the ",(0,i.kt)("inlineCode",{parentName:"p"},"admin:")," section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"admin:\n  allow_admin:\n    - 127.0.0.0/24   # Localhost & host network\n    - 0.0.0.0/0      # Allow all (temporary/testing only)\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warning:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0.0.0/0")," opens Admin API to the world! Lock this down to specific subnets in production.")),(0,i.kt)("h3",{id:"3-restart-apisix"},"3. Restart APISIX"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker restart apisix-quickstart\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Check Logs:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"docker logs apisix-quickstart --tail 50")," to ensure no errors about admin authentication.")),(0,i.kt)("h2",{id:"define-basic-routes-for-v1-and-v2"},"Define Basic Routes for v1 and v2"),(0,i.kt)("p",null,"Before splitting traffic, ensure each version works individually."),(0,i.kt)("h3",{id:"1-route-for-v1"},"1. Route for v1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -i http://127.0.0.1:9180/apisix/admin/routes/test-v1 \\\n  -X PUT \\\n  -H "X-API-KEY: YOUR_ADMIN_KEY_HERE" \\\n  -d \'{\n    "uri": "/test/v1",\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {"api.aimlapi.com:443": 1},\n      "scheme": "https",\n      "pass_host": "node"\n    }\n  }\'\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Tip:")," Use ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," fields if you want to manage or delete routes easily later.")),(0,i.kt)("h3",{id:"2-route-for-v2"},"2. Route for v2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -i http://127.0.0.1:9180/apisix/admin/routes/test-v2 \\\n  -X PUT \\\n  -H "X-API-KEY: YOUR_ADMIN_KEY_HERE" \\\n  -d \'{\n    "uri": "/test/v2",\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {"api.aimlapi.com:443": 1},\n      "scheme": "https",\n      "pass_host": "node"\n    }\n  }\'\n')),(0,i.kt)("h2",{id:"implement-traffic-splitting-5050"},"Implement Traffic Splitting (50/50)"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/plugins/traffic-split/"},(0,i.kt)("inlineCode",{parentName:"a"},"traffic-split"))," plugin for controlled distribution between v1 and v2. In the admin request below, replace ",(0,i.kt)("inlineCode",{parentName:"p"},"YOUR_ADMIN_KEY_HERE")," with your actual key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -i http://127.0.0.1:9180/apisix/admin/routes/aimlapi-split \\\n  -X PUT \\\n  -H "X-API-KEY: YOUR_ADMIN_KEY_HERE" \\\n  -d \'{\n    "id": "aimlapi-split",\n    "uri": "/chat/completions",\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {"api.aimlapi.com:443": 1},\n      "scheme": "https",\n      "pass_host": "node"\n    },\n    "plugins": {\n      "traffic-split": {\n        "rules": [\n          {\n            "weight": 50,\n            "upstream": {"type":"roundrobin","nodes":{"api.aimlapi.com:443":1},"scheme":"https","pass_host":"node"},\n            "rewrite": {"uri":"/v1/chat/completions"}\n          },\n          {\n            "weight": 50,\n            "upstream": {"type":"roundrobin","nodes":{"api.aimlapi.com:443":1},"scheme":"https","pass_host":"node"},\n            "rewrite": {"uri":"/v2/chat/completions"}\n          }\n        ]\n      }\n    }\n  }\'\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Tip:")," Adjust the ",(0,i.kt)("inlineCode",{parentName:"p"},"weight")," values to shift traffic ratios (e.g., 80/20 for canary)."),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"rewrite")," must match the internal API path exactly.")),(0,i.kt)("h2",{id:"verify-split-endpoint-functionality"},"Verify Split Endpoint Functionality"),(0,i.kt)("p",null,"Test the ",(0,i.kt)("inlineCode",{parentName:"p"},"/chat/completions")," endpoint you just created. Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"<AIML_API_KEY>")," with the key obtained earlier and use it as a Bearer token:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -v -X POST http://127.0.0.1:9080/chat/completions \\\n  -H "Authorization: Bearer <AIML_API_KEY>" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"model":"gpt-4","messages":[{"role":"user","content":"ping"}]}\'\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Expected Output:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{"content":"Pong! How can I assist you today?"}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Tip:")," Use ",(0,i.kt)("inlineCode",{parentName:"p"},"-v")," for verbose output to troubleshoot headers or TLS issues.")),(0,i.kt)("h2",{id:"load-test--distribution-validation"},"Load Test & Distribution Validation"),(0,i.kt)("p",null,"After configuring the split route, use the following commands to validate distribution. Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"<AIML_API_KEY>")," with your Bearer token."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# 1. Send 100 test requests\ntime seq 100 | xargs -I {} curl -s -o /dev/null -X POST http://127.0.0.1:9080/chat/completions \\\n  -H "Authorization: Bearer <AIML_API_KEY>" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"model":"gpt-4","messages":[{"role":"user","content":"ping"}]}\'\n\n# 2. Check APISIX logs for upstream hits (replace IPs with actual resolved IPs)\necho "v1 hits: $(docker logs apisix-quickstart --since 5m | grep -c \'188.114.97.3:443\')"\necho "v2 hits: $(docker logs apisix-quickstart --since 5m | grep -c \'188.114.96.3:443\')"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Expected:")," Approximately 50 requests to each upstream."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Tip:")," Use Prometheus or OpenTelemetry plugins for real\u2011time metrics instead of manual log parsing.")),(0,i.kt)("h2",{id:"best-practices--next-steps"},"Best Practices & Next Steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Rate Limiting & Quotas"),": Add ",(0,i.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/apisix/plugins/limit-count/"},(0,i.kt)("inlineCode",{parentName:"a"},"limit-count"))," plugin to protect your upstream from spikes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Authentication"),": Layer on the ",(0,i.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/apisix/plugins/key-auth/"},(0,i.kt)("inlineCode",{parentName:"a"},"key-auth"))," plugin for consumer management."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Circuit Breaker"),": Prevent cascading failures with the ",(0,i.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/apisix/plugins/api-breaker/"},(0,i.kt)("inlineCode",{parentName:"a"},"api-breaker"))," plugin."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Observability"),": Integrate Prometheus, Skywalking, or Loki for dashboards and alerts."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Infrastructure as Code"),": Consider managing APISIX config via Kubernetes CRDs or ADC for reproducibility.")),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/apisix/getting-started/load-balancing/"},"APISIX Load Balancing Documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.aimlapi.com/?utm_source=apisix&utm_medium=guide&utm_campaign=integration"},"AI/ML API Documentation"))))}u.isMDXComponent=!0}}]);