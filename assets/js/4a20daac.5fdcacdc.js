"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[69098],{35318:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(27378);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return a?r.createElement(h,o(o({ref:t},u),{},{components:a})):r.createElement(h,o({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},71352:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=a(25773),n=(a(27378),a(35318));const l={title:"Five ways to pass parameters to Apache APISIX",authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258"}],keywords:["APISIX","REST","HTTP API"],description:"I recently read 6 Ways To Pass Parameters to Spring REST API. Though the title is a bit misleading, as it's unrelated to REST, it does an excellent job listing all ways to send parameters to a Spring application. I want to do the same for Apache APISIX; it's beneficial when you write a custom plugin.\n",tags:["Ecosystem"],image:"https://static.apiseven.com/uploads/2024/04/25/V05nSV5W_american-football-63109.jpg"},o=void 0,i={permalink:"/blog/2024/05/02/pass-parameters-apisix",source:"@site/blog/2024/05/02/pass-parameters-apisix.md",title:"Five ways to pass parameters to Apache APISIX",description:"I recently read 6 Ways To Pass Parameters to Spring REST API. Though the title is a bit misleading, as it's unrelated to REST, it does an excellent job listing all ways to send parameters to a Spring application. I want to do the same for Apache APISIX; it's beneficial when you write a custom plugin.\n",date:"2024-05-02T00:00:00.000Z",formattedDate:"May 2, 2024",tags:[{label:"Ecosystem",permalink:"/blog/tags/ecosystem"}],readingTime:5.385,truncated:!0,authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258",imageURL:"https://avatars.githubusercontent.com/u/752258"}],prevItem:{title:"HTTP Request Smuggling in forward-auth Plugin (CVE-2024-32638)",permalink:"/blog/2024/05/02/cve-2024-32638"},nextItem:{title:"Monthly Report (April 01 - April 30)",permalink:"/blog/2024/04/30/monthly-report"}},s={authorsImageUrls:[void 0]},p=[{value:"General setup",id:"general-setup",children:[],level:2},{value:"Path variables",id:"path-variables",children:[],level:2},{value:"Query parameters",id:"query-parameters",children:[],level:2},{value:"Request headers",id:"request-headers",children:[],level:2},{value:"Request body",id:"request-body",children:[],level:2},{value:"Cookies",id:"cookies",children:[],level:2},{value:"Summary",id:"summary",children:[],level:2}],u={toc:p};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("head",null,(0,n.kt)("link",{rel:"canonical",href:"https://blog.frankel.ch/pass-parameters-apisix/"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"I recently read ",(0,n.kt)("a",{parentName:"p",href:"https://javabulletin.substack.com/p/6-ways-to-pass-parameters-to-spring"},"6 Ways To Pass Parameters to Spring REST API"),". Though the title is a bit misleading, as it's unrelated to REST, it does an excellent job listing all ways to send parameters to a Spring application. I want to do the same for Apache APISIX; it's beneficial when you write a custom plugin.")),(0,n.kt)("h2",{id:"general-setup"},"General setup"),(0,n.kt)("p",null,"The general setup uses Docker Compose and static configuration.\nI'll have one plugin per way to pass parameters."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  httpbin:\n    image: kennethreitz/httpbin                                         #1\n  apisix:\n    image: apache/apisix:3.9.0-debian\n    volumes:\n      - ./apisix/conf/config.yml:/usr/local/apisix/conf/config.yaml:ro\n      - ./apisix/conf/apisix.yml:/usr/local/apisix/conf/apisix.yaml:ro  #2\n      - ./apisix/plugins:/opt/apisix/plugins:ro                         #3\n    ports:\n      - "9080:9080"\n')),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Local httpbin for more reliable results and less outbound network traffic"),(0,n.kt)("li",{parentName:"ol"},"Static configuration file"),(0,n.kt)("li",{parentName:"ol"},"Plugins folder, one file per plugin")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"deployment:\n  role: data_plane\n  role_data_plane:\n    config_provider: yaml                                              #1\napisix:\n  extra_lua_path: /opt/?.lua                                           #2\nplugins:\n  - proxy-rewrite                                                      #3\n  - path-variables                                                     #4\n# ...  \n")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Set static configuration"),(0,n.kt)("li",{parentName:"ol"},"Use every Lua file under ",(0,n.kt)("inlineCode",{parentName:"li"},"/opt/apisix/plugins")," as a plugin"),(0,n.kt)("li",{parentName:"ol"},"Regular plugin"),(0,n.kt)("li",{parentName:"ol"},"Custom plugin, one per alternative")),(0,n.kt)("h2",{id:"path-variables"},"Path variables"),(0,n.kt)("p",null,"Path variables are a straightforward way to pass data. Their main issue is that they are limited to simple values, ",(0,n.kt)("em",{parentName:"p"},"e.g."),", ",(0,n.kt)("inlineCode",{parentName:"p"},"/links/{n}/{offset}"),". The naive approach is to write the following Lua code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local core = require(\"apisix.core\")\n\nfunction _M.access(_, ctx)\n    local captures, _ = ngx.re.match(ctx.var.uri, '/path/(.*)/(.*)')  --1-2\n    for k, v in pairs(captures) do\n        core.log.warn('Order-Value pair: ', k, '=', v)\n    end\nend\n")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"APISIX stores the URI in ",(0,n.kt)("inlineCode",{parentName:"li"},"ctx.var.uri")),(0,n.kt)("li",{parentName:"ol"},"Nginx offers a regular expression API")),(0,n.kt)("p",null,"Let's try:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:9080/path/15/3\n")),(0,n.kt)("p",null,"The log displays:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Order-Value pair: 0=/path/15/3\nOrder-Value pair: 1=15\nOrder-Value pair: 2=3\n")),(0,n.kt)("p",null,"I didn't manage errors, though. Alternatively, we can rely on Apache APISIX features: a specific ",(0,n.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/terminology/router/"},"router"),". The default router, ",(0,n.kt)("inlineCode",{parentName:"p"},"radixtree_host_uri"),", uses both the host and the URI to match requests. ",(0,n.kt)("inlineCode",{parentName:"p"},"radixtree_uri_with_parameter")," lets go of the host part but also matches parameters."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"apisix:\n  extra_lua_path: /opt/?.lua\n  router:\n    http: radixtree_uri_with_parameter\n")),(0,n.kt)("p",null,"We need to update the route:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"routes:\n  - path-variables\n  - uri: /path/:n/:offset                                              #1\n    upstream_id: 1\n    plugins:\n      path-variables: ~\n")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Store ",(0,n.kt)("inlineCode",{parentName:"li"},"n")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"offset")," in the context, under ",(0,n.kt)("inlineCode",{parentName:"li"},"ctx.curr_req_matched"))),(0,n.kt)("p",null,"We keep the plugin just to log the path variables:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"function _M.access(_, ctx)\n    core.log.warn('n: ', ctx.curr_req_matched.n, ', offset: ', ctx.curr_req_matched.offset)\nend\n")),(0,n.kt)("p",null,"The result is as expected with the same request as above:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"n: 15, offset: 3\n")),(0,n.kt)("h2",{id:"query-parameters"},"Query parameters"),(0,n.kt)("p",null,"Query parameters are another regular way to pass data. Like path variables, you can only pass simple values, ",(0,n.kt)("em",{parentName:"p"},"e.g."),", ",(0,n.kt)("inlineCode",{parentName:"p"},"/?foo=bar"),". The Lua code doesn't require regular expressions:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local core = require(\"apisix.core\")\n\nfunction _M.access(_, _)\n    local args, _ = ngx.req.get_uri_args()\n    for k, v in pairs(args) do\n        core.log.warn('Order-Value pair: ', k, '=', v)\n    end\nend\n")),(0,n.kt)("p",null,"Let's try:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:9080/query\\?foo=one\\&bar=three\n")),(0,n.kt)("p",null,"The log displays:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Key-Value pair: bar=three\nKey-Value pair: foo=one\n")),(0,n.kt)("p",null,"Remember that query parameters have no order."),(0,n.kt)("p",null,"Our code contains an issue, though. The ",(0,n.kt)("inlineCode",{parentName:"p"},"ngx.req.get_uri_args()")," accepts ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/openresty/lua-nginx-module/#ngxreqget_uri_args"},"parameters"),". Remember that the client can pass a query parameter multiple times with different values, ",(0,n.kt)("em",{parentName:"p"},"e.g."),", ",(0,n.kt)("inlineCode",{parentName:"p"},"?foo=one&foo=two"),"? The first parameter is the maximum number of values returned for a single query parameter. To avoid ignoring value, we should set it to 0, ",(0,n.kt)("em",{parentName:"p"},"i.e."),", unbounded."),(0,n.kt)("p",null,"Since every plugin designer must remember it, we can add the result to the context for other plugins down the chain. The updated code looks like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local core = require(\"apisix.core\")\n\nfunction _M.get_uri_args(ctx)\n    if not ctx then\n        ctx = ngx.ctx.api_ctx\n    end\n    if not ctx.req_uri_args then\n        local args, _ = ngx.req.get_uri_args(0)\n        ctx.req_uri_args = args\n    end\n    return ctx.req_uri_args\nend\n\nfunction _M.access(_, ctx)\n    for k, v in pairs(ctx.req_uri_args) do\n        core.log.warn('Key-Value pair: ', k, '=', v)\n    end\nend\n")),(0,n.kt)("h2",{id:"request-headers"},"Request headers"),(0,n.kt)("p",null,"Request headers are another way to pass parameters. While they generally only contain simple values, you can also use them to send structured values, ",(0,n.kt)("em",{parentName:"p"},"e.g."),", JSON. Depending on your requirement, APISIX can list all request headers or a specific one. Here, I get all of them:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local core = require(\"apisix.core\")\n\nfunction _M.access(_, _)\n    local headers = core.request.headers()\n    for k, v in pairs(headers) do\n        core.log.warn('Key-Value pair: ', k, '=', v)\n    end\nend\n")),(0,n.kt)("p",null,"We test with a simple request:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -H 'foo: 1' -H 'bar: two'  localhost:9080/headers\n")),(0,n.kt)("p",null,"And we got more than we expected because curl added default headers:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Key-Value pair: user-agent=curl/8.4.0\nKey-Value pair: bar=two\nKey-Value pair: foo=1\nKey-Value pair: host=localhost:9080\nKey-Value pair: accept=*/*\n")),(0,n.kt)("h2",{id:"request-body"},"Request body"),(0,n.kt)("p",null,"Setting a request body is the usual way to send structured data, ",(0,n.kt)("em",{parentName:"p"},"e.g"),", JSON. Nginx offers a simple API to collect such data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local core = require(\"apisix.core\")\n\nfunction _M.access(_, _)\n    local args = core.request.get_post_args()                          --1\n    local body = next(args, nil)                                       --2\n    core.log.warn('Body: ', body)\nend\n")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Access the body as a regular Lua table"),(0,n.kt)("li",{parentName:"ol"},"A table is necessary in case of multipart payloads, ",(0,n.kt)("em",{parentName:"li"},"e.g."),", file uploads. Here, we assume there's a single arg, the content body.")),(0,n.kt)("p",null,"It's time to test:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'curl  localhost:9080/body -X POST -d \'{ "foo": 1, "bar": { "baz": "two" } }\'\n')),(0,n.kt)("p",null,"The result is as expected:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'Body: { "foo": 1, "bar": { "baz": "two" } }\n')),(0,n.kt)("h2",{id:"cookies"},"Cookies"),(0,n.kt)("p",null,"Last but not least, we can send parameters via cookies. The difference with previous alternatives is that cookies persist on the client side, and the browser sends them with each request. On the Lua side, we need to know the cookie name instead of listing all query parameters or headers."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local core = require(\"apisix.core\")\n\nfunction _M.access(_, ctx)\n    local foo = ctx.var.cookie_foo                                     --1\n    core.log.warn('Cookie value: ', foo)\nend\n")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The cookie is named ",(0,n.kt)("inlineCode",{parentName:"li"},"foo")," and is case-insensitive")),(0,n.kt)("p",null,"Let's test:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'curl --cookie "foo=Bar"  localhost:9080/cookies\n')),(0,n.kt)("p",null,"The result is correct:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Cookie value: Bar\n")),(0,n.kt)("h2",{id:"summary"},"Summary"),(0,n.kt)("p",null,"In this post, we listed five alternatives to pass parameters server-side and explained how to access them on Apache APISIX. Here's the API summary:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Alternative"),(0,n.kt)("th",{parentName:"tr",align:null},"Source"),(0,n.kt)("th",{parentName:"tr",align:null},"API"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Path variable"),(0,n.kt)("td",{parentName:"tr",align:null},"APISIX Router"),(0,n.kt)("td",{parentName:"tr",align:null},"Use the ",(0,n.kt)("inlineCode",{parentName:"td"},"radixtree_uri_with_parameter")," router")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Query parameter"),(0,n.kt)("td",{parentName:"tr",align:null},"Nginx"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ngx.req.get_uri_args(0)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Request header"),(0,n.kt)("td",{parentName:"tr",align:null},"APISIX core lib"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"core.request.headers()"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Request body"),(0,n.kt)("td",{parentName:"tr",align:null},"APISIX core lib"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"core.request.get_post_args()"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Cookie"),(0,n.kt)("td",{parentName:"tr",align:null},"Method context parameter"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ctx.var.cookie_<name>"))))),(0,n.kt)("p",null,"Thanks a lot to ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/bzp2010"},"Zeping Bai")," for his review and explanations."),(0,n.kt)("p",null,"The complete source code for this post can be found on ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ajavageek/apisix-pass-parameters"},"GitHub"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"To go further:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://javabulletin.substack.com/p/6-ways-to-pass-parameters-to-spring"},"6 Ways To Pass Parameters to Spring REST API")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://api7.ai/blog/how-to-build-an-apache-apisix-plugin-from-0-to-1"},"How to Build an Apache APISIX Plugin From 0 to 1?"))))}c.isMDXComponent=!0}}]);