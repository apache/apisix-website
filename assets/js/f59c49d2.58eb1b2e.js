"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[73696],{35318:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var i=t(27378);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,s=function(e,n){if(null==e)return{};var t,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=i.createContext({}),p=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(t),h=s,m=d["".concat(o,".").concat(h)]||d[h]||u[h]||r;return t?i.createElement(m,l(l({ref:n},c),{},{components:t})):i.createElement(m,l({ref:n},c))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,l=new Array(r);l[0]=d;var a={};for(var o in n)hasOwnProperty.call(n,o)&&(a[o]=n[o]);a.originalType=e,a.mdxType="string"==typeof e?e:s,l[1]=a;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},54089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var i=t(25773),s=(t(27378),t(35318));const r={title:"How to build APISIX in SLES 15",authors:[{name:"Oier Saizar",title:"Author",url:"https://github.com/osaizar",image_url:"https://avatars.githubusercontent.com/u/9879984"}],keywords:["Apache APISIX","SLES","SUSE"],description:"By reading this article, you will learn how to build Apache APISIX for SUSE Linux Enterprise 15",tags:["Ecosystem"]},l=void 0,a={permalink:"/blog/2024/04/05/build-apisix-in-sles15",source:"@site/blog/2024/04/05/build-apisix-in-sles15.md",title:"How to build APISIX in SLES 15",description:"By reading this article, you will learn how to build Apache APISIX for SUSE Linux Enterprise 15",date:"2024-04-05T00:00:00.000Z",formattedDate:"April 5, 2024",tags:[{label:"Ecosystem",permalink:"/blog/tags/ecosystem"}],readingTime:5.51,truncated:!0,authors:[{name:"Oier Saizar",title:"Author",url:"https://github.com/osaizar",image_url:"https://avatars.githubusercontent.com/u/9879984",imageURL:"https://avatars.githubusercontent.com/u/9879984"}],prevItem:{title:"Implementing the Idempotency-Key specification on Apache APISIX",permalink:"/blog/2024/04/11/implement-idempotency-key-apisix"},nextItem:{title:"Fixing duplicate API requests",permalink:"/blog/2024/04/04/fix-duplicate-api-requests"}},o={authorsImageUrls:[void 0]},p=[{value:"Install dependencies",id:"install-dependencies",children:[],level:2},{value:"Clone the APISIX repository",id:"clone-the-apisix-repository",children:[],level:2},{value:"Modify the utils/install-dependencies.sh script",id:"modify-the-utilsinstall-dependenciessh-script",children:[],level:2},{value:"Build APISIX from source",id:"build-apisix-from-source",children:[],level:2},{value:"Install etcd",id:"install-etcd",children:[],level:2},{value:"Create a nobody user and group",id:"create-a-nobody-user-and-group",children:[],level:2},{value:"Run APISIX",id:"run-apisix",children:[],level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"By reading this article you will learn how to build Apache APISIX SLES 15 from source code.\nThe build process will be done in the ",(0,s.kt)("a",{parentName:"p",href:"https://registry.suse.com/categories/bci/repositories/bci-bci-base-15sp5"},"SLE BCI 15 SP5 Base Container"))),(0,s.kt)("h2",{id:"install-dependencies"},"Install dependencies"),(0,s.kt)("p",null,"Before starting to build APISIX we need to install some dependencies needed to launch the build process:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"zypper install -y git sudo make vim\n")),(0,s.kt)("h2",{id:"clone-the-apisix-repository"},"Clone the APISIX repository"),(0,s.kt)("p",null,"Next, we can clone the APISIX repository:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/apache/apisix.git\ncd apisix\n")),(0,s.kt)("h2",{id:"modify-the-utilsinstall-dependenciessh-script"},"Modify the utils/install-dependencies.sh script"),(0,s.kt)("p",null,"Currently the ",(0,s.kt)("inlineCode",{parentName:"p"},"utils/install-dependencies.sh")," script does not support SLES 15, so we will need to modify it slightly to add support for this distro."),(0,s.kt)("p",null,"Copy the next script:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n\n#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the "License"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nset -ex\n\nfunction detect_aur_helper() {\n    if [[ $(command -v yay) ]]; then\n        AUR_HELPER=yay\n    elif [[ $(command -v pacaur) ]]; then\n        AUR_HELPER=pacaur\n    else\n        echo No available AUR helpers found. Please specify your AUR helper by AUR_HELPER.\n        exit 255\n    fi\n}\n\nfunction install_dependencies_with_aur() {\n    detect_aur_helper\n    $AUR_HELPER -S openresty --noconfirm\n    sudo pacman -S openssl --noconfirm\n\n    export OPENRESTY_PREFIX=/opt/openresty\n\n    sudo mkdir $OPENRESTY_PREFIX/openssl\n    sudo ln -s /usr/include $OPENRESTY_PREFIX/openssl/include\n    sudo ln -s /usr/lib $OPENRESTY_PREFIX/openssl/lib\n}\n\n# Install dependencies on centos and fedora\nfunction install_dependencies_with_yum() {\n    sudo yum install -y yum-utils\n    sudo yum-config-manager --add-repo "https://openresty.org/package/${1}/openresty.repo"\n    if [[ "${1}" == "centos" ]]; then\n        sudo yum -y install centos-release-scl\n        sudo yum -y install devtoolset-9 patch wget\n        set +eu\n        source scl_source enable devtoolset-9\n        set -eu\n    fi\n    sudo yum install -y  \\\n        gcc gcc-c++ curl wget unzip xz gnupg perl-ExtUtils-Embed cpanminus patch \\\n        perl perl-devel pcre pcre-devel openldap-devel \\\n        openresty-zlib-devel openresty-pcre-devel\n}\n\n# Install dependencies on ubuntu and debian\nfunction install_dependencies_with_apt() {\n    # add OpenResty source\n    sudo apt-get update\n    sudo apt-get -y install software-properties-common wget lsb-release gnupg patch\n    wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\n    arch=$(uname -m | tr \'[:upper:]\' \'[:lower:]\')\n    arch_path=""\n    if [[ $arch == "arm64" ]] || [[ $arch == "aarch64" ]]; then\n        arch_path="arm64/"\n    fi\n    if [[ "${1}" == "ubuntu" ]]; then\n        sudo add-apt-repository -y "deb http://openresty.org/package/${arch_path}ubuntu $(lsb_release -sc) main"\n    elif [[ "${1}" == "debian" ]]; then\n        sudo add-apt-repository -y "deb http://openresty.org/package/${arch_path}debian $(lsb_release -sc) openresty"\n    fi\n    sudo apt-get update\n\n    # Install some compilation tools\n    sudo apt-get install -y curl make gcc g++ cpanminus libpcre3 libpcre3-dev libldap2-dev unzip openresty-zlib-dev openresty-pcre-dev\n}\n\n# Install dependencies on SLES\nfunction install_dependencies_with_zypper() {\n    sudo rm -f /etc/zypp/repos.d/openresty.repo 2> /dev/null\n    sudo rpm --import https://openresty.org/package/pubkey.gpg\n    sudo zypper ar -g --refresh --check "https://openresty.org/package/sles/openresty.repo"\n    sudo zypper mr -G openresty\n    sudo zypper refresh\n\n    sudo zypper install -y  \\\n        awk git gcc gcc-c++ curl wget unzip xz patch \\\n        perl libpcre1 pcre-devel pcre-tools openldap2-devel \\\n        openresty-zlib-devel openresty-pcre-devel\n\n    curl -L https://cpanmin.us | perl - --sudo App::cpanminus\n}\n\n# Identify the different distributions and call the corresponding function\nfunction multi_distro_installation() {\n    if grep -Eqi "CentOS" /etc/issue || grep -Eq "CentOS" /etc/*-release; then\n        install_dependencies_with_yum "centos"\n    elif grep -Eqi -e "Red Hat" -e "rhel" /etc/*-release; then\n        install_dependencies_with_yum "rhel"\n    elif grep -Eqi "Fedora" /etc/issue || grep -Eq "Fedora" /etc/*-release; then\n        install_dependencies_with_yum "fedora"\n    elif grep -Eqi "Debian" /etc/issue || grep -Eq "Debian" /etc/*-release; then\n        install_dependencies_with_apt "debian"\n    elif grep -Eqi "Ubuntu" /etc/issue || grep -Eq "Ubuntu" /etc/*-release; then\n        install_dependencies_with_apt "ubuntu"\n    elif grep -Eqi "Arch" /etc/issue || grep -Eqi "EndeavourOS" /etc/issue || grep -Eq "Arch" /etc/*-release; then\n        install_dependencies_with_aur\n    elif grep -Eqi "SUSE" /etc/os-release; then\n        install_dependencies_with_zypper\n    else\n        echo "Non-supported distribution, APISIX is only supported on Linux-based systems"\n        exit 1\n    fi\n    install_apisix_runtime\n}\n\nfunction multi_distro_uninstallation() {\n    if grep -Eqi "CentOS" /etc/issue || grep -Eq "CentOS" /etc/*-release; then\n        sudo yum autoremove -y openresty-zlib-devel openresty-pcre-devel\n    elif grep -Eqi -e "Red Hat" -e "rhel" /etc/*-release; then\n        sudo yum autoremove -y openresty-zlib-devel openresty-pcre-devel\n    elif grep -Eqi "Fedora" /etc/issue || grep -Eq "Fedora" /etc/*-release; then\n        sudo yum autoremove -y openresty-zlib-devel openresty-pcre-devel\n    elif grep -Eqi "Debian" /etc/issue || grep -Eq "Debian" /etc/*-release; then\n        sudo apt-get autoremove -y openresty-zlib-dev openresty-pcre-dev\n    elif grep -Eqi "Ubuntu" /etc/issue || grep -Eq "Ubuntu" /etc/*-release; then\n        sudo apt-get autoremove -y openresty-zlib-dev openresty-pcre-dev\n    elif grep -Eqi "SUSE" /etc/os-release; then\n        sudo zypper remove -y openresty-zlib-dev openresty-pcre-dev\n    else\n        echo "Non-supported distribution, APISIX is only supported on Linux-based systems"\n        exit 1\n    fi\n}\n\nfunction install_apisix_runtime() {\n    export runtime_version=${APISIX_RUNTIME:?}\n    wget "https://raw.githubusercontent.com/api7/apisix-build-tools/apisix-runtime/${APISIX_RUNTIME}/build-apisix-runtime.sh"\n    chmod +x build-apisix-runtime.sh\n    ./build-apisix-runtime.sh latest\n    rm build-apisix-runtime.sh\n}\n\n# Install LuaRocks\nfunction install_luarocks() {\n    if [ -f "./utils/linux-install-luarocks.sh" ]; then\n        ./utils/linux-install-luarocks.sh\n    elif [ -f "./linux-install-luarocks.sh" ]; then\n        ./linux-install-luarocks.sh\n    else\n        echo "Installing luarocks from remote master branch"\n        curl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -\n    fi\n}\n\n# Entry\nfunction main() {\n    OS_NAME=$(uname -s | tr \'[:upper:]\' \'[:lower:]\')\n    if [[ "$#" == 0 ]]; then\n        if [[ "${OS_NAME}" == "linux" ]]; then\n            multi_distro_installation\n            install_luarocks\n            return\n        else\n            echo "Non-supported distribution, APISIX is only supported on Linux-based systems"\n            exit 1\n        fi\n    fi\n\n    case_opt=$1\n    case "${case_opt}" in\n        "install_luarocks")\n            install_luarocks\n        ;;\n        "uninstall")\n            if [[ "${OS_NAME}" == "linux" ]]; then\n                multi_distro_uninstallation\n            else\n                echo "Non-supported distribution, APISIX is only supported on Linux-based systems"\n            fi\n        ;;\n        *)\n            echo "Unsupported method: ${case_opt}"\n        ;;\n    esac\n}\n\nmain "$@"\n')),(0,s.kt)("p",null,"And paste it in ",(0,s.kt)("inlineCode",{parentName:"p"},"utils/install-dependencies.sh")," using vim or your text editor of choice:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"vim install-dependencies.sh\n# Copy and paste the script\nmv install-dependencies.sh utils/install-dependencies.sh\nchmod 755 utils/install-dependencies.sh\n")),(0,s.kt)("p",null,"This will add an ",(0,s.kt)("inlineCode",{parentName:"p"},"install_dependencies_with_zypper")," function to the script that will handle all the needed dependencies for SLES 15."),(0,s.kt)("h2",{id:"build-apisix-from-source"},"Build APISIX from source"),(0,s.kt)("p",null,"We are ready to follow the ",(0,s.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/next/building-apisix/"},"Building APISIX from source")," documentation."),(0,s.kt)("p",null,"We can launch the next commands to build and install APISIX:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"make deps\nmake install\n")),(0,s.kt)("h2",{id:"install-etcd"},"Install etcd"),(0,s.kt)("p",null,"APISIX needs etcd to work, we can install etcd following the ",(0,s.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/next/building-apisix/#installing-etcd"},"official documentation")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"ETCD_VERSION='3.4.18'\nwget https://github.com/etcd-io/etcd/releases/download/v${ETCD_VERSION}/etcd-v${ETCD_VERSION}-linux-amd64.tar.gz\ntar -xvf etcd-v${ETCD_VERSION}-linux-amd64.tar.gz && \\\n  cd etcd-v${ETCD_VERSION}-linux-amd64 && \\\n  sudo cp -a etcd etcdctl /usr/bin/\n  cd ..\nnohup etcd >/tmp/etcd.log 2>&1 &\n")),(0,s.kt)("h2",{id:"create-a-nobody-user-and-group"},"Create a nobody user and group"),(0,s.kt)("p",null,"Before launching APISIX we need to create a user and a group both called ",(0,s.kt)("inlineCode",{parentName:"p"},"nobody"),".\nThis is necessary for ",(0,s.kt)("inlineCode",{parentName:"p"},"openresty")," to launch correctly."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"useradd nobody -U\n")),(0,s.kt)("h2",{id:"run-apisix"},"Run APISIX"),(0,s.kt)("p",null,"Finally APISIX can be initialized and started:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"apisix init\napisix start\n")))}u.isMDXComponent=!0}}]);