"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[42117],{35318:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(27378);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},69029:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(25773),i=(t(27378),t(35318));const r={title:"Ops friendly Apache APISIX",authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258"}],keywords:["Operations","Ops","DevOps","Configuration"],description:"Though I always worked on the Dev side of IT, I was also interested in the Ops side. I even had a short experience being a WebSphere admin: I used it several times, helping Ops deal with the Admin console while being a developer. Providing a single package that Ops can configure and deploy in different environments is very important. As a JVM developer, I've been happy using Spring Boot and its wealth of configuration options: command-line parameters, JVM parameters, files, profiles, environment variables, etc. In this short post, I'd like to describe how you can do the same with Apache APISIX in the context of containers.\n",tags:["Ecosystem"],image:"https://static.apiseven.com/2022/10/19/634f6677742a1.png"},o=void 0,l={permalink:"/blog/2023/08/17/ops-friendly-apisix",source:"@site/blog/2023/08/17/ops-friendly-apisix.md",title:"Ops friendly Apache APISIX",description:"Though I always worked on the Dev side of IT, I was also interested in the Ops side. I even had a short experience being a WebSphere admin: I used it several times, helping Ops deal with the Admin console while being a developer. Providing a single package that Ops can configure and deploy in different environments is very important. As a JVM developer, I've been happy using Spring Boot and its wealth of configuration options: command-line parameters, JVM parameters, files, profiles, environment variables, etc. In this short post, I'd like to describe how you can do the same with Apache APISIX in the context of containers.\n",date:"2023-08-17T00:00:00.000Z",formattedDate:"August 17, 2023",tags:[{label:"Ecosystem",permalink:"/blog/tags/ecosystem"}],readingTime:2.44,truncated:!0,authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258",imageURL:"https://avatars.githubusercontent.com/u/752258"}],prevItem:{title:"Biweekly Report (August 14 - August 27)",permalink:"/blog/2023/08/30/weekly-report"},nextItem:{title:"Biweekly Report (July 31 - August 13)",permalink:"/blog/2023/08/15/weekly-report"}},s={authorsImageUrls:[void 0]},p=[{value:"File-based configuration",id:"file-based-configuration",children:[],level:2},{value:"Environment-based configuration",id:"environment-based-configuration",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"In this short post, I'd like to describe how to leverage Apache APISIX in containers, drawing on personal experiences with Spring Boot and WebSphere administration.")),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://blog.frankel.ch/ops-friendly-apisix/"})),(0,i.kt)("p",null,"Though I always worked on the Dev side of IT, I was also interested in the Ops side. I even had a short experience being a WebSphere admin: I used it several times, helping Ops deal with the Admin console while being a developer."),(0,i.kt)("p",null,"Providing a single package that Ops can configure and deploy in different environments is very important. As a JVM developer, I've been happy using Spring Boot and its wealth of configuration options: command-line parameters, JVM parameters, files, profiles, environment variables, etc."),(0,i.kt)("h2",{id:"file-based-configuration"},"File-based configuration"),(0,i.kt)("p",null,"The foundation of configuring Apache APISIX is file-based. The default values are found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/apisix/conf/apisix/config-default.yaml")," configuration file. For example, by default, Apache APISIX runs on port ",(0,i.kt)("inlineCode",{parentName:"p"},"9080"),", and the admin port is ",(0,i.kt)("inlineCode",{parentName:"p"},"9180"),". That's because of the default configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apisix:\n  node_listen:\n    - 9080           #1\n\n#...\n\ndeployment:\n  admin:\n    admin_listen:\n      ip: 0.0.0.0\n      port: 9180     #2\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Regular port"),(0,i.kt)("li",{parentName:"ol"},"Admin port")),(0,i.kt)("p",null,"To override values, we need to provide a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yaml")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/apisix/conf/apisix")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apisix:\n  node_listen:\n    - 9090           #1\ndeployment:\n  admin:\n    admin_listen:\n      port: 9190     #1\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Override values")),(0,i.kt)("p",null,"Now, Apache APISIX should run on port ",(0,i.kt)("inlineCode",{parentName:"p"},"9090"),", and the admin port should be ",(0,i.kt)("inlineCode",{parentName:"p"},"9190"),". Here's how to run the Apache APISIX container with the above configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it --rm apache/apisix:3.4.1-debian \\\n                 -p 9090:9090 -p 9190:9190 \\\n                 -v ./config.yaml:/usr/local/apisix/conf/apisix/config.yaml\n")),(0,i.kt)("h2",{id:"environment-based-configuration"},"Environment-based configuration"),(0,i.kt)("p",null,"The downside of a pure file-based configuration is that you must provide a dedicated file for each environment, even if only a single parameter changes. Apache APISIX allows replacement via environment variables in the configuration file to account for that."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apisix:\n  node_listen:\n    - ${{APISIX_NODE_LISTEN:=}}                  #1\ndeployment:\n  admin:\n    admin_listen:\n      port: ${{DEPLOYMENT_ADMIN_ADMIN_LISTEN:=}} #1\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Replace the placeholder with its environment variable value at runtime")),(0,i.kt)("p",null,"We can reuse the same file in every environment and hydrate it with the context-dependent environment variables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it --rm apache/apisix:3.4.1-debian \\\n                 -e APISIX_NODE_LISTEN=9090 \\\n                 -e DEPLOYMENT_ADMIN_ADMIN_LISTEN=9190 \\\n                 -p 9090:9090 -p 9190:9190 \\\n                 -v ./config.yaml:/usr/local/apisix/conf/apisix/config.yaml\n")),(0,i.kt)("p",null,"Icing on the cake, we can also offer a default value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apisix:\n  node_listen:\n    - ${{APISIX_NODE_LISTEN:=9080}}                  #1\ndeployment:\n  admin:\n    admin_listen:\n      port: ${{DEPLOYMENT_ADMIN_ADMIN_LISTEN:=9180}} #1\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If no environment variable is provided, use those ports; otherwise, use the environment variables' value")),(0,i.kt)("p",null,"The trick works in standalone mode with the ",(0,i.kt)("inlineCode",{parentName:"p"},"apisix. yaml")," file. You can parameterize every context-dependent variable ",(0,i.kt)("strong",{parentName:"p"},"and")," secrets with it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'routes:\n  - uri: /*\n    upstream:\n      nodes:\n        "httpbin:80": 1\n    plugins:\n      openid-connect:\n        client_id: apisix\n        client_secret: ${{OIDC_SECRET}}\n        discovery: https://${{OIDC_ISSUER}}/.well-known/openid-configuration\n        redirect_uri: http://localhost:9080/callback\n        scope: openid\n        session:\n          secret: ${{SESSION_SECRET}}\n')),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"When configuring Apache APISIX, we should ensure it's as operable as possible. In this post, I've described several ways to make it so."),(0,i.kt)("p",null,"Happy Apache APISIX!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"To go further:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/apisix/blob/master/conf/config-default.yaml"},"Default configuration")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/apisix/profile/"},"Configuration file switching based on environment variables"))))}u.isMDXComponent=!0}}]);