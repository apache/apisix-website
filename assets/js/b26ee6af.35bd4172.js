"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[20787],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=p(n),h=a,d=g["".concat(l,".").concat(h)]||g[h]||c[h]||i;return n?r.createElement(d,s(s({ref:t},u),{},{components:n})):r.createElement(d,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},65168:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={title:"Configuring Ingress with Kubernetes Gateway API",keywords:["APISIX ingress","Apache APISIX","Kubernetes Ingress","Kubernetes Gateway API"],description:"A tutorial on configuring Ingress using the Kubernetes Gateway API."},s=void 0,o={unversionedId:"tutorials/configure-ingress-with-gateway-api",id:"version-1.8.0/tutorials/configure-ingress-with-gateway-api",isDocsHomePage:!1,title:"Configuring Ingress with Kubernetes Gateway API",description:"A tutorial on configuring Ingress using the Kubernetes Gateway API.",source:"@site/docs-apisix-ingress-controller_versioned_docs/version-1.8.0/tutorials/configure-ingress-with-gateway-api.md",sourceDirName:"tutorials",slug:"/tutorials/configure-ingress-with-gateway-api",permalink:"/docs/ingress-controller/1.8.0/tutorials/configure-ingress-with-gateway-api",editUrl:"/edit#https://github.com/apache/apisix-ingress-controller/edit/v1.8.0/docs/en/latest/tutorials/configure-ingress-with-gateway-api.md",tags:[],version:"1.8.0",frontMatter:{title:"Configuring Ingress with Kubernetes Gateway API",keywords:["APISIX ingress","Apache APISIX","Kubernetes Ingress","Kubernetes Gateway API"],description:"A tutorial on configuring Ingress using the Kubernetes Gateway API."},sidebar:"version-1.8.0/docs",previous:{title:"Configuring Ingress with Kubernetes Ingress resource",permalink:"/docs/ingress-controller/1.8.0/tutorials/proxy-the-httpbin-service-with-ingress"},next:{title:"Configuring Ingress with APISIX CRDs",permalink:"/docs/ingress-controller/1.8.0/tutorials/proxy-the-httpbin-service"}},l=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Install Gateway API CRDs",id:"install-gateway-api-crds",children:[]},{value:"Install APISIX Ingress and Enable Gateway API",id:"install-apisix-ingress-and-enable-gateway-api",children:[]},{value:"Deploy httpbin",id:"deploy-httpbin",children:[]},{value:"Configuring Ingress",id:"configuring-ingress",children:[]},{value:"Test the created Routes",id:"test-the-created-routes",children:[]}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This tutorial will walk you through on how you can configure APISIX Ingress with the ",(0,a.kt)("a",{parentName:"p",href:"https://gateway-api.sigs.k8s.io/"},"Kubernetes Gateway API"),"."),(0,a.kt)("p",null,"Also see:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/ingress-controller/tutorials/proxy-the-httpbin-service-with-ingress"},"Configuring Ingress with Kubernetes Ingress resource")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/ingress-controller/tutorials/proxy-the-httpbin-service"},"Configuring Ingress with APISIX CRDs"))),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Before you move on, make sure you have access to a Kubernetes cluster. This tutorial uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/minikube"},"minikube"),"."),(0,a.kt)("h2",{id:"install-gateway-api-crds"},"Install Gateway API CRDs"),(0,a.kt)("p",null,"Kubernetes does not have the Gateway API CRDs installed out of the box. You can install it manually by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.5.0/standard-install.yaml\n")),(0,a.kt)("h2",{id:"install-apisix-ingress-and-enable-gateway-api"},"Install APISIX Ingress and Enable Gateway API"),(0,a.kt)("p",null,"You can install APISIX and APISIX Ingress controller with Helm. To enable APISIX Ingress controller to work with the Gateway API, you can set the flag ",(0,a.kt)("inlineCode",{parentName:"p"},"--set ingress-controller.config.kubernetes.enableGatewayAPI=true")," as shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add apisix https://charts.apiseven.com\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nkubectl create ns ingress-apisix\nhelm install apisix apisix/apisix --namespace ingress-apisix \\\n--set service.type=NodePort \\\n--set ingress-controller.enabled=true \\\n--set ingress-controller.config.apisix.serviceNamespace=ingress-apisix \\\n--set ingress-controller.config.kubernetes.enableGatewayAPI=true\n")),(0,a.kt)("h2",{id:"deploy-httpbin"},"Deploy httpbin"),(0,a.kt)("p",null,"We will deploy a sample service, ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/kennethreitz/httpbin/"},"kennethreitz/httpbin"),", for this tutorial."),(0,a.kt)("p",null,"You can deploy it to your Kubernetes cluster by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl run httpbin --image kennethreitz/httpbin --port 80\nkubectl expose pod httpbin --port 80\n")),(0,a.kt)("h2",{id:"configuring-ingress"},"Configuring Ingress"),(0,a.kt)("p",null,"We will use the ",(0,a.kt)("a",{parentName:"p",href:"https://gateway-api.sigs.k8s.io/api-types/httproute/"},"HTTPRoute API")," to define Ingress. The example below shows a sample configuration that creates a Route to the httpbin service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="httpbin-ingress.yaml"',title:'"httpbin-ingress.yaml"'},"apiVersion: gateway.networking.k8s.io/v1alpha2\nkind: HTTPRoute\nmetadata:\n  name: httpbin-route\nspec:\n  hostnames:\n  - local.httpbin.org\n  rules:\n  - matches:\n    - path:\n        type: PathPrefix\n        value: /\n    backendRefs:\n    - name: httpbin\n      port: 80\n")),(0,a.kt)("p",null,"This configuration will route all requests with host ",(0,a.kt)("inlineCode",{parentName:"p"},"local.httpbin.org")," to the httpbin service."),(0,a.kt)("p",null,"You can apply it by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f httpbin-ingress.yaml\n")),(0,a.kt)("h2",{id:"test-the-created-routes"},"Test the created Routes"),(0,a.kt)("p",null,"If you followed along and used minikube and ",(0,a.kt)("inlineCode",{parentName:"p"},"NodePort")," service to expose APISIX, you can access it through the Node IP of the service ",(0,a.kt)("inlineCode",{parentName:"p"},"apisix-gateway"),". If the Node IP is not reachable directly (if you are on Darwin, Windows, or WSL), you can create a tunnel to access the service on your machine:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"minikube service apisix-gateway --url -n ingress-apisix\n")),(0,a.kt)("p",null,"Now, you can send a ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," request to the created Route and it will be Routed to the httpbin service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request GET "localhost:57687/get?foo1=bar1&foo2=bar2" -H "Host: local.httpbin.org"\n')),(0,a.kt)("p",null,"You will receive a response similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="output"',title:'"output"'},'{\n  "args": {\n    "foo1": "bar1", \n    "foo2": "bar2"\n  }, \n  "headers": {\n    "Accept": "*/*", \n    "Host": "local.httpbin.org", \n    "User-Agent": "curl/7.84.0", \n    "X-Forwarded-Host": "local.httpbin.org"\n  }, \n  "origin": "172.17.0.1", \n  "url": "http://local.httpbin.org/get?foo1=bar1&foo2=bar2"\n}\n')))}u.isMDXComponent=!0}}]);