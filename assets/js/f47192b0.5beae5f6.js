"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[49171],{3905:function(e,t,a){a.d(t,{Zo:function(){return h},kt:function(){return d}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},h=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=l(a),d=r,g=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return a?n.createElement(g,s(s({ref:t},h),{},{components:a})):n.createElement(g,s({ref:t},h))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},4238:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},assets:function(){return l},toc:function(){return h},default:function(){return p}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),s={title:"Does etcd 3 Support HTTP Access Perfectly?",author:"Zexuan Luo",authorURL:"https://github.com/spacewander",authorImageURL:"https://avatars.githubusercontent.com/u/4161644?v=4",keywords:["Apache APISIX","etcd","HTTP","gRPC"],Description:"It has been 8 months since the release of Apache APISIX version 2.0 last October. In the course of practice, we have also discovered some issues with etcd's HTTP API that interoperate with the gRPC API. In fact, having a gRPC-gateway does not mean that HTTP access is perfectly supported, there are some nuances here.",tags:["Technology"]},i=void 0,c={permalink:"/blog/2021/06/30/etcd3-support-HTTP-access-perfectly",source:"@site/blog/2021/06/30/etcd3-support-HTTP-access-perfectly.md",title:"Does etcd 3 Support HTTP Access Perfectly?",description:"It has been 8 months since the release of Apache APISIX version 2.0 last October. In the course of practice, we have also discovered some issues with etcd's HTTP API that interoperate with the gRPC API. In fact, having a gRPC-gateway does not mean that HTTP access is perfectly supported, there are some nuances here.",date:"2021-06-30T00:00:00.000Z",formattedDate:"June 30, 2021",tags:[{label:"Technology",permalink:"/blog/tags/technology"}],readingTime:5.005,truncated:!0,authors:[{name:"Zexuan Luo",url:"https://github.com/spacewander",imageURL:"https://avatars.githubusercontent.com/u/4161644?v=4"}],prevItem:{title:"Apache APISIX has over 200 contributors in GitHub main repo! ",permalink:"/blog/2021/07/06/celebrate-200-contributors"},nextItem:{title:"Release Apache APISIX 2.7.0",permalink:"/blog/2021/06/29/release-apache-apisix-2.7"}},l={authorsImageUrls:[void 0]},h=[{value:"Breaking the Default Restrictions of gRPC",id:"breaking-the-default-restrictions-of-grpc",children:[]},{value:"Interesting Usage of Server-side Certificates",id:"interesting-usage-of-server-side-certificates",children:[]},{value:"Summary",id:"summary",children:[]}],u={toc:h};function p(e){var t=e.components,s=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"It has been 8 months since the release of Apache APISIX version 2.0 last October. In the course of practice, we have also discovered some issues with etcd's HTTP API that interoperate with the gRPC API. In fact, having a gRPC-gateway does not mean that HTTP access is perfectly supported, there are some nuances here.")),(0,o.kt)("p",null,"After etcd was upgraded to version 3.x, the protocol of its external API was switched from normal HTTP1 to gRPC. etcd proxied HTTP1 requests through gRPC-gateway to access the new gRPC API in the form of gRPC for those special groups that cannot use gRPC. (Since HTTP1 is too awkward to pronounce, the following is simplified to HTTP, which corresponds to gRPC. Please don\u2019t get hung up on the fact that gRPC is also an HTTP request.)"),(0,o.kt)("p",null,"When Apache APISIX started using etcd, we used the etcd v2 API, and since Apache APISIX version 2.0, we have upgraded our dependency on etcd to 3.x. Since there is no gRPC library in the Lua ecosystem, etcd\u2019s HTTP compatibility has helped us a lot, so we don\u2019t have to go through a lot of effort to patch This was a big help, so we didn\u2019t have to go to a lot of trouble to fill in the gaps."),(0,o.kt)("p",null,"It has been 8 months since the release of Apache APISIX version 2.0 last October. In the course of practice, we have also discovered some issues with etcd\u2019s HTTP API that interoperates with the gRPC API. In fact, having a gRPC-gateway does not mean that HTTP access is perfectly supported, there are some nuances here."),(0,o.kt)("h2",{id:"breaking-the-default-restrictions-of-grpc"},"Breaking the Default Restrictions of gRPC"),(0,o.kt)("p",null,"Just a few days ago, etcd released version v3.5.0. This release solves a problem that has been bothering us for a long time."),(0,o.kt)("p",null,"Unlike HTTP, gRPC limits the size of data that can be read in one request by default. This limit is called \u201cMaxCallRecvMsgSize\u201d and defaults to 4MiB. When Apache APISIX fully synchronizes etcd data, this limit can be triggered if configured enough and the error \u201cgrpc: received message larger than max\u201d."),(0,o.kt)("p",null,"Miraculously, if you use etcdctl to access it, there is no problem at all. This is because this limit can be set dynamically when establishing a connection with the gRPC server. etcdctl sets this limit to a large integer, which is equivalent to removing this limit."),(0,o.kt)("p",null,"Since many users have encountered the same problem, we have discussed countermeasures.\nOne idea was to use incremental synchronization to simulate full synchronization, which has two drawbacks."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"It is complicated to implement and requires a lot of code changes."),(0,o.kt)("li",{parentName:"ol"},"It would extend the time required for synchronization.")),(0,o.kt)("p",null,"Another idea is to modify etcd. If you can remove the restrictions in etcdctl, why not treat gRPC-gateway the same way? The same change can be made to gRPC-gateway.\nWe\u2019ve adopted the second option, and have given etcd a PR: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/etcd-io/etcd/pull/13077"},"PR #13077"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"2021-06-30-1",src:a(1659).Z})),(0,o.kt)("p",null,"The latest release of v3.5.0 includes this change that we contributed. If you encounter \u201cgrpc: received message larger than max\u201d, you may want to try this version. This change has also been back-ported to the 3.4 branch by the etcd developers, and the next release of the 3.4 branch will carry this change as well."),(0,o.kt)("p",null,"This incident also shows that gRPC-gateway is not foolproof. Even with it, there is no guarantee that HTTP access will have the same experience as gRPC access."),(0,o.kt)("h2",{id:"interesting-usage-of-server-side-certificates"},"Interesting Usage of Server-side Certificates"),(0,o.kt)("p",null,"After Apache APISIX added support for etcd mTLS, some users reported that they have been unable to complete the checksum, while accessing with etcdctl was successful. After talking to the user, I decided to take his certificate and reproduce it."),(0,o.kt)("p",null,"During the replication process, I noticed this error in the etcd log:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'2021-06-09 11:10:13.022735 I | embed: rejected connection from "127.0.0.1:50898" (error "tls: failed to verify client\'s certificate: x509: certificate specifies an incompatible key usage", ServerName "")\nWARNING: 2021/06/09 11:10:13 grpc: addrConn.createTransport failed to connect to {127.0.0.1:12379 0 }. Err :connection error: desc = "transport: authentication handshake failed: remote error: tls: bad certificate". Reconnecting...\n')),(0,o.kt)("p",null,"The \u201cbad certificate\u201d error message looks at first glance like it is because we sent the wrong client certificate to etcd. But if you look closely, you will see that this error is reported inside the gRPC server."),(0,o.kt)("p",null,"The gRPC-gateway acts as a proxy inside etcd, turning outside HTTP requests into gRPC requests that the gRPC server can handle."),(0,o.kt)("p",null,"The general architecture is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"etcdctl ----\x3e gRPC server\nApache APISIX ---\x3e gRPC-gateway ---\x3e gRPC server\n")),(0,o.kt)("p",null,"Why does etcdctl connect directly to the gRPC server, but not with a gRPC-gateway in between?"),(0,o.kt)("p",null,"It turns out that when etcd enables client-side certificate validation, a client-side certificate is required to connect to the gRPC server using the gRPC-gateway. Guess where this certificate comes from?"),(0,o.kt)("p",null,"etcd uses the configured server-side certificate directly as the client-side certificate here."),(0,o.kt)("p",null,"A certificate that provides both authentication on the server side and identity on the client side doesn\u2019t seem to be a problem. Unless server auth expansion is enabled on the certificate, but client auth is not enabled. Execute the following command on the faulty certificate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"openssl x509 -text -noout -in /tmp/bad.crt\n")),(0,o.kt)("p",null,"You will see output like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"X509v3 extensions:\nX509v3 Key Usage: critical\nDigital Signature, Key Encipherment\nX509v3 Extended Key Usage:\nTLS Web Server Authentication\n")),(0,o.kt)("p",null,"Note the \u201cTLS Web Server Authentication\u201d here, if we change it to \u201cTLS Web Server Authentication, TLS Web Client Authentication\u201d or without this extension, there will be no problem."),(0,o.kt)("p",null,"There is also an issue about this problem on etcd\u2019s repository: Issue ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/etcd-io/etcd/issues/9785"},"#9785"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"2021-06-30-2",src:a(52476).Z})),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Although we have listed a few minor issues above, etcd\u2019s support for HTTP access is still a very useful feature."),(0,o.kt)("p",null,"Thanks to the users of Apache APISIX, we have a large user base to find these details of etcd. As a large user of etcd, we will continue to communicate with the etcd developers for many years to come."))}p.isMDXComponent=!0},1659:function(e,t,a){t.Z=a.p+"assets/images/2021-06-30-1-6eae65298ae03e3aafbcafffa6464321.png"},52476:function(e,t,a){t.Z=a.p+"assets/images/2021-06-30-2-4b6100e6ec8760dbc1d75da8fe87f8af.png"}}]);