"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[80575],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},31283:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"ai-prompt-guard",keywords:["Apache APISIX","API Gateway","Plugin","ai-prompt-guard"],description:"This document contains information about the Apache APISIX ai-prompt-guard Plugin."},o=void 0,l={unversionedId:"plugins/ai-prompt-guard",id:"plugins/ai-prompt-guard",isDocsHomePage:!1,title:"ai-prompt-guard",description:"This document contains information about the Apache APISIX ai-prompt-guard Plugin.",source:"@site/docs/apisix/plugins/ai-prompt-guard.md",sourceDirName:"plugins",slug:"/plugins/ai-prompt-guard",permalink:"/docs/apisix/next/plugins/ai-prompt-guard",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/ai-prompt-guard.md",tags:[],version:"current",frontMatter:{title:"ai-prompt-guard",keywords:["Apache APISIX","API Gateway","Plugin","ai-prompt-guard"],description:"This document contains information about the Apache APISIX ai-prompt-guard Plugin."},sidebar:"docs",previous:{title:"ai-rate-limiting",permalink:"/docs/apisix/next/plugins/ai-rate-limiting"},next:{title:"ai-aws-content-moderation",permalink:"/docs/apisix/next/plugins/ai-aws-content-moderation"}},p=[{value:"Description",id:"description",children:[]},{value:"Plugin Attributes",id:"plugin-attributes",children:[]},{value:"Example usage",id:"example-usage",children:[]}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ai-prompt-guard")," plugin safeguards your AI endpoints by inspecting and validating incoming prompt messages. It checks the content of requests against user-defined allowed and denied patterns to ensure that only approved inputs are processed. Based on its configuration, the plugin can either examine just the latest message or the entire conversation history, and it can be set to check prompts from all roles or only from end users."),(0,r.kt)("p",null,"When both ",(0,r.kt)("strong",{parentName:"p"},"allow")," and ",(0,r.kt)("strong",{parentName:"p"},"deny")," patterns are configured, the plugin first ensures that at least one allowed pattern is matched. If none match, the request is rejected with a ",(0,r.kt)("em",{parentName:"p"},'"Request doesn\'t match allow patterns"')," error. If an allowed pattern is found, it then checks for any occurrences of denied patterns\u2014rejecting the request with a ",(0,r.kt)("em",{parentName:"p"},'"Request contains prohibited content"')," error if any are detected."),(0,r.kt)("h2",{id:"plugin-attributes"},"Plugin Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Type")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"match_all_roles"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the plugin will check prompt messages from all roles. Otherwise, it only validates when its role is ",(0,r.kt)("inlineCode",{parentName:"td"},'"user"'),". Default is ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"match_all_conversation_history"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"When enabled, all messages in the conversation history are concatenated and checked. If ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),", only the content of the last message is examined. Default is ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allow_patterns"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"array"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of regex patterns. When provided, the prompt must match ",(0,r.kt)("strong",{parentName:"td"},"at least one")," pattern to be considered valid.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"deny_patterns"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"array"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of regex patterns. If any of these patterns match the prompt content, the request is rejected.")))),(0,r.kt)("h2",{id:"example-usage"},"Example usage"),(0,r.kt)("p",null,"Create a route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ai-prompt-guard")," plugin like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes/1" -X PUT \\\n  -H "X-API-KEY: ${ADMIN_API_KEY}" \\\n  -d \'{\n    "uri": "/v1/chat/completions",\n    "plugins": {\n      "ai-prompt-guard": {\n        "match_all_roles": true,\n          "allow_patterns": [\n            "goodword"\n          ],\n        "deny_patterns": [\n          "badword"\n        ]\n     }\n  },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "api.openai.com:443": 1\n      },\n      "pass_host": "node",\n      "scheme": "https"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Now send a request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl http://127.0.0.1:9080/v1/chat/completions -i -XPOST  -H \'Content-Type: application/json\' -d \'{\n  "model": "gpt-4",\n  "messages": [{ "role": "user", "content": "badword request" }]\n}\' -H "Authorization: Bearer <your token here>"\n')),(0,r.kt)("p",null,"The request will fail with 400 error and following response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'{"message":"Request doesn\'t match allow patterns"}\n')))}u.isMDXComponent=!0}}]);