"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[99118],{35318:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(27378);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=c(r),m=o,d=h["".concat(p,".").concat(m)]||h[m]||u[m]||a;return r?n.createElement(d,i(i({ref:t},l),{},{components:r})):n.createElement(d,i({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},45738:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(25773),o=(r(27378),r(35318));const a={title:"Implementing the Idempotency-Key specification on Apache APISIX",authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258"}],keywords:["APISIX","Idempotency","IETF","specification","plugin","coding"],description:"Last week, I wrote an analysis of the IETF Idempotency-Key specification. The specification aims to avoid duplicated requests. In short, the idea is for the client to send a unique key along with the request: If the server doesn't know the key, it proceeds as usual and then stores the response. If the server knows the key, it short-circuits any further processing and immediately returns the stored response. This post shows how to implement it with Apache APISIX.\n",tags:["Plugin"],image:"https://static.apiseven.com/uploads/2024/04/09/0rfsRevo_stormtrooper-2899993.jpg"},i=void 0,s={permalink:"/blog/2024/04/11/implement-idempotency-key-apisix",source:"@site/blog/2024/04/11/implement-idempotency-key-apisix.md",title:"Implementing the Idempotency-Key specification on Apache APISIX",description:"Last week, I wrote an analysis of the IETF Idempotency-Key specification. The specification aims to avoid duplicated requests. In short, the idea is for the client to send a unique key along with the request: If the server doesn't know the key, it proceeds as usual and then stores the response. If the server knows the key, it short-circuits any further processing and immediately returns the stored response. This post shows how to implement it with Apache APISIX.\n",date:"2024-04-11T00:00:00.000Z",formattedDate:"April 11, 2024",tags:[{label:"Plugin",permalink:"/blog/tags/plugin"}],readingTime:9.995,truncated:!0,authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258",imageURL:"https://avatars.githubusercontent.com/u/752258"}],prevItem:{title:"Release Apache APISIX 3.9.1",permalink:"/blog/2024/04/29/release-apache-apisix-3.9.1"},nextItem:{title:"How to build APISIX in SLES 15",permalink:"/blog/2024/04/05/build-apisix-in-sles15"}},p={authorsImageUrls:[void 0]},c=[],l={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("head",null,(0,o.kt)("link",{rel:"canonical",href:"https://blog.frankel.ch/implement-idempotency-key-apisix/"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Last week, I wrote an ",(0,o.kt)("a",{parentName:"p",href:"https://apisix.apache.org/blog/2024/04/04/fix-duplicate-api-requests/"},"analysis")," of the ",(0,o.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04"},"IETF Idempotency-Key specification"),". The specification aims to avoid duplicated requests. In short, the idea is for the client to send a unique key along with the request:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"If the server doesn't know the key, it proceeds as usual and then stores the response"),(0,o.kt)("li",{parentName:"ul"},"If the server knows the key, it short-circuits any further processing and immediately returns the stored response")),(0,o.kt)("p",{parentName:"blockquote"},"This post shows how to implement it with ",(0,o.kt)("a",{parentName:"p",href:"https://apisix.apache.org/"},"Apache APISIX"),".")))}u.isMDXComponent=!0}}]);