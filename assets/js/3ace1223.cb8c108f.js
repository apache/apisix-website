"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[77676],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),h=r,c=m["".concat(s,".").concat(h)]||m[h]||u[h]||i;return a?n.createElement(c,l(l({ref:t},d),{},{components:a})):n.createElement(c,l({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},65903:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const i={title:"prometheus",keywords:["Apache APISIX","API Gateway","Plugin","Prometheus"],description:"The prometheus Plugin provides the capability to integrate APISIX with Prometheus for metric collection and continuous monitoring."},l=void 0,o={unversionedId:"plugins/prometheus",id:"plugins/prometheus",isDocsHomePage:!1,title:"prometheus",description:"The prometheus Plugin provides the capability to integrate APISIX with Prometheus for metric collection and continuous monitoring.",source:"@site/docs/apisix/plugins/prometheus.md",sourceDirName:"plugins",slug:"/plugins/prometheus",permalink:"/docs/apisix/next/plugins/prometheus",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/prometheus.md",tags:[],version:"current",frontMatter:{title:"prometheus",keywords:["Apache APISIX","API Gateway","Plugin","Prometheus"],description:"The prometheus Plugin provides the capability to integrate APISIX with Prometheus for metric collection and continuous monitoring."},sidebar:"docs",previous:{title:"opentelemetry",permalink:"/docs/apisix/next/plugins/opentelemetry"},next:{title:"node-status",permalink:"/docs/apisix/next/plugins/node-status"}},s=[{value:"Description",id:"description",children:[]},{value:"Static Configurations",id:"static-configurations",children:[]},{value:"Attribute",id:"attribute",children:[]},{value:"Metrics",id:"metrics",children:[]},{value:"Labels",id:"labels",children:[{value:"Labels for <code>apisix_http_status</code>",id:"labels-for-apisix_http_status",children:[]},{value:"Labels for <code>apisix_bandwidth</code>",id:"labels-for-apisix_bandwidth",children:[]},{value:"Labels for <code>apisix_llm_latency</code>",id:"labels-for-apisix_llm_latency",children:[]},{value:"Labels for <code>apisix_llm_active_connections</code>",id:"labels-for-apisix_llm_active_connections",children:[]},{value:"Labels for <code>apisix_llm_completion_tokens</code>",id:"labels-for-apisix_llm_completion_tokens",children:[]},{value:"Labels for <code>apisix_llm_prompt_tokens</code>",id:"labels-for-apisix_llm_prompt_tokens",children:[]},{value:"Labels for <code>apisix_http_latency</code>",id:"labels-for-apisix_http_latency",children:[]},{value:"Labels for <code>apisix_upstream_status</code>",id:"labels-for-apisix_upstream_status",children:[]}]},{value:"Examples",id:"examples",children:[{value:"Get APISIX Metrics",id:"get-apisix-metrics",children:[]},{value:"Expose APISIX Metrics on Public API Endpoint",id:"expose-apisix-metrics-on-public-api-endpoint",children:[]},{value:"Monitor Upstream Health Statuses",id:"monitor-upstream-health-statuses",children:[]},{value:"Add Extra Labels for Metrics",id:"add-extra-labels-for-metrics",children:[]},{value:"Monitor TCP/UDP Traffic with Prometheus",id:"monitor-tcpudp-traffic-with-prometheus",children:[]}]}],p={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/prometheus"})),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," Plugin provides the capability to integrate APISIX with ",(0,r.kt)("a",{parentName:"p",href:"https://prometheus.io"},"Prometheus"),"."),(0,r.kt)("p",null,"After enabling the Plugin, APISIX will start collecting relevant metrics, such as API requests and latencies, and exporting them in a ",(0,r.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/instrumenting/exposition_formats/#exposition-formats"},"text-based exposition format")," to Prometheus. You can then create event monitoring and alerting in Prometheus to monitor the health of your API gateway and APIs."),(0,r.kt)("h2",{id:"static-configurations"},"Static Configurations"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," configurations are pre-configured in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix/blob/master/apisix/cli/config.lua"},"default configuration"),"."),(0,r.kt)("p",null,"To customize these values, add the corresponding configurations to ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"plugin_attr:\n  prometheus:                               # Plugin: prometheus attributes\n    export_uri: /apisix/prometheus/metrics  # Set the URI for the Prometheus metrics endpoint.\n    metric_prefix: apisix_                  # Set the prefix for Prometheus metrics generated by APISIX.\n    enable_export_server: true              # Enable the Prometheus export server.\n    export_addr:                            # Set the address for the Prometheus export server.\n      ip: 127.0.0.1                         # Set the IP.\n      port: 9091                            # Set the port.\n    # metrics:                              # Create extra labels for metrics.\n    #  http_status:                         # These metrics will be prefixed with `apisix_`.\n    #    extra_labels:                      # Set the extra labels for http_status metrics.\n    #      - upstream_addr: $upstream_addr\n    #      - status: $upstream_status\n    #    expire: 0                          # The expiration time of metrics in seconds.\n                                            # 0 means the metrics will not expire.\n    #  http_latency:\n    #    extra_labels:                      # Set the extra labels for http_latency metrics.\n    #      - upstream_addr: $upstream_addr\n    #    expire: 0                          # The expiration time of metrics in seconds.\n                                            # 0 means the metrics will not expire.\n    #  bandwidth:\n    #    extra_labels:                      # Set the extra labels for bandwidth metrics.\n    #      - upstream_addr: $upstream_addr\n    #    expire: 0                          # The expiration time of metrics in seconds.\n                                            # 0 means the metrics will not expire.\n    # default_buckets:                      # Set the default buckets for the `http_latency` metrics histogram.\n    #   - 10\n    #   - 50\n    #   - 100\n    #   - 200\n    #   - 500\n    #   - 1000\n    #   - 2000\n    #   - 5000\n    #   - 10000\n    #   - 30000\n    #   - 60000\n    #   - 500\n")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/http/ngx_http_core_module.html"},"Nginx variable")," to create ",(0,r.kt)("inlineCode",{parentName:"p"},"extra_labels"),". See ",(0,r.kt)("a",{parentName:"p",href:"#add-extra-labels-for-metrics"},"add extra labels"),"."),(0,r.kt)("p",null,"Reload APISIX for changes to take effect."),(0,r.kt)("h2",{id:"attribute"},"Attribute"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"prefer_name"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"If true, export Route/Service name instead of their ID in Prometheus metrics.")))),(0,r.kt)("h2",{id:"metrics"},"Metrics"),(0,r.kt)("p",null,"There are different types of metrics in Prometheus. To understand their differences, see ",(0,r.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/concepts/metric_types/"},"metrics types"),"."),(0,r.kt)("p",null,"The following metrics are exported by the ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," Plugin by default. See ",(0,r.kt)("a",{parentName:"p",href:"#get-apisix-metrics"},"get APISIX metrics")," for an example. Note that some metrics, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix_batch_process_entries"),", are not readily visible if there are no data."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_bandwidth"),(0,r.kt)("td",{parentName:"tr",align:null},"counter"),(0,r.kt)("td",{parentName:"tr",align:null},"Total amount of traffic flowing through APISIX in bytes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_etcd_modify_indexes"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of changes to etcd by APISIX keys.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_batch_process_entries"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of remaining entries in a batch when sending data in batches, such as with ",(0,r.kt)("inlineCode",{parentName:"td"},"http logger"),", and other logging Plugins.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_etcd_reachable"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether APISIX can reach etcd. A value of ",(0,r.kt)("inlineCode",{parentName:"td"},"1")," represents reachable and ",(0,r.kt)("inlineCode",{parentName:"td"},"0")," represents unreachable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_http_status"),(0,r.kt)("td",{parentName:"tr",align:null},"counter"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP status codes returned from upstream Services.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_http_requests_total"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of HTTP requests from clients.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_nginx_http_current_connections"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of current connections with clients.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_nginx_metric_errors_total"),(0,r.kt)("td",{parentName:"tr",align:null},"counter"),(0,r.kt)("td",{parentName:"tr",align:null},"Total number of ",(0,r.kt)("inlineCode",{parentName:"td"},"nginx-lua-prometheus")," errors.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_http_latency"),(0,r.kt)("td",{parentName:"tr",align:null},"histogram"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP request latency in milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_node_info"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"Information of the APISIX node, such as host name and the current APISIX version.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_shared_dict_capacity_bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"The total capacity of an ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/openresty/lua-nginx-module#ngxshareddict"},"NGINX shared dictionary"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_shared_dict_free_space_bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"The remaining space in an ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/openresty/lua-nginx-module#ngxshareddict"},"NGINX shared dictionary"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_upstream_status"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"Health check status of upstream nodes, available if health checks are configured on the upstream. A value of ",(0,r.kt)("inlineCode",{parentName:"td"},"1")," represents healthy and ",(0,r.kt)("inlineCode",{parentName:"td"},"0")," represents unhealthy.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apisix_stream_connection_total"),(0,r.kt)("td",{parentName:"tr",align:null},"counter"),(0,r.kt)("td",{parentName:"tr",align:null},"Total number of connections handled per Stream Route.")))),(0,r.kt)("h2",{id:"labels"},"Labels"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/practices/naming/#labels"},"Labels")," are attributes of metrics that are used to differentiate metrics."),(0,r.kt)("p",null,"For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix_http_status")," metric can be labeled with ",(0,r.kt)("inlineCode",{parentName:"p"},"route")," information to identify which Route the HTTP status originates from."),(0,r.kt)("p",null,"The following are labels for a non-exhaustive list of APISIX metrics and their descriptions."),(0,r.kt)("h3",{id:"labels-for-apisix_http_status"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_http_status")),(0,r.kt)("p",null,"The following labels are used to differentiate ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix_http_status")," metrics."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"code"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP response code returned by the upstream node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"route"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Route that the HTTP status originates from when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Route when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to an empty string if a request does not match any Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matched_uri"),(0,r.kt)("td",{parentName:"tr",align:null},"URI of the Route that matches the request. Default to an empty string if a request does not match any Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matched_host"),(0,r.kt)("td",{parentName:"tr",align:null},"Host of the Route that matches the request. Default to an empty string if a request does not match any Route, or host is not configured on the Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"service"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Service that the HTTP status originates from when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Service when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to the configured value of host on the Route if the matched Route does not belong to any Service.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the Consumer associated with a request. Default to an empty string if no Consumer is associated with the request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"node"),(0,r.kt)("td",{parentName:"tr",align:null},"IP address of the upstream node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"request_type"),(0,r.kt)("td",{parentName:"tr",align:null},"traditional_http / ai_chat / ai_stream")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"llm_model"),(0,r.kt)("td",{parentName:"tr",align:null},"For non-traditional_http requests, name of the llm_model")))),(0,r.kt)("h3",{id:"labels-for-apisix_bandwidth"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_bandwidth")),(0,r.kt)("p",null,"The following labels are used to differentiate ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix_bandwidth")," metrics."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"Type of traffic, ",(0,r.kt)("inlineCode",{parentName:"td"},"egress")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"ingress"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"route"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Route that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Route when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to an empty string if a request does not match any Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"service"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Service that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Service when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to the configured value of host on the Route if the matched Route does not belong to any Service.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the Consumer associated with a request. Default to an empty string if no Consumer is associated with the request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"node"),(0,r.kt)("td",{parentName:"tr",align:null},"IP address of the upstream node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"request_type"),(0,r.kt)("td",{parentName:"tr",align:null},"traditional_http / ai_chat / ai_stream")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"llm_model"),(0,r.kt)("td",{parentName:"tr",align:null},"For non-traditional_http requests, name of the llm_model")))),(0,r.kt)("h3",{id:"labels-for-apisix_llm_latency"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_llm_latency")),(0,r.kt)("p",null,"| Name | Description                                                                                                                   |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------- |                                                                                             |\n| route_id      | ID of the Route that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," (default), and name of the Route when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Default to an empty string if a request does not match any Route.                         |\n| service_id    | ID of the Service that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," (default), and name of the Service when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Default to the configured value of host on the Route if the matched Route does not belong to any Service. |\n| consumer   | Name of the Consumer associated with a request. Default to an empty string if no Consumer is associated with the request.                       |\n| node       | IP address of the upstream node.                                                                                          |\n| request_type       | traditional_http / ai_chat / ai_stream                                                                                          |\n| llm_model       | For non-traditional_http requests, name of the llm_model                                                                                          |"),(0,r.kt)("h3",{id:"labels-for-apisix_llm_active_connections"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_llm_active_connections")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"route"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the Route that bandwidth corresponds to. Default to an empty string if a request does not match any Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"route_id"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Route that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Route when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to an empty string if a request does not match any Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matched_uri"),(0,r.kt)("td",{parentName:"tr",align:null},"URI of the Route that matches the request. Default to an empty string if a request does not match any Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matched_host"),(0,r.kt)("td",{parentName:"tr",align:null},"Host of the Route that matches the request. Default to an empty string if a request does not match any Route, or host is not configured on the Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"service"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the Service that bandwidth corresponds to. Default to the configured value of host on the Route if the matched Route does not belong to any Service.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"service_id"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Service that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Service when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to the configured value of host on the Route if the matched Route does not belong to any Service.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the Consumer associated with a request. Default to an empty string if no Consumer is associated with the request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"node"),(0,r.kt)("td",{parentName:"tr",align:null},"IP address of the upstream node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"request_type"),(0,r.kt)("td",{parentName:"tr",align:null},"traditional_http / ai_chat / ai_stream")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"llm_model"),(0,r.kt)("td",{parentName:"tr",align:null},"For non-traditional_http requests, name of the llm_model")))),(0,r.kt)("h3",{id:"labels-for-apisix_llm_completion_tokens"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_llm_completion_tokens")),(0,r.kt)("p",null,"| Name | Description                                                                                                                   |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------- |                                                                                             |\n| route_id      | ID of the Route that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," (default), and name of the Route when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Default to an empty string if a request does not match any Route.                         |\n| service_id    | ID of the Service that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," (default), and name of the Service when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Default to the configured value of host on the Route if the matched Route does not belong to any Service. |\n| consumer   | Name of the Consumer associated with a request. Default to an empty string if no Consumer is associated with the request.                       |\n| node       | IP address of the upstream node.                                                                                          |\n| request_type       | traditional_http / ai_chat / ai_stream                                                                                          |\n| llm_model       | For non-traditional_http requests, name of the llm_model                                                                                          |"),(0,r.kt)("h3",{id:"labels-for-apisix_llm_prompt_tokens"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_llm_prompt_tokens")),(0,r.kt)("p",null,"| Name | Description                                                                                                                   |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------- |                                                                                             |\n| route_id      | ID of the Route that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," (default), and name of the Route when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Default to an empty string if a request does not match any Route.                         |\n| service_id    | ID of the Service that bandwidth corresponds to when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," (default), and name of the Service when ",(0,r.kt)("inlineCode",{parentName:"p"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Default to the configured value of host on the Route if the matched Route does not belong to any Service. |\n| consumer   | Name of the Consumer associated with a request. Default to an empty string if no Consumer is associated with the request.                       |\n| node       | IP address of the upstream node.                                                                                          |\n| request_type       | traditional_http / ai_chat / ai_stream                                                                                          |\n| llm_model       | For non-traditional_http requests, name of the llm_model                                                                                          |"),(0,r.kt)("h3",{id:"labels-for-apisix_http_latency"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_http_latency")),(0,r.kt)("p",null,"The following labels are used to differentiate ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix_http_latency")," metrics."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"Type of latencies. See ",(0,r.kt)("a",{parentName:"td",href:"#latency-types"},"latency types")," for details.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"route"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Route that latencies correspond to when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Route when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to an empty string if a request does not match any Route.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"service"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the Service that latencies correspond to when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," (default), and name of the Service when ",(0,r.kt)("inlineCode",{parentName:"td"},"prefer_name")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),". Default to the configured value of host on the Route if the matched Route does not belong to any Service.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the Consumer associated with latencies. Default to an empty string if no Consumer is associated with the request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"node"),(0,r.kt)("td",{parentName:"tr",align:null},"IP address of the upstream node associated with latencies.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"request_type"),(0,r.kt)("td",{parentName:"tr",align:null},"traditional_http / ai_chat / ai_stream")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"llm_model"),(0,r.kt)("td",{parentName:"tr",align:null},"For non-traditional_http requests, name of the llm_model")))),(0,r.kt)("h4",{id:"latency-types"},"Latency Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"apisix_http_latency")," can be labeled with one of the three types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"request")," represents the time elapsed between the first byte was read from the client and the log write after the last byte was sent to the client.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"upstream")," represents the time elapsed waiting on responses from the upstream Service.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"apisix")," represents the difference between the ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," latency and ",(0,r.kt)("inlineCode",{parentName:"p"},"upstream")," latency."))),(0,r.kt)("p",null,"In other words, the APISIX latency is not only attributed to the Lua processing. It should be understood as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"APISIX latency\n  = downstream request time - upstream response time\n  = downstream traffic latency + NGINX latency\n")),(0,r.kt)("h3",{id:"labels-for-apisix_upstream_status"},"Labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"apisix_upstream_status")),(0,r.kt)("p",null,"The following labels are used to differentiate ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix_upstream_status")," metrics."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"Resource ID corresponding to the upstream configured with health checks, such as ",(0,r.kt)("inlineCode",{parentName:"td"},"/apisix/routes/1")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"/apisix/upstreams/1"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ip"),(0,r.kt)("td",{parentName:"tr",align:null},"IP address of the upstream node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"port"),(0,r.kt)("td",{parentName:"tr",align:null},"Port number of the node.")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The examples below demonstrate how you can work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," Plugin for different scenarios."),(0,r.kt)("h3",{id:"get-apisix-metrics"},"Get APISIX Metrics"),(0,r.kt)("p",null,"The following example demonstrates how you can get metrics from APISIX."),(0,r.kt)("p",null,"The default Prometheus metrics endpoint and other Prometheus related configurations can be found in the ",(0,r.kt)("a",{parentName:"p",href:"#static-configurations"},"static configuration"),". If you would like to customize these configuration, update ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," and reload APISIX."),(0,r.kt)("p",null,"If you deploy APISIX in a containerized environment and would like to access the Prometheus metrics endpoint externally, update the configuration file as follows and reload APISIX:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"plugin_attr:\n  prometheus:\n    export_addr:\n      ip: 0.0.0.0\n")),(0,r.kt)("p",null,"Send a request to the APISIX Prometheus metrics endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9091/apisix/prometheus/metrics"\n')),(0,r.kt)("p",null,"You should see an output similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# HELP apisix_bandwidth Total bandwidth in bytes consumed per Service in Apisix\n# TYPE apisix_bandwidth counter\napisix_bandwidth{type="egress",route="",service="",consumer="",node="",request_type="traditional_http",request_llm_model="",llm_model=""} 8417\napisix_bandwidth{type="egress",route="1",service="",consumer="",node="127.0.0.1",request_type="traditional_http",request_llm_model="",llm_model=""} 1420\napisix_bandwidth{type="egress",route="2",service="",consumer="",node="127.0.0.1",request_type="traditional_http",request_llm_model="",llm_model=""} 1420\napisix_bandwidth{type="ingress",route="",service="",consumer="",node="",request_type="traditional_http",request_llm_model="",llm_model=""} 189\napisix_bandwidth{type="ingress",route="1",service="",consumer="",node="127.0.0.1",request_type="traditional_http",request_llm_model="",llm_model=""} 332\napisix_bandwidth{type="ingress",route="2",service="",consumer="",node="127.0.0.1",request_type="traditional_http",request_llm_model="",llm_model=""} 332\n# HELP apisix_etcd_modify_indexes Etcd modify index for APISIX keys\n# TYPE apisix_etcd_modify_indexes gauge\napisix_etcd_modify_indexes{key="consumers"} 0\napisix_etcd_modify_indexes{key="global_rules"} 0\n...\n')),(0,r.kt)("h3",{id:"expose-apisix-metrics-on-public-api-endpoint"},"Expose APISIX Metrics on Public API Endpoint"),(0,r.kt)("p",null,"The following example demonstrates how you can disable the Prometheus export server that, by default, exposes an endpoint on port ",(0,r.kt)("inlineCode",{parentName:"p"},"9091"),", and expose APISIX Prometheus metrics on a new public API endpoint on port ",(0,r.kt)("inlineCode",{parentName:"p"},"9080"),", which APISIX uses to listen to other client requests."),(0,r.kt)("p",null,"Disable the Prometheus export server in the configuration file and reload APISIX for changes to take effect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"plugin_attr:\n  prometheus:\n    enable_export_server: false\n")),(0,r.kt)("p",null,"Next, create a Route with ",(0,r.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/plugins/public-api"},(0,r.kt)("inlineCode",{parentName:"a"},"public-api"))," Plugin and expose a public API endpoint for APISIX metrics:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes/prometheus-metrics" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "uri": "/apisix/prometheus/metrics",\n    "plugins": {\n      "public-api": {}\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request to the new metrics endpoint to verify:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9080/apisix/prometheus/metrics"\n')),(0,r.kt)("p",null,"You should see an output similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# HELP apisix_http_requests_total The total number of client requests since APISIX started\n# TYPE apisix_http_requests_total gauge\napisix_http_requests_total 1\n# HELP apisix_nginx_http_current_connections Number of HTTP connections\n# TYPE apisix_nginx_http_current_connections gauge\napisix_nginx_http_current_connections{state="accepted"} 1\napisix_nginx_http_current_connections{state="active"} 1\napisix_nginx_http_current_connections{state="handled"} 1\napisix_nginx_http_current_connections{state="reading"} 0\napisix_nginx_http_current_connections{state="waiting"} 0\napisix_nginx_http_current_connections{state="writing"} 1\n...\n')),(0,r.kt)("h3",{id:"monitor-upstream-health-statuses"},"Monitor Upstream Health Statuses"),(0,r.kt)("p",null,"The following example demonstrates how to monitor the health status of upstream nodes."),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," Plugin and configure upstream active health checks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "prometheus-route",\n    "uri": "/get",\n    "plugins": {\n      "prometheus": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1,\n        "127.0.0.1:20001": 1\n      },\n      "checks": {\n        "active": {\n          "timeout": 5,\n          "http_path": "/status",\n          "healthy": {\n            "interval": 2,\n            "successes": 1\n          },\n          "unhealthy": {\n            "interval": 1,\n            "http_failures": 2\n          }\n        },\n        "passive": {\n          "healthy": {\n            "http_statuses": [200, 201],\n            "successes": 3\n          },\n          "unhealthy": {\n            "http_statuses": [500],\n            "http_failures": 3,\n            "tcp_failures": 3\n          }\n        }\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request to the APISIX Prometheus metrics endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9091/apisix/prometheus/metrics"\n')),(0,r.kt)("p",null,"You should see an output similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# HELP apisix_upstream_status upstream status from health check\n# TYPE apisix_upstream_status gauge\napisix_upstream_status{name="/apisix/routes/1",ip="54.237.103.220",port="80"} 1\napisix_upstream_status{name="/apisix/routes/1",ip="127.0.0.1",port="20001"} 0\n')),(0,r.kt)("p",null,"This shows that the upstream node ",(0,r.kt)("inlineCode",{parentName:"p"},"httpbin.org:80")," is healthy and the upstream node ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1:20001")," is unhealthy."),(0,r.kt)("h3",{id:"add-extra-labels-for-metrics"},"Add Extra Labels for Metrics"),(0,r.kt)("p",null,"The following example demonstrates how to add additional labels to metrics and use the ",(0,r.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/http/ngx_http_core_module.html"},"Nginx variable")," in label values."),(0,r.kt)("p",null,"Currently, only the following metrics support extra labels:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"apisix_http_status"),(0,r.kt)("li",{parentName:"ul"},"apisix_http_latency"),(0,r.kt)("li",{parentName:"ul"},"apisix_bandwidth")),(0,r.kt)("p",null,"Include the following configurations in the configuration file to add labels for metrics and reload APISIX for changes to take effect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"plugin_attr:\n  prometheus:                                # Plugin: prometheus\n    metrics:                                 # Create extra labels from the NGINX variables.\n      http_status:\n        extra_labels:                        # Set the extra labels for http_status metrics.\n          - upstream_addr: $upstream_addr    # Add an extra upstream_addr label with value being the NGINX variable $upstream_addr.\n          - route_name: $route_name          # Add an extra route_name label with value being the APISIX variable $route_name.\n")),(0,r.kt)("p",null,"Note that if you define a variable in the label value but it does not correspond to any existing ",(0,r.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/apisix-variable/"},"APISIX variables")," and ",(0,r.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/http/ngx_http_core_module.html"},"Nginx variable"),", the label value will default to an empty string."),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," Plugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "prometheus-route",\nInclude the following configurations in the configuration file to add labels for metrics and reload APISIX for changes to take effect:\n    "name": "extra-label",\n    "plugins": {\n      "prometheus": {}\n    },\n    "upstream": {\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request to the Route to verify:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("p",null,"Send a request to the APISIX Prometheus metrics endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9091/apisix/prometheus/metrics"\n')),(0,r.kt)("p",null,"You should see an output similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# HELP apisix_http_status HTTP status codes per Service in APISIX\n# TYPE apisix_http_status counter\napisix_http_status{code="200",route="1",matched_uri="/get",matched_host="",service="",consumer="",node="54.237.103.220",upstream_addr="54.237.103.220:80",route_name="extra-label"} 1\n')),(0,r.kt)("h3",{id:"monitor-tcpudp-traffic-with-prometheus"},"Monitor TCP/UDP Traffic with Prometheus"),(0,r.kt)("p",null,"The following example demonstrates how to collect TCP/UDP traffic metrics in APISIX."),(0,r.kt)("p",null,"Include the following configurations in ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," to enable stream proxy and ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," Plugin for stream proxy. Reload APISIX for changes to take effect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"apisix:\n  proxy_mode: http&stream   # Enable both L4 & L7 proxies\n  stream_proxy:             # Configure L4 proxy\n    tcp:\n      - 9100                # Set TCP proxy listening port\n    udp:\n      - 9200                # Set UDP proxy listening port\n\nstream_plugins:\n  - prometheus              # Enable prometheus for stream proxy\n")),(0,r.kt)("p",null,"Create a Stream Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus")," Plugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/stream_routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\nInclude the following configurations in `config.yaml` to enable stream proxy and enable `prometheus` Plugin for stream proxy. Reload APISIX for changes to take effect:\n    "plugins": {\n      "prometheus":{}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request to the Stream Route to verify:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9100"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("p",null,"Send a request to the APISIX Prometheus metrics endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9091/apisix/prometheus/metrics"\n')),(0,r.kt)("p",null,"You should see an output similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# HELP apisix_stream_connection_total Total number of connections handled per Stream Route in APISIX\n# TYPE apisix_stream_connection_total counter\napisix_stream_connection_total{route="1"} 1\n')))}d.isMDXComponent=!0}}]);