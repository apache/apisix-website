"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[79406],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72998:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"gRPC Proxy"},i=void 0,l={unversionedId:"grpc-proxy",id:"version-3.10/grpc-proxy",isDocsHomePage:!1,title:"gRPC Proxy",description:"proxying gRPC traffic:\ngRPC client -> APISIX -> gRPC/gRPCS server",source:"@site/docs-apisix_versioned_docs/version-3.10/grpc-proxy.md",sourceDirName:".",slug:"/grpc-proxy",permalink:"/docs/apisix/3.10/grpc-proxy",editUrl:"/edit#https://github.com/apache/apisix/edit/release/3.10/docs/en/latest/grpc-proxy.md",tags:[],version:"3.10",frontMatter:{title:"gRPC Proxy"},sidebar:"version-3.10/docs",previous:{title:"Stream Proxy",permalink:"/docs/apisix/3.10/stream-proxy"},next:{title:"Customize Nginx configuration",permalink:"/docs/apisix/3.10/customize-nginx-configuration"}},p=[{value:"Parameters",id:"parameters",children:[{value:"Example",id:"example",children:[]},{value:"gRPCS",id:"grpcs",children:[]}]}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"proxying gRPC traffic:\ngRPC client -> APISIX -> gRPC/gRPCS server"),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scheme"),": the ",(0,a.kt)("inlineCode",{parentName:"li"},"scheme")," of the route's upstream must be ",(0,a.kt)("inlineCode",{parentName:"li"},"grpc")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"grpcs"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"uri"),": format likes /service/method, Example\uff1a/helloworld.Greeter/SayHello")),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("h4",{id:"create-proxying-grpc-route"},"create proxying gRPC route"),(0,a.kt)("p",null,"Here's an example, to proxying gRPC service by specified route:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"attention: the ",(0,a.kt)("inlineCode",{parentName:"li"},"scheme")," of the route's upstream must be ",(0,a.kt)("inlineCode",{parentName:"li"},"grpc")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"grpcs"),"."),(0,a.kt)("li",{parentName:"ul"},"attention: APISIX use TLS\u2011encrypted HTTP/2 to expose gRPC service, so need to ",(0,a.kt)("a",{parentName:"li",href:"/docs/apisix/3.10/certificate"},"config SSL certificate")),(0,a.kt)("li",{parentName:"ul"},"attention: APISIX also support to expose gRPC service with plaintext HTTP/2, which does not rely on TLS, usually used to proxy gRPC service in intranet environment"),(0,a.kt)("li",{parentName:"ul"},"the grpc server example\uff1a",(0,a.kt)("a",{parentName:"li",href:"https://github.com/api7/grpc_server_example"},"grpc_server_example"))),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You can fetch the ",(0,a.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,a.kt)("pre",{parentName:"div"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl http://127.0.0.1:9180/apisix/admin/routes/1 -H "X-API-KEY: $admin_key" -X PUT -d \'\n{\n    "methods": ["POST", "GET"],\n    "uri": "/helloworld.Greeter/SayHello",\n    "upstream": {\n        "scheme": "grpc",\n        "type": "roundrobin",\n        "nodes": {\n            "127.0.0.1:50051": 1\n        }\n    }\n}\'\n')),(0,a.kt)("h4",{id:"testing-http2-with-tlsencrypted"},"testing HTTP/2 with TLS\u2011encrypted"),(0,a.kt)("p",null,"Invoking the route created before\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ grpcurl -insecure -import-path /pathtoprotos  -proto helloworld.proto  -d \'{"name":"apisix"}\' 127.0.0.1:9443 helloworld.Greeter.SayHello\n{\n  "message": "Hello apisix"\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"grpcurl is a CLI tool, similar to curl, that acts as a gRPC client and lets you interact with a gRPC server. For installation, please check out the official ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fullstorydev/grpcurl#installation"},"documentation"),".")),(0,a.kt)("p",null,"This means that the proxying is working."),(0,a.kt)("h4",{id:"testing-http2-with-plaintext"},"testing HTTP/2 with plaintext"),(0,a.kt)("p",null,"By default, the APISIX only listens to ",(0,a.kt)("inlineCode",{parentName:"p"},"9443")," for TLS\u2011encrypted HTTP/2. You can support HTTP/2 with plaintext via the ",(0,a.kt)("inlineCode",{parentName:"p"},"node_listen")," section under ",(0,a.kt)("inlineCode",{parentName:"p"},"apisix")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"conf/config.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apisix:\n    node_listen:\n        - port: 9080\n        - port: 9081\n    enable_http2: true\n")),(0,a.kt)("p",null,"Invoking the route created before\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ grpcurl -plaintext -import-path /pathtoprotos  -proto helloworld.proto  -d \'{"name":"apisix"}\' 127.0.0.1:9081 helloworld.Greeter.SayHello\n{\n  "message": "Hello apisix"\n}\n')),(0,a.kt)("p",null,"This means that the proxying is working."),(0,a.kt)("h3",{id:"grpcs"},"gRPCS"),(0,a.kt)("p",null,"If your gRPC service encrypts with TLS by itself (so called ",(0,a.kt)("inlineCode",{parentName:"p"},"gPRCS"),", gPRC + TLS), you need to change the ",(0,a.kt)("inlineCode",{parentName:"p"},"scheme")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"grpcs"),". The example above runs gRPCS service on port 50052, to proxy gRPC request, we need to use the configuration below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl http://127.0.0.1:9180/apisix/admin/routes/1 -H "X-API-KEY: $admin_key" -X PUT -d \'\n{\n    "methods": ["POST", "GET"],\n    "uri": "/helloworld.Greeter/SayHello",\n    "upstream": {\n        "scheme": "grpcs",\n        "type": "roundrobin",\n        "nodes": {\n            "127.0.0.1:50052": 1\n        }\n    }\n}\'\n')))}c.isMDXComponent=!0}}]);