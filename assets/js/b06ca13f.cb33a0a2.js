"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[48534],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19285:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const i={title:"workflow",keywords:["Apache APISIX","API Gateway","Plugin","workflow","traffic control"],description:"The workflow Plugin supports the conditional execution of user-defined actions to client traffic based a given set of rules. This provides a granular approach to implement complex traffic management."},o=void 0,l={unversionedId:"plugins/workflow",id:"plugins/workflow",isDocsHomePage:!1,title:"workflow",description:"The workflow Plugin supports the conditional execution of user-defined actions to client traffic based a given set of rules. This provides a granular approach to implement complex traffic management.",source:"@site/docs/apisix/plugins/workflow.md",sourceDirName:"plugins",slug:"/plugins/workflow",permalink:"/docs/apisix/next/plugins/workflow",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/workflow.md",tags:[],version:"current",frontMatter:{title:"workflow",keywords:["Apache APISIX","API Gateway","Plugin","workflow","traffic control"],description:"The workflow Plugin supports the conditional execution of user-defined actions to client traffic based a given set of rules. This provides a granular approach to implement complex traffic management."},sidebar:"docs",previous:{title:"client-control",permalink:"/docs/apisix/next/plugins/client-control"},next:{title:"zipkin",permalink:"/docs/apisix/next/plugins/zipkin"}},s=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Return Response HTTP Status Code Conditionally",id:"return-response-http-status-code-conditionally",children:[]},{value:"Apply Rate Limiting Conditionally by URI and Query Parameter",id:"apply-rate-limiting-conditionally-by-uri-and-query-parameter",children:[]},{value:"Apply Rate Limiting Conditionally by Consumers",id:"apply-rate-limiting-conditionally-by-consumers",children:[]}]}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/workflow"})),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow")," Plugin supports the conditional execution of user-defined actions to client traffic based a given set of rules, defined using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/api7/lua-resty-expr#operator-list"},"lua-resty-expr"),". This provides a granular approach to traffic management."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rules"),(0,r.kt)("td",{parentName:"tr",align:null},"array","[object]"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An array of one or more pairs of matching conditions and actions to be executed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rules.case"),(0,r.kt)("td",{parentName:"tr",align:null},"array","[array]"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An array of one or more matching conditions in the form of ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/api7/lua-resty-expr#operator-list"},"lua-resty-expr"),". For example, ",(0,r.kt)("inlineCode",{parentName:"td"},'{"arg_name", "==", "json"}'),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rules.actions"),(0,r.kt)("td",{parentName:"tr",align:null},"array","[object]"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"An array of actions to be executed when a condition is successfully matched. Currently, the array only supports one action, and it should be either ",(0,r.kt)("inlineCode",{parentName:"td"},"return"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"limit-count")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"limit-conn"),". When the action is configured to be ",(0,r.kt)("inlineCode",{parentName:"td"},"return"),", you can configure an HTTP status code to return to the client when the condition is matched. When the action is configured to be ",(0,r.kt)("inlineCode",{parentName:"td"},"limit-count"),", you can configure all options of the ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/next/plugins/limit-count"},(0,r.kt)("inlineCode",{parentName:"a"},"limit-count"))," plugin, except for ",(0,r.kt)("inlineCode",{parentName:"td"},"group"),". When the action is configured to be ",(0,r.kt)("inlineCode",{parentName:"td"},"limit-conn"),", you can configure all options of the ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/next/plugins/limit-conn"},(0,r.kt)("inlineCode",{parentName:"a"},"limit-conn"))," plugin.")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The examples below demonstrates how you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow")," Plugin for different scenarios."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can fetch the ",(0,r.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,r.kt)("h3",{id:"return-response-http-status-code-conditionally"},"Return Response HTTP Status Code Conditionally"),(0,r.kt)("p",null,"The following example demonstrates a simple rule with one matching condition and one associated action to return HTTP status code conditionally."),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow")," Plugin to return HTTP status code 403 when the request's URI path is ",(0,r.kt)("inlineCode",{parentName:"p"},"/anything/rejected"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "workflow-route",\n    "uri": "/anything/*",\n    "plugins": {\n      "workflow":{\n        "rules":[\n          {\n            "case":[\n              ["uri", "==", "/anything/rejected"]\n            ],\n            "actions":[\n              [\n                "return",\n                {"code": 403}\n              ]\n            ]\n          }\n        ]\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Send a request that matches none of the rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything/anything"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("p",null,"Send a request that matches the configured rule:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything/rejected"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 403 Forbidden")," response of following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"error_msg":"rejected by workflow"}\n')),(0,r.kt)("h3",{id:"apply-rate-limiting-conditionally-by-uri-and-query-parameter"},"Apply Rate Limiting Conditionally by URI and Query Parameter"),(0,r.kt)("p",null,"The following example demonstrates a rule with two matching conditions and one associated action to rate limit requests conditionally."),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow")," Plugin to apply rate limiting when the URI path is ",(0,r.kt)("inlineCode",{parentName:"p"},"/anything/rate-limit")," and the query parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," value is ",(0,r.kt)("inlineCode",{parentName:"p"},"v1"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "workflow-route",\n    "uri": "/anything/*",\n    "plugins":{\n      "workflow":{\n        "rules":[\n          {\n            "case":[\n              ["uri", "==", "/anything/rate-limit"],\n              ["arg_env", "==", "v1"]\n            ],\n            "actions":[\n              [\n                "limit-count",\n                {\n                  "count":1,\n                  "time_window":60,\n                  "rejected_code":429\n                }\n              ]\n            ]\n          }\n        ]\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Generate two consecutive requests that matches the second rule:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything/rate-limit?env=v1"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response and an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP 429 Too Many Requests")," response."),(0,r.kt)("p",null,"Generate requests that do not match the condition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything/anything?env=v1"\n')),(0,r.kt)("p",null,"You should receive ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," responses for all requests, as they are not rate limited."),(0,r.kt)("h3",{id:"apply-rate-limiting-conditionally-by-consumers"},"Apply Rate Limiting Conditionally by Consumers"),(0,r.kt)("p",null,"The following example demonstrates how to configure the Plugin to perform rate limiting based on the following specifications:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Consumer ",(0,r.kt)("inlineCode",{parentName:"li"},"john")," should have a quota of 5 requests within a 30-second window"),(0,r.kt)("li",{parentName:"ul"},"Consumer ",(0,r.kt)("inlineCode",{parentName:"li"},"jane")," should have a quota of 3 requests within a 30-second window"),(0,r.kt)("li",{parentName:"ul"},"All other consumers should have a quota of 2 requests within a 30-second window")),(0,r.kt)("p",null,"While this example will be using ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugins/key-auth"},(0,r.kt)("inlineCode",{parentName:"a"},"key-auth")),", you can easily replace it with other authentication Plugins."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"john"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "john"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," credential for the consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/john/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "john-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a second Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jane"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jane"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," credential for the consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jane/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jane-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jane-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a third Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jimmy"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jimmy"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," credential for the consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jimmy/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jimmy-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jimmy-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Plugins, with the desired rate limiting rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "workflow-route",\n    "uri": "/anything",\n    "plugins":{\n      "key-auth": {},\n      "workflow":{\n        "rules":[\n          {\n            "actions": [\n              [\n                "limit-count",\n                {\n                  "count": 5,\n                  "key": "consumer_john",\n                  "key_type": "constant",\n                  "rejected_code": 429,\n                  "time_window": 30\n                }\n              ]\n            ],\n            "case": [\n              [\n                "consumer_name",\n                "==",\n                "john"\n              ]\n            ]\n          },\n          {\n            "actions": [\n              [\n                "limit-count",\n                {\n                  "count": 3,\n                  "key": "consumer_jane",\n                  "key_type": "constant",\n                  "rejected_code": 429,\n                  "time_window": 30\n                }\n              ]\n            ],\n            "case": [\n              [\n                "consumer_name",\n                "==",\n                "jane"\n              ]\n            ]\n          },\n          {\n            "actions": [\n              [\n                "limit-count",\n                {\n                  "count": 2,\n                  "key": "$consumer_name",\n                  "key_type": "var",\n                  "rejected_code": 429,\n                  "time_window": 30\n                }\n              ]\n            ]\n          }\n        ]\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To verify, send 6 consecutive requests with ",(0,r.kt)("inlineCode",{parentName:"p"},"john"),"'s key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 6 | xargs -I{} curl "http://127.0.0.1:9080/anything" -H \'apikey: john-key\' -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that out of the 6 requests, 5 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    5, 429:    1\n")),(0,r.kt)("p",null,"Send 6 consecutive requests with ",(0,r.kt)("inlineCode",{parentName:"p"},"jane"),"'s key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 6 | xargs -I{} curl "http://127.0.0.1:9080/anything" -H \'apikey: jane-key\' -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that out of the 6 requests, 3 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    3, 429:    3\n")),(0,r.kt)("p",null,"Send 3 consecutive requests with ",(0,r.kt)("inlineCode",{parentName:"p"},"jimmy"),"'s key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 3 | xargs -I{} curl "http://127.0.0.1:9080/anything" -H \'apikey: jimmy-key\' -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that out of the 3 requests, 2 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    2, 429:    1\n")))}u.isMDXComponent=!0}}]);