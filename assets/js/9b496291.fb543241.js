"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[21348],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(25773),i=(n(27378),n(35318));const o={title:"Fixing duplicate API requests",authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258"}],keywords:["APISIX","Idempotency","IETF","specification"],description:'The first rule of distributed systems is "Don\u2019t distribute your system". Designing distributed systems right is infamously hard for multiple reasons.\n',tags:["Community"],image:"https://static.apiseven.com/uploads/2024/03/28/XObjRS46_stormtrooper-2899993.jpg"},a=void 0,s={permalink:"/blog/2024/04/04/fix-duplicate-api-requests",source:"@site/blog/2024/04/04/fix-duplicate-api-requests.md",title:"Fixing duplicate API requests",description:'The first rule of distributed systems is "Don\u2019t distribute your system". Designing distributed systems right is infamously hard for multiple reasons.\n',date:"2024-04-04T00:00:00.000Z",formattedDate:"April 4, 2024",tags:[{label:"Community",permalink:"/blog/tags/community"}],readingTime:3.215,truncated:!0,authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258",imageURL:"https://avatars.githubusercontent.com/u/752258"}],prevItem:{title:"How to build APISIX in SLES 15",permalink:"/blog/2024/04/05/build-apisix-in-sles15"},nextItem:{title:"Monthly Report (March 01 - March 31)",permalink:"/blog/2024/04/01/monthly-report"}},l={authorsImageUrls:[void 0]},p=[{value:"The idempotency concept",id:"the-idempotency-concept",children:[],level:2},{value:"A possible solution",id:"a-possible-solution",children:[],level:2},{value:"Error scenarios",id:"error-scenarios",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://blog.frankel.ch/fix-duplicate-api-requests/"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'The first rule of distributed systems is "Don\u2019t distribute your system". Designing distributed systems right is infamously hard for multiple reasons.')),(0,i.kt)("h2",{id:"the-idempotency-concept"},"The idempotency concept"),(0,i.kt)("p",null,"For example, a call to a function can succeed or fail in non-distributed systems. Once you move the called function to a remote component, a third option appears: you call the remote function but get no response from the component. At this point, it\u2019s impossible to know whether the call reached the component or not, ",(0,i.kt)("em",{parentName:"p"},"i.e."),", whether the problem occurred on the way to or the way back."),(0,i.kt)("p",null,'The only choice is to resend the request again. It\u2019s a non-issue for reads; for calls that update the remote state, it\u2019s "complicated." We need to describe the concept of ',(0,i.kt)("em",{parentName:"p"},"idempotence"),":"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application."),(0,i.kt)("p",{parentName:"blockquote"},"\u2014- ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Idempotence"},"Idempotence on Wikipedia"))),(0,i.kt)("p",null,"In the realm of HTTP APIs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GET"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"PUT"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"DELETE"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"HEAD"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"OPTIONS"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"TRACE")," are idempotent. For example, if you repeatedly delete an entity from the system, whether the said entity exists or not, the end state will be the same: there will be no entity."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"POST")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"PATCH")," are not idempotent"),". For example, posting multiple times a new entity will create that many new entities.")),(0,i.kt)("h2",{id:"a-possible-solution"},"A possible solution"),(0,i.kt)("p",null,"Imagine that the client sending a request sends a unique key along. The server keeps track of key-request pairs. Overall, two things can happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The server already has a record of such a pair and discards the request"),(0,i.kt)("li",{parentName:"ul"},"The server has no such previous record and stores the pair")),(0,i.kt)("p",null,"It\u2019s precisely the idea behind the IETF specification ",(0,i.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04"},"The Idempotency-Key HTTP Header Field"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"Idempotency-Key")," HTTP header\u2019s value is a string; the specification uses a UUID as an example. It\u2019s the client\u2019s responsibility to generate such a value, which must be unique."),(0,i.kt)("p",null,"The spec describes the following flow:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.apiseven.com/uploads/2024/03/29/tZPye2d3_idempotency-key-sequence.png",alt:"Sequence diagram of the Idempotency Key"})),(0,i.kt)("p",null,"The specification mentions the server can optionally fingerprint the request, ",(0,i.kt)("em",{parentName:"p"},"i.e."),", hash it, and store the hash instead."),(0,i.kt)("h2",{id:"error-scenarios"},"Error scenarios"),(0,i.kt)("p",null,"The nominal path is pretty straightforward, but the specification also defines three possible error scenarios that can happen."),(0,i.kt)("p",null,"Here they are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The request doesn't provide the idempotency key for a documented idempotent operation requiring this header/400:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'HTTP/1.1 400 Bad Request\nContent-Type: application/problem+json\nContent-Language: en\n{\n  "type": "https://developer.example.com/idempotency",\n  "title": "Idempotency-Key is missing",\n  "detail": "This operation is idempotent and it requires correct usage of Idempotency Key.",\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Attempt to reuse an idempotency key with a different request payload/422:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'HTTP/1.1 422 Unprocessable Content\nContent-Type: application/problem+json\nContent-Language: en\n{\n  "type": "https://developer.example.com/idempotency",\n  "title": "Idempotency-Key is already used",\n  "detail": "This operation is idempotent and it requires\n  correct usage of Idempotency Key. Idempotency Key MUST not be\n  reused across different payloads of this operation.",\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Request is retried while the original request is still being processed/409:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'HTTP/1.1 409 Conflict\nContent-Type: application/problem+json\nContent-Language: en\n{\n  "type": "https://developer.example.com/idempotency",\n  "title": "A request is outstanding for this Idempotency-Key",\n  "detail": "A request with the same Idempotency-Key for the\n             same operation is being processed or is outstanding."\n}\n')))),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Distributed systems are complex in part because if a call to a remote component times out, it\u2019s impossible to know whether it reached the said component. The only option is to repeat the call, but we risk executing a non-idempotent operation twice. In the realm of APIs, we can rely on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Idempotency-Key")," HTTP Header, an IETF specification currently in draft."),(0,i.kt)("p",null,"From an architect\u2019s point of view, it makes sense to factor the behavior described in the above sequence diagram into a component, ",(0,i.kt)("em",{parentName:"p"},"i.e."),", an API Gateway. In a future post, I\u2019ll try implementing the behavior in Apache APISIX."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"To go further:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-04"},"Idempotency-Key HTTP Header Field"))))}u.isMDXComponent=!0}}]);