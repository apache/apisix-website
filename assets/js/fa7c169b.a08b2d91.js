"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[75029],{35318:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(27378);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),m=i,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},64718:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(25773),i=(a(27378),a(35318));const r={title:"Down the rabbit hole of an Apache APISIX plugin",authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258"}],keywords:["DevOps","Analysis","plugin","Lua"],description:"My demo, Evolving your APIs, features a custom Apache APISIX plugin. I believe that the process of creating a custom plugin is relatively well-documented. However, I wanted to check the parameters of the `_M.access(conf, ctx)` function, especially the `ctx` one.\n",tags:["Ecosystem"],image:"https://static.apiseven.com/uploads/2023/09/22/7BPpDQyu_falling-5472195.jpg"},l=void 0,o={permalink:"/blog/2023/09/28/rabbit-hole-apisix-plugin",source:"@site/blog/2023/09/28/rabbit-hole-apisix-plugin.md",title:"Down the rabbit hole of an Apache APISIX plugin",description:"My demo, Evolving your APIs, features a custom Apache APISIX plugin. I believe that the process of creating a custom plugin is relatively well-documented. However, I wanted to check the parameters of the `_M.access(conf, ctx)` function, especially the `ctx` one.\n",date:"2023-09-28T00:00:00.000Z",formattedDate:"September 28, 2023",tags:[{label:"Ecosystem",permalink:"/blog/tags/ecosystem"}],readingTime:4.55,truncated:!0,authors:[{name:"Nicolas Fr\xe4nkel",title:"Author",url:"https://github.com/nfrankel",image_url:"https://avatars.githubusercontent.com/u/752258",imageURL:"https://avatars.githubusercontent.com/u/752258"}],prevItem:{title:"Resizing images on-the-fly",permalink:"/blog/2023/10/05/resize-images-on-the-fly"},nextItem:{title:"Biweekly Report (September 11 - September 24)",permalink:"/blog/2023/09/26/bi-weekly-report"}},p={authorsImageUrls:[void 0]},s=[{value:"The context",id:"the-context",children:[],level:2},{value:"Overview of the <code>ctx</code> parameter",id:"overview-of-the-ctx-parameter",children:[],level:2},{value:"Matched route",id:"matched-route",children:[],level:2},{value:"Plugins",id:"plugins",children:[],level:2},{value:"A final trick",id:"a-final-trick",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],c={toc:s};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"My demo, Evolving your APIs, features a custom Apache APISIX plugin. I believe that the process of ",(0,i.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/plugin-develop/"},"creating a custom plugin")," is relatively well-documented. However, I wanted to check the parameters of the ",(0,i.kt)("inlineCode",{parentName:"p"},"_M.access(conf, ctx)")," function, especially the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," one.")),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://blog.frankel.ch/rabbit-hole-apisix-plugin/"})),(0,i.kt)("p",null,"The documentation states:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," parameter caches data information related to the request. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"core.log.warn(core.json.encode(ctx, true))")," to output it to ",(0,i.kt)("inlineCode",{parentName:"p"},"error.log")," for viewing.")),(0,i.kt)("p",null,"Unfortunately, ",(0,i.kt)("inlineCode",{parentName:"p"},"core.log")," ultimately depends on nginx's logging, and its buffer is limited in size. Thanks to my colleague ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/shreemaan_abhi"},"Abhishek")," for finding ",(0,i.kt)("a",{parentName:"p",href:"http://nginx.org/en/docs/dev/development_guide.html#logging"},"the info"),". For this reason, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," display is (heavily) truncated. I had to log data bit by bit; however, it was instructive."),(0,i.kt)("h2",{id:"the-context"},"The context"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," parameter is a Lua table. In Lua, table data structures are used for regular indexed access (akin to arrays) and key access (like hash maps). A single ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," instance is used for each ",(0,i.kt)("em",{parentName:"p"},"request"),"."),(0,i.kt)("p",null,"The Apache APISIX engine reads and writes data in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," table. It's responsible for forwarding the latter from plugin to plugin. In turn, each plugin can also read and write data."),(0,i.kt)("p",null,"I resorted to a custom plugin to conditionally apply rate-limiting in the demo. The custom plugin is a copy-paste of the ",(0,i.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/plugins/limit-count/"},"limit-count")," plugin. Note that the analysis is done in a specific context. Refrain from assuming the same data is available in your own. However, it should be a good starting point."),(0,i.kt)("h2",{id:"overview-of-the-ctx-parameter"},"Overview of the ",(0,i.kt)("inlineCode",{parentName:"h2"},"ctx")," parameter"),(0,i.kt)("p",null,"The data available in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," parameter is overwhelming. To better understand it, we shall go from the more general to the more particular. Let's start from the overview."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.apiseven.com/uploads/2023/09/22/noheoMDj_ctx-overview.svg",alt:"Overview of the ctx parameter"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_plugin_name"),": self-explanatory"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"conf_id"),": either route ID or service ID"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"proxy_rewrite_regex_uri_capture"),": data set by the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/apisix/blob/a82a2f3c439119ade45b4afffb5a251cd7bb65d2/apisix/plugins/proxy-rewrite.lua#L46C2"},"proxy-rewrite")," plugin."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"route_id"),": route ID the plugin is applied to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"route_name"),": route name the plugin is applied to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"real_current_req_matched_path"),": URI for which matching was done"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"conf_version"),": etcd-related revision - see below"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"var"),": references the ",(0,i.kt)("inlineCode",{parentName:"li"},"ctx")," object and a cache of data about the request, ",(0,i.kt)("em",{parentName:"li"},"e.g."),", URI, method, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"matched_route"),": the route that was matched based on host header/URI and/or ",(0,i.kt)("inlineCode",{parentName:"li"},"remote_addr"),"; see below"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"plugins"),": pairs of plugin/data - see below")),(0,i.kt)("h2",{id:"matched-route"},"Matched route"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"matched_route")," row is a complex data tree that deserves a detailed description."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.apiseven.com/uploads/2023/09/22/fYJFkdDM_matched-route.svg",alt:"Matched route row"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"key"),": access key in the ",(0,i.kt)("inlineCode",{parentName:"p"},"etcd")," datastore")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"created_index"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedIndex")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orig_modifiedIndex"),": these attributes are related to etcd and how it stores metadata associated with revisions. Different revisions of a single key are logged in the ",(0,i.kt)("inlineCode",{parentName:"p"},"create_revision")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pre_revision")," fields. The former points to the initial created row ID and is constant throughout the changes, while the latter points to the row ID of the previous value."),(0,i.kt)("p",{parentName:"li"},"  Apache APISIX maps them respectively to the ",(0,i.kt)("inlineCode",{parentName:"p"},"created_index")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedIndex")," values and uses them for caching. In many places, ",(0,i.kt)("inlineCode",{parentName:"p"},"created_index")," is later assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"conf_version")," - see above.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"prev_plugin_config_ver"),": after a plugin configuration is merged with the route configuration, the current ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedIndex")," is assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"prev_plugin_config_ver"),". It allows saving CPU cycles if one attempts to apply the same plugin config later in the call chain.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"update_count"),": replaced with ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedIndex"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"has_domain"),": whether the matched route references an upstream with a domain, ",(0,i.kt)("em",{parentName:"p"},"e.g."),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http://httpbin.org"),", or not, ",(0,i.kt)("em",{parentName:"p"},"e.g."),", ",(0,i.kt)("inlineCode",{parentName:"p"},"192.168.0.1"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"orig_plugins"),": temporary placeholder used if a route has plugins defined directly and reference a plugins config")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"clean_handlers"),": list of functions scheduled to be called after a plugin has been created")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"value")," has  keys related to how the route was created, as well as a couple of others:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://apisix:9180/apisix/admin/routes/2 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n  "name": "Versioned Route to Old API",\n  "methods": ["GET"],\n  "uris": ["/v1/hello", "/v1/hello/", "/v1/hello/*"],\n  "upstream_id": 1,\n  "plugin_config_id": 1\n}\'\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"priority"),": since we didn't set it, it has a default value 0. ",(0,i.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/admin-api/#request-body-parameters"},"Priority")," is essential when multiple routes match to determine which one to apply.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"create_time"),": self-explanatory")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"update_time"),": self-explanatory")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"plugins"),": references to plugin's function")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"status"),": I couldn't find this"))),(0,i.kt)("h2",{id:"plugins"},"Plugins"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," value contains plugin-related data in an indexed-based Lua table. Each plugin has two entries: the first (even-indexed) entry contains data related to the plugin in general, ",(0,i.kt)("em",{parentName:"p"},"e.g."),", its schema; while the second (odd-index) entry data is related to its configuration in the current route."),(0,i.kt)("p",null,"My setup has two plugins, hence four entries, but to keep things simpler, I kept only a single plugin in the following diagram:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.apiseven.com/uploads/2023/09/22/eEbKgUOu_plugins.svg",alt:"Plugins"})),(0,i.kt)("p",null,"Key values match directly to the plugin schema and configuration; you can check the whole descriptions directly in the plugin."),(0,i.kt)("h2",{id:"a-final-trick"},"A final trick"),(0,i.kt)("p",null,"I initially had issues printing the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," table because of the nginx buffer limit and had to do it bit by bit. However, you can print it to a file."),(0,i.kt)("p",null,"Here's the function, courtesy of my colleague ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bzp2010"},"Zeping Bai"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local file, err = io.open("conf/ctx.json", "w+")\nif not file then\n    ngx.log(ngx.ERR, "failed to open file: ", err)\n    return\nend\nfile.write(core.json.encode(ctx, true) .. "\\n")\nfile.close()\n')),(0,i.kt)("p",null,"Here's the whole ",(0,i.kt)("a",{parentName:"p",href:"https://www.plantuml.com/plantuml/svg/xLfVSzis4d_Nfy3myj2ciaKfjc9vEhrwNFVYQHff4YSplKRbGCHAH4m2AlxuJpt-xaVIa49lQCDmgaiVel6BYH-0tovs5mjWVzI6AlD1Iz6vwf3o5oNBt2wuI0Gj8DedaHNKccmhvmKtKVS6aqenJpYhcWUhRqibBouJ1UUA6qWKBE0YiOedALqQgq2Nu9iPQdHSzUsTzNiPvBcint0j_QhbvclzyTgDhwGrW2Pr7rTKtu7IN0fWv7NrdHX9nZaZ1vFZDSbQjehBxwiP6woS75mgRYvBJ3-EzxgtMvryrMnpAr9JJhTFueldWvtHxjxk7jtPsujGbxCRLb69s-wZDfrcKD2rQX0HkGHbU5Dr66DrfMgQ9mh-jA1DhN4hD9q3weGwCj2fuajJ4wl78NWSmeKsG5cNdBmuVaFAltT7htyZRr-zEVZvQBif9HxSN2vh3Ssap86A-w0CvjJcfaJFQQwX5NZTtZ_Af3RtIxcane2g9VpZztXhHBV-EjZwxzRszBjlzj-_PrVzxkxrj_z-iYReLvI0SrBDI-PI4RlKHW4j7gAB4id58WeIq2f-ltm5lNW9Oc6o4hOJZuRTXwdY_VlUzjD0eKikZvJvFcJ1nLg0Vf1k2Z2PPFUh1uGjcgxUZlhFqGccY24lZWv-yc4cupSdNinRB-IdevT79qS-rA-_78vV-a27uyblte76xxoJZISdn-DNRxp2lHvFVZv-vLNKo_7XBpxCsrSFGKqEJWvV-40dhmyEZw8xCTDGE_OxZDiBYQet8MUeGSQTb9tGhX2yExHlQHZfbMNTcSWvSTidcLsIr6eZ2_uNC28L0zNKZa-VN1XOWC8wyUW6ExTIKYKAz58A3GyJJGeOprr4yF_y0_gZl5_03R2Gim-GcWUoyAAcdxLCZ6iwo_thqveuVDRCSvuRK8-nUTULC32W2Yv0a_CCJ0QAc0oS5n01m3Gnaio0m0MarW0Zr11bXU45X3W4LOfUUgJj-FGGRX6Uz0ee0uN3YpzJSFtgRC6baqWNuJxva3MaZF6A1yqdpTXOvvLuVh-gF3rSyd9h9fJS1uLjZs2ju71HDY4IpZ0d0HAYNvca_x4__Uw9lsEu8OM7sSq4_t0dtZ1hOOiPg4Uo3kurxMncV3yoGCkH1lD_yxYl7lVLuxvwd892dk4iqUywnmOAZzTuagw0ZhoQB81Yw2dIUs_ZVFNlNg9EE29WYQ--VEhbZvRXKN9JqH5FiE5eUDtTF3iSzJOHZQQRDdLFwpJeQBL-7N4MvGzmWsudFA3v0vZ_JEV8af9i-z3XTdWTVlDiCcg8jZDjkB46o5p9WgGv1s4-kPdkaboUWoBhYwkoiwXHxl25JzfuSJ5HVwmAZKtHarGM1GXJZMGohadvHqb1rMajYhIAS55D06nrtU2UYZht48m4BM1z_xYrUgj2e7ASz3HnmxM_OyL3kXD77JGD2W3UzoTyzCQctn8PwoV1RxQVVjkcsDwJ_ctnfuYX_paFaQ5f2bgtAu76pzWmZW8Ux2eTS0KCITPKlRJYhlqjCho0v9mB9iy_DT1fg2dwRnlGNNDagdkwZ_Bl03pRtRkBx2bS9cx-ptw0EQCgwdeXIIgB6HUqMgNDNUVZLycQt2EkpR1U_WOcTCbBhOUHQTYKPwKkqjngVWQ_Si6BUjMGitXkylsaa1VyO-Wek0cqIIePU3TansOGX_3ftlk4wuRS7OqUP0YxyRCW-MYUo_E4mK9HHjt6UlN57-zrLfAgYqgIFwqqD0dnco1kHbbud44KUk7di-c7xjBdDn1C51JIG48PK-7PqCRpcBRQe_0qvZaTiZY-knodxqyVdFQZL0fj2r19pSoXKSHVXsZKZeBmi14uy5QAjyAsyBGpACE4ny5HwkLrEQCi1YCdY2OvqBf8QC6r0KMe8PanIxtVwvLIQtwnBTMYjsusaYp0a4jfLLL_HOmy1K6eO0J41tb9hAY902DfILyxeV4MqLoYJcDxZ-gSCxLALObdKb2JPYNL9JLPMrrPj08eQStj41-b2gW1TYmON5GJDfGRISKNoSUIiQlhHbjQ1Q0aeuBbe3vfBIJZS_vns6WO_wjVii5svNJNgudftg09iKj63IHhLJIQbWhE7B6oNSnBccVrGWu73LH6TS9aGJao29THvHRjTYXTndQwEbybdAtfu7gSHcKTAh51cJlgtL0oxesYmAU9wcZqhD-MgA9ZK6lFdVvEt1gAa7qabGzNKWz7WxsTGNyunBvbgB6wHI-tLwbLTVxoHUmUjwiWaSKWhhl3FGnJ_8vrmexJtjYxl_Mf_v3cN0jxoJ3krBXcbQaBryY7ga1vsu-JbAPPYq4t3gOuDBGL4qQvJ6bU_OC1pMEkTpHVUtFxBN7zvuFjGRmTRvVojTDVbRkXSZNacMvQDsUhubSYLBYKKKE_FvESaQS_L6v1ozyiXNGu6iLHirDgwYZslO8vA10fQ3AZwMbT3g6aDEJc3Fg3AzdjN7SwFu9WLLtn_m00"},"data representation with PlantUML"),"."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"In this post, I described the structure of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctx")," parameter in the ",(0,i.kt)("inlineCode",{parentName:"p"},"access()")," function. While specific entries vary from configuration to configuration, it gives a good entry point into data manipulated by plugins."),(0,i.kt)("p",null,"It's also a good reminder that even if you're not fluent in a language or a codebase, you can get quite a lot of information by logging some variables."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"To go further:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://apisix.apache.org/docs/apisix/plugin-develop/#ctx-parameter"},"ctx parameter"))))}u.isMDXComponent=!0}}]);