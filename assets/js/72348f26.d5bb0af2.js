"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[59293],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),k=r,c=m["".concat(p,".").concat(k)]||m[k]||d[k]||l;return n?a.createElement(c,i(i({ref:t},u),{},{components:n})):a.createElement(c,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59077:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"jwt-auth",keywords:["Apache APISIX","API Gateway","Plugin","JWT Auth","jwt-auth"],description:"The jwt-auth Plugin supports the use of JSON Web Token (JWT) as a mechanism for clients to authenticate themselves before accessing Upstream resources."},i=void 0,o={unversionedId:"plugins/jwt-auth",id:"version-3.14/plugins/jwt-auth",isDocsHomePage:!1,title:"jwt-auth",description:"The jwt-auth Plugin supports the use of JSON Web Token (JWT) as a mechanism for clients to authenticate themselves before accessing Upstream resources.",source:"@site/docs-apisix_versioned_docs/version-3.14/plugins/jwt-auth.md",sourceDirName:"plugins",slug:"/plugins/jwt-auth",permalink:"/docs/apisix/plugins/jwt-auth",editUrl:"/edit#https://github.com/apache/apisix/edit/release/3.14/docs/en/latest/plugins/jwt-auth.md",tags:[],version:"3.14",frontMatter:{title:"jwt-auth",keywords:["Apache APISIX","API Gateway","Plugin","JWT Auth","jwt-auth"],description:"The jwt-auth Plugin supports the use of JSON Web Token (JWT) as a mechanism for clients to authenticate themselves before accessing Upstream resources."},sidebar:"version-3.14/docs",previous:{title:"key-auth",permalink:"/docs/apisix/plugins/key-auth"},next:{title:"jwe-decrypt",permalink:"/docs/apisix/plugins/jwe-decrypt"}},p=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Use JWT for Consumer Authentication",id:"use-jwt-for-consumer-authentication",children:[]},{value:"Carry JWT in Request Header, Query String, or Cookie",id:"carry-jwt-in-request-header-query-string-or-cookie",children:[]},{value:"Manage Secrets in Environment Variables",id:"manage-secrets-in-environment-variables",children:[]},{value:"Manage Secrets in Secret Manager",id:"manage-secrets-in-secret-manager",children:[]},{value:"Sign JWT with RS256 Algorithm",id:"sign-jwt-with-rs256-algorithm",children:[]},{value:"Add Consumer Custom ID to Header",id:"add-consumer-custom-id-to-header",children:[]},{value:"Rate Limit with Anonymous Consumer",id:"rate-limit-with-anonymous-consumer",children:[]}]}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/jwt-auth"})),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Plugin supports the use of ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JSON Web Token (JWT)")," as a mechanism for clients to authenticate themselves before accessing Upstream resources."),(0,r.kt)("p",null,"Once enabled, the Plugin exposes an endpoint to create JWT credentials by ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/terminology/consumer"},"Consumers"),". The process generates a token that client requests should carry to identify themselves to APISIX. The token can be included in the request URL query string, request header, or cookie. APISIX will then verify the token to determine if a request should be allowed or denied to access Upstream resources."),(0,r.kt)("p",null,"When a Consumer is successfully authenticated, APISIX adds additional headers, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Consumer-Username"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Credential-Indentifier"),", and other Consumer custom headers if configured, to the request, before proxying it to the Upstream service. The Upstream service will be able to differentiate between consumers and implement additional logics as needed. If any of these values is not available, the corresponding header will not be added."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,"For Consumer/Credential:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"non-empty"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique key for a Consumer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secret"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"non-empty"),(0,r.kt)("td",{parentName:"tr",align:null},"Shared key used to sign and verify the JWT when the algorithm is symmetric. Required when using ",(0,r.kt)("inlineCode",{parentName:"td"},"HS256")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"HS512")," as the algorithm. This field supports saving the value in Secret Manager using the ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/terminology/secret"},"APISIX Secret")," resource.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"public_key"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"True if ",(0,r.kt)("inlineCode",{parentName:"td"},"RS256")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"ES256")," is set for the ",(0,r.kt)("inlineCode",{parentName:"td"},"algorithm")," attribute."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"RSA or ECDSA public key. This field supports saving the value in Secret Manager using the ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/terminology/secret"},"APISIX Secret")," resource.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"algorithm"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"HS256"),(0,r.kt)("td",{parentName:"tr",align:null},'["HS256","HS512","RS256","ES256"]'),(0,r.kt)("td",{parentName:"tr",align:null},"Encryption algorithm.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exp"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"86400"),(0,r.kt)("td",{parentName:"tr",align:null},"[1,...]"),(0,r.kt)("td",{parentName:"tr",align:null},"Expiry time of the token in seconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"base64_secret"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Set to true if the secret is base64 encoded.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lifetime_grace_period"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"[0,...]"),(0,r.kt)("td",{parentName:"tr",align:null},"Grace period in seconds. Used to account for clock skew between the server generating the JWT and the server validating the JWT.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key_claim_name"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"The claim in the JWT payload that identifies the associated secret, such as ",(0,r.kt)("inlineCode",{parentName:"td"},"iss"),".")))),(0,r.kt)("p",null,"NOTE: ",(0,r.kt)("inlineCode",{parentName:"p"},'encrypt_fields = {"secret"}')," is also defined in the schema, which means that the field will be stored encrypted in etcd. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/plugin-develop#encrypted-storage-fields"},"encrypted storage fields"),"."),(0,r.kt)("p",null,"For Routes or Services:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"header"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"authorization"),(0,r.kt)("td",{parentName:"tr",align:null},"The header to get the token from.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"jwt"),(0,r.kt)("td",{parentName:"tr",align:null},"The query string to get the token from. Lower priority than header.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cookie"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"jwt"),(0,r.kt)("td",{parentName:"tr",align:null},"The cookie to get the token from. Lower priority than query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hide_credentials"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, do not pass the header, query, or cookie with JWT to Upstream services.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key_claim_name"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the JWT claim that contains the user key (corresponds to Consumer's key attribute).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"anonymous_consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Anonymous Consumer name. If configured, allow anonymous users to bypass the authentication.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"store_in_ctx"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Set to true will store the JWT payload in the request context (",(0,r.kt)("inlineCode",{parentName:"td"},"ctx.jwt_auth_payload"),"). This allows lower-priority plugins that run afterwards on the same request to retrieve and use the JWT token.")))),(0,r.kt)("p",null,"You can implement ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," with ",(0,r.kt)("a",{parentName:"p",href:"https://www.vaultproject.io/"},"HashiCorp Vault")," to store and fetch secrets and RSA keys pairs from its ",(0,r.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/vault/docs/secrets/kv"},"encrypted KV engine")," using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/terminology/secret"},"APISIX Secret")," resource."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The examples below demonstrate how you can work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Plugin for different scenarios."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can fetch the ",(0,r.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,r.kt)("h3",{id:"use-jwt-for-consumer-authentication"},"Use JWT for Consumer Authentication"),(0,r.kt)("p",null,"The following example demonstrates how to implement JWT for Consumer key authentication."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Credential for the consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-jwt-auth",\n    "plugins": {\n      "jwt-auth": {\n        "key": "jack-key",\n        "secret": "jack-hs256-secret-that-is-very-long"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Plugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "jwt-route",\n    "uri": "/headers",\n    "plugins": {\n      "jwt-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To issue a JWT for ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),", you could use ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder")," or other utilities. If you are using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder"),", do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fill in ",(0,r.kt)("inlineCode",{parentName:"p"},"HS256")," as the algorithm.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update the secret in the ",(0,r.kt)("strong",{parentName:"p"},"Valid secret")," section to be ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-hs256-secret-that-is-very-long"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update payload with Consumer key ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key"),"; and add ",(0,r.kt)("inlineCode",{parentName:"p"},"exp")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nbf")," in UNIX timestamp."),(0,r.kt)("p",{parentName:"li"},"Your payload should look similar to the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "jack-key",\n  "nbf": 1729132271\n}\n')))),(0,r.kt)("p",null,"Copy the generated JWT and save to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU\n")),(0,r.kt)("p",null,"Send a request to the Route with the JWT in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/headers" -H "Authorization: ${jwt_token}"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "headers": {\n    "Accept": "*/*",\n    "Authorization": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3MjY2NDk2NDAsImtleSI6ImphY2sta2V5In0.kdhumNWrZFxjUvYzWLt4lFr546PNsr9TXuf0Az5opoM",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66ea951a-4d740d724bd2a44f174d4daf",\n    "X-Consumer-Username": "jack",\n    "X-Credential-Identifier": "cred-jack-jwt-auth",\n    "X-Forwarded-Host": "127.0.0.1"\n  }\n}\n')),(0,r.kt)("p",null,"Send a request with an invalid token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/headers" -H "Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3MjY2NDk2NDAsImtleSI6ImphY2sta2V5In0.kdhumNWrZFxjU_random_random"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"message":"failed to verify jwt"}\n')),(0,r.kt)("h3",{id:"carry-jwt-in-request-header-query-string-or-cookie"},"Carry JWT in Request Header, Query String, or Cookie"),(0,r.kt)("p",null,"The following example demonstrates how to accept JWT in specified header, query string, and cookie."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-jwt-auth",\n    "plugins": {\n      "jwt-auth": {\n        "key": "jack-key",\n        "secret": "jack-hs256-secret-that-is-very-long"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," plugin, and specify the request parameters carrying the token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "jwt-route",\n    "uri": "/get",\n    "plugins": {\n      "jwt-auth": {\n        "header": "jwt-auth-header",\n        "query": "jwt-query",\n        "cookie": "jwt-cookie"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To issue a JWT for ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),", you could use ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder")," or other utilities. If you are using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder"),", do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fill in ",(0,r.kt)("inlineCode",{parentName:"p"},"HS256")," as the algorithm.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update the secret in the ",(0,r.kt)("strong",{parentName:"p"},"Valid secret")," section to be ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-hs256-secret-that-is-very-long"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update payload with Consumer key ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key"),"; and add ",(0,r.kt)("inlineCode",{parentName:"p"},"exp")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nbf")," in UNIX timestamp."),(0,r.kt)("p",{parentName:"li"},"Your payload should look similar to the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "jack-key",\n  "nbf": 1729132271\n}\n')))),(0,r.kt)("p",null,"Copy the generated JWT and save to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU\n")),(0,r.kt)("h4",{id:"verify-with-jwt-in-header"},"Verify With JWT in Header"),(0,r.kt)("p",null,"Sending request with JWT in the header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get" -H "jwt-auth-header: ${jwt_token}"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "127.0.0.1",\n    "Jwt-Auth-Header": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU",\n    ...\n  },\n  ...\n}\n')),(0,r.kt)("h4",{id:"verify-with-jwt-in-query-string"},"Verify With JWT in Query String"),(0,r.kt)("p",null,"Sending request with JWT in the query string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get?jwt-query=${jwt_token}"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {\n    "jwt-query": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU"\n  },\n  "headers": {\n    "Accept": "*/*",\n    ...\n  },\n  "origin": "127.0.0.1, 183.17.233.107",\n  "url": "http://127.0.0.1/get?jwt-query=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJrZXkiOiJ1c2VyLWtleSIsImV4cCI6MTY5NTEyOTA0NH0.EiktFX7di_tBbspbjmqDKoWAD9JG39Wo_CAQ1LZ9voQ"\n}\n')),(0,r.kt)("h4",{id:"verify-with-jwt-in-cookie"},"Verify With JWT in Cookie"),(0,r.kt)("p",null,"Sending request with JWT in the cookie:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get" --cookie jwt-cookie=${jwt_token}\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Cookie": "jwt-cookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU",\n    ...\n  },\n  ...\n}\n')),(0,r.kt)("h3",{id:"manage-secrets-in-environment-variables"},"Manage Secrets in Environment Variables"),(0,r.kt)("p",null,"The following example demonstrates how to save ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Consumer key to an environment variable and reference it in configuration."),(0,r.kt)("p",null,"APISIX supports referencing system and user environment variables configured through the ",(0,r.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/ngx_core_module.html#env"},"NGINX ",(0,r.kt)("inlineCode",{parentName:"a"},"env")," directive"),"."),(0,r.kt)("p",null,"Save the key to an environment variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export JACK_JWT_SECRET=jack-hs256-secret-that-is-very-long\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you are running APISIX in Docker, you should set the environment variable using the ",(0,r.kt)("inlineCode",{parentName:"p"},"-e")," flag when starting the container."))),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Credential for the Consumer and reference the environment variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-jwt-auth",\n    "plugins": {\n      "jwt-auth": {\n        "key": "jack-key",\n        "secret": "$env://JACK_JWT_SECRET"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," enabled:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "jwt-route",\n    "uri": "/get",\n    "plugins": {\n      "jwt-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To issue a JWT for ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),", you could use ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder")," or other utilities. If you are using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder"),", do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fill in ",(0,r.kt)("inlineCode",{parentName:"p"},"HS256")," as the algorithm.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update the secret in the ",(0,r.kt)("strong",{parentName:"p"},"Valid secret")," section to be ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-hs256-secret-that-is-very-long"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update payload with Consumer key ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key"),"; and add ",(0,r.kt)("inlineCode",{parentName:"p"},"exp")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nbf")," in UNIX timestamp."),(0,r.kt)("p",{parentName:"li"},"Your payload should look similar to the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "jack-key",\n  "nbf": 1729132271\n}\n')))),(0,r.kt)("p",null,"Copy the generated JWT and save to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU\n")),(0,r.kt)("p",null,"Sending request with JWT in the header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get" -H "Authorization: ${jwt_token}"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("h3",{id:"manage-secrets-in-secret-manager"},"Manage Secrets in Secret Manager"),(0,r.kt)("p",null,"The following example demonstrates how to manage ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," consumer key in ",(0,r.kt)("a",{parentName:"p",href:"https://www.vaultproject.io"},"HashiCorp Vault")," and reference it in plugin configuration."),(0,r.kt)("p",null,"Start a Vault development server in Docker:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -d \\\n  --name vault \\\n  -p 8200:8200 \\\n  --cap-add IPC_LOCK \\\n  -e VAULT_DEV_ROOT_TOKEN_ID=root \\\n  -e VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200 \\\n  vault:1.9.0 \\\n  vault server -dev\n")),(0,r.kt)("p",null,"APISIX currently supports ",(0,r.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/vault/docs/secrets/kv#kv-version-1"},"Vault KV engine version 1"),". Enable it in Vault:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -i vault sh -c \"VAULT_TOKEN='root' VAULT_ADDR='http://0.0.0.0:8200' vault secrets enable -path=kv -version=1 kv\"\n")),(0,r.kt)("p",null,"You should see a response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Success! Enabled the kv secrets engine at: kv/\n")),(0,r.kt)("p",null,"Create a Secret and configure the Vault address and other connection information. Update the Vault address accordingly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/secrets/vault/jwt" -X PUT \\\n  -H "X-API-KEY: ${ADMIN_API_KEY}" \\\n  -d \'{\n    "uri": "https://127.0.0.1:8200",\n    "prefix": "kv/apisix",\n    "token": "root"\n  }\'\n')),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${ADMIN_API_KEY}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Credential for the Consumer and reference the Secret:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${ADMIN_API_KEY}" \\\n  -d \'{\n    "id": "cred-jack-jwt-auth",\n    "plugins": {\n      "jwt-auth": {\n        "key": "jwt-vault-key",\n        "secret": "$secret://vault/jwt/jack/jwt-secret"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," enabled:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${ADMIN_API_KEY}" \\\n  -d \'{\n    "id": "jwt-route",\n    "uri": "/get",\n    "plugins": {\n      "jwt-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Set ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," key value to be ",(0,r.kt)("inlineCode",{parentName:"p"},"vault-hs256-secret-that-is-very-long")," in Vault:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -i vault sh -c \"VAULT_TOKEN='root' VAULT_ADDR='http://0.0.0.0:8200' vault kv put kv/apisix/jack jwt-secret=vault-hs256-secret-that-is-very-long\"\n")),(0,r.kt)("p",null,"You should see a response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Success! Data written to: kv/apisix/jack\n")),(0,r.kt)("p",null,"To issue a JWT, you could use ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder")," or other utilities. If you are using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder"),", do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fill in ",(0,r.kt)("inlineCode",{parentName:"p"},"HS256")," as the algorithm.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update the secret in the ",(0,r.kt)("strong",{parentName:"p"},"Valid secret")," section to be ",(0,r.kt)("inlineCode",{parentName:"p"},"vault-hs256-secret-that-is-very-long"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update payload with consumer key ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-vault-key"),"; and add ",(0,r.kt)("inlineCode",{parentName:"p"},"exp")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nbf")," in UNIX timestamp."),(0,r.kt)("p",{parentName:"li"},"Your payload should look similar to the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "jwt-vault-key",\n  "nbf": 1729132271\n}\n')))),(0,r.kt)("p",null,"Copy the generated JWT and save to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqd3QtdmF1bHQta2V5IiwibmJmIjoxNzI5MTMyMjcxfQ.i2pLj7QcQvnlSjB7iV5V522tIV43boQRtee7L0rwlkQ\n")),(0,r.kt)("p",null,"Send a request with the token in the header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get" -H "Authorization: ${jwt_token}"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("h3",{id:"sign-jwt-with-rs256-algorithm"},"Sign JWT with RS256 Algorithm"),(0,r.kt)("p",null,"The following example demonstrates how you can use asymmetric algorithms, such as RS256, to sign and validate JWT when implementing JWT for Consumer authentication. You will be generating RSA key pairs using ",(0,r.kt)("a",{parentName:"p",href:"https://openssl-library.org/source/"},"openssl")," and generating JWT using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io")," to better understand the composition of JWT."),(0,r.kt)("p",null,"Generate a 2048-bit RSA private key and extract the corresponding public key in PEM format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"openssl genrsa -out jwt-rsa256-private.pem 2048\nopenssl rsa -in jwt-rsa256-private.pem -pubout -out jwt-rsa256-public.pem\n")),(0,r.kt)("p",null,"You should see ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-rsa256-private.pem")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-rsa256-public.pem")," generated in your current working directory."),(0,r.kt)("p",null,"Visit ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder")," and do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fill in ",(0,r.kt)("inlineCode",{parentName:"p"},"RS256")," as the algorithm.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Copy and paste the private key content into the ",(0,r.kt)("strong",{parentName:"p"},"SIGN JWT: PRIVATE KEY")," section.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update payload with Consumer key ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key"),"; and add ",(0,r.kt)("inlineCode",{parentName:"p"},"exp")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nbf")," in UNIX timestamp."),(0,r.kt)("p",{parentName:"li"},"Your payload should look similar to the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "jack-key",\n  "nbf": 1729132271\n}\n')))),(0,r.kt)("p",null,"Copy the generated JWT and save to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export jwt_token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.K-I13em84kAcyH1jfIJl7ls_4jlwg1GzEzo5_xrDu-3wt3Xa3irS6naUsWpxX-a-hmcZZxRa9zqunqQjUP4kvn5e3xg2f_KyCR-_ZbwqYEPk3bXeFV1l4iypv6z5L7W1Niharun-dpMU03b1Tz64vhFx6UwxNL5UIZ7bunDAo_BXZ7Xe8rFhNHvIHyBFsDEXIBgx8lNYMq8QJk3iKxZhZZ5Om7lgYjOOKRgew4WkhBAY0v1AkO77nTlvSK0OEeeiwhkROyntggyx-S-U222ykMQ6mBLxkP4Cq5qHwXD8AUcLk5mhEij-3QhboYnt7yhKeZ3wDSpcjDvvL2aasC25ng\n")),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Credential for the Consumer and configure the RSA keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-jwt-auth",\n    "plugins": {\n      "jwt-auth": {\n        "key": "jack-key",\n        "algorithm": "RS256",\n        "public_key": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoTxe7ZPycrEP0SK4OBA2\\n0OUQsDN9gSFSHVvx/t++nZNrFxzZnV6q6/TRsihNXUIgwaOu5icFlIcxPL9Mf9UJ\\na5/XCQExp1TxpuSmjkhIFAJ/x5zXrC8SGTztP3SjkhYnQO9PKVXI6ljwgakVCfpl\\numuTYqI+ev7e45NdK8gJoJxPp8bPMdf8/nHfLXZuqhO/btrDg1x+j7frDNrEw+6B\\nCK2SsuypmYN+LwHfaH4Of7MQFk3LNIxyBz0mdbsKJBzp360rbWnQeauWtDymZxLT\\nATRNBVyl3nCNsURRTkc7eyknLaDt2N5xTIoUGHTUFYSdE68QWmukYMVGcEHEEPkp\\naQIDAQAB\\n-----END PUBLIC KEY-----"\n      }\n    }\n  }\'\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You should add a newline character after the opening line and before the closing line, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"-----BEGIN PUBLIC KEY-----\\n......\\n-----END PUBLIC KEY-----"),"."),(0,r.kt)("p",{parentName:"div"},"The key content can be directly concatenated."))),(0,r.kt)("p",null,"Create a Route with the ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Plugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "jwt-route",\n    "uri": "/headers",\n    "plugins": {\n      "jwt-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To verify, send a request to the Route with the JWT in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/headers" -H "Authorization: ${jwt_token}"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("h3",{id:"add-consumer-custom-id-to-header"},"Add Consumer Custom ID to Header"),(0,r.kt)("p",null,"The following example demonstrates how you can attach a Consumer custom ID to authenticated request in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer-Custom-Id")," header, which can be used to implement additional logics as needed."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack")," with a custom ID label:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack",\n    "labels": {\n      "custom_id": "495aec6a"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-jwt-auth",\n    "plugins": {\n      "jwt-auth": {\n        "key": "jack-key",\n        "secret": "jack-hs256-secret-that-is-very-long"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "jwt-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "jwt-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To issue a JWT for ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),", you could use ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder")," or other utilities. If you are using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder"),", do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fill in ",(0,r.kt)("inlineCode",{parentName:"p"},"HS256")," as the algorithm.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update the secret in the ",(0,r.kt)("strong",{parentName:"p"},"Valid secret")," section to be ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-hs256-secret-that-is-very-long"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update payload with Consumer key ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key"),"; and add ",(0,r.kt)("inlineCode",{parentName:"p"},"exp")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nbf")," in UNIX timestamp."),(0,r.kt)("p",{parentName:"li"},"Your payload should look similar to the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "jack-key",\n  "nbf": 1729132271\n}\n')))),(0,r.kt)("p",null,"Copy the generated JWT and save to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU\n")),(0,r.kt)("p",null,"To verify, send a request to the Route with the JWT in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/headers" -H "Authorization: ${jwt_token}"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "headers": {\n    "Accept": "*/*",\n    "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-6873b19d-329331db76e5e7194c942b47",\n    "X-Consumer-Custom-Id": "495aec6a",\n    "X-Consumer-Username": "jack",\n    "X-Credential-Identifier": "cred-jack-jwt-auth",\n    "X-Forwarded-Host": "127.0.0.1"\n  }\n}\n')),(0,r.kt)("h3",{id:"rate-limit-with-anonymous-consumer"},"Rate Limit with Anonymous Consumer"),(0,r.kt)("p",null,"The following example demonstrates how you can configure different rate limiting policies by regular and anonymous consumers, where the anonymous Consumer does not need to authenticate and has less quotas."),(0,r.kt)("p",null,"Create a regular Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack")," and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 3 within a 30-second window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack",\n    "plugins": {\n      "limit-count": {\n        "count": 3,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create the ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Credential for the Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-jwt-auth",\n    "plugins": {\n      "jwt-auth": {\n        "key": "jack-key",\n        "secret": "jack-hs256-secret-that-is-very-long"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create an anonymous user ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 1 within a 30-second window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "anonymous",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-auth")," Plugin to accept anonymous Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," from bypassing the authentication:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "jwt-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "jwt-auth": {\n        "anonymous_consumer": "anonymous"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To issue a JWT for ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),", you could use ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder")," or other utilities. If you are using ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"JWT.io's JWT encoder"),", do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fill in ",(0,r.kt)("inlineCode",{parentName:"p"},"HS256")," as the algorithm.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update the secret in the ",(0,r.kt)("strong",{parentName:"p"},"Valid secret")," section to be ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-hs256-secret-that-is-very-long"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update payload with Consumer key ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key"),"; and add ",(0,r.kt)("inlineCode",{parentName:"p"},"exp")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nbf")," in UNIX timestamp."),(0,r.kt)("p",{parentName:"li"},"Your payload should look similar to the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "jack-key",\n  "nbf": 1729132271\n}\n')))),(0,r.kt)("p",null,"Copy the generated JWT and save to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJqYWNrLWtleSIsIm5iZiI6MTcyOTEzMjI3MX0.UEPXy5jpid624T1XpfjM0PLY73LZPjV3Qt8yZ92kVuU\n")),(0,r.kt)("p",null,"To verify the rate limiting, send five consecutive requests with ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),"'s JWT:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -H "Authorization: ${jwt_token}" -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that out of the 5 requests, 3 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    3, 429:    2\n")),(0,r.kt)("p",null,"Send five anonymous requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that only one request was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    1, 429:    4\n")))}u.isMDXComponent=!0}}]);