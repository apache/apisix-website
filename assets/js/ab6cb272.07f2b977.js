"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[19295],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=o(n),k=i,g=d["".concat(s,".").concat(k)]||d[k]||c[k]||r;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,l[1]=p;for(var o=2;o<r;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},44547:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={title:"zipkin",keywords:["Apache APISIX","API Gateway","Plugin","Zipkin"],description:"Zipkin is an open-source distributed tracing system. The zipkin Plugin instruments APISIX and sends traces to Zipkin based on the Zipkin API specification."},l=void 0,p={unversionedId:"plugins/zipkin",id:"plugins/zipkin",isDocsHomePage:!1,title:"zipkin",description:"Zipkin is an open-source distributed tracing system. The zipkin Plugin instruments APISIX and sends traces to Zipkin based on the Zipkin API specification.",source:"@site/docs/apisix/plugins/zipkin.md",sourceDirName:"plugins",slug:"/plugins/zipkin",permalink:"/docs/apisix/next/plugins/zipkin",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/zipkin.md",tags:[],version:"current",frontMatter:{title:"zipkin",keywords:["Apache APISIX","API Gateway","Plugin","Zipkin"],description:"Zipkin is an open-source distributed tracing system. The zipkin Plugin instruments APISIX and sends traces to Zipkin based on the Zipkin API specification."},sidebar:"docs",previous:{title:"workflow",permalink:"/docs/apisix/next/plugins/workflow"},next:{title:"skywalking",permalink:"/docs/apisix/next/plugins/skywalking"}},s=[{value:"Description",id:"description",children:[]},{value:"Static Configurations",id:"static-configurations",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Send Traces to Zipkin",id:"send-traces-to-zipkin",children:[]},{value:"Send Traces to Jaeger",id:"send-traces-to-jaeger",children:[]},{value:"Using Trace Variables in Logging",id:"using-trace-variables-in-logging",children:[]}]}],o={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/zipkin"})),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/openzipkin/zipkin"},"Zipkin")," is an open-source distributed tracing system. The ",(0,i.kt)("inlineCode",{parentName:"p"},"zipkin")," Plugin instruments APISIX and sends traces to Zipkin based on the ",(0,i.kt)("a",{parentName:"p",href:"https://zipkin.io/pages/instrumenting.html"},"Zipkin API specification"),"."),(0,i.kt)("p",null,"The Plugin can also send traces to other compatible collectors, such as ",(0,i.kt)("a",{parentName:"p",href:"https://www.jaegertracing.io/docs/1.51/getting-started/#migrating-from-zipkin"},"Jaeger")," and ",(0,i.kt)("a",{parentName:"p",href:"https://skywalking.apache.org/docs/main/latest/en/setup/backend/zipkin-trace/#zipkin-receiver"},"Apache SkyWalking"),", both of which support Zipkin ",(0,i.kt)("a",{parentName:"p",href:"https://zipkin.io/zipkin-api/zipkin-api.yaml"},"v1")," and ",(0,i.kt)("a",{parentName:"p",href:"https://zipkin.io/zipkin-api/zipkin2-api.yaml"},"v2")," APIs."),(0,i.kt)("h2",{id:"static-configurations"},"Static Configurations"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"zipkin")," Plugin NGINX variables configuration is set to false in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix/blob/master/apisix/cli/config.lua"},"default configuration"),":"),(0,i.kt)("p",null,"To modify this value, add the updated configuration to ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yaml"),". For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"plugin_attr:\n  zipkin:\n    set_ngx_var: true\n")),(0,i.kt)("p",null,"Reload APISIX for changes to take effect."),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("p",null,"See the configuration file for configuration options available to all Plugins."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"endpoint"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"True"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Zipkin span endpoint to POST to, such as ",(0,i.kt)("inlineCode",{parentName:"td"},"http://127.0.0.1:9411/api/v2/spans"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sample_ratio"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"True"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"[0.00001, 1]"),(0,i.kt)("td",{parentName:"tr",align:null},"Frequency to sample requests. Setting to ",(0,i.kt)("inlineCode",{parentName:"td"},"1")," means sampling every request.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"service_name"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},'"APISIX"'),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Service name for the Zipkin reporter to be displayed in Zipkin.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"server_addr"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"the value of ",(0,i.kt)("inlineCode",{parentName:"td"},"$server_addr")),(0,i.kt)("td",{parentName:"tr",align:null},"IPv4 address"),(0,i.kt)("td",{parentName:"tr",align:null},"IPv4 address for the Zipkin reporter. For example, you can set this to your external IP address.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"span_version"),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"[1, 2]"),(0,i.kt)("td",{parentName:"tr",align:null},"Version of the span type.")))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"The examples below show different use cases of the ",(0,i.kt)("inlineCode",{parentName:"p"},"zipkin")," Plugin."),(0,i.kt)("h3",{id:"send-traces-to-zipkin"},"Send Traces to Zipkin"),(0,i.kt)("p",null,"The following example demonstrates how to trace requests to a Route and send traces to Zipkin using ",(0,i.kt)("a",{parentName:"p",href:"https://zipkin.io/zipkin-api/zipkin2-api.yaml"},"Zipkin API v2"),". You will also understand the differences between span version 2 and span version 1."),(0,i.kt)("p",null,"Start a Zipkin instance in Docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -d --name zipkin -p 9411:9411 openzipkin/zipkin\n")),(0,i.kt)("p",null,"Create a Route with ",(0,i.kt)("inlineCode",{parentName:"p"},"zipkin")," and use the default span version 2. You should adjust the IP address as needed for the Zipkin HTTP endpoint, and configure the sample ratio to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to trace every request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "zipkin-tracing-route",\n    "uri": "/anything",\n    "plugins": {\n      "zipkin": {\n        "endpoint": "http://127.0.0.1:9411/api/v2/spans",\n        "sample_ratio": 1,\n        "span_version": 2\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Send a request to the Route:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9080/anything"\n')),(0,i.kt)("p",null,"You should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "data": "",\n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/7.64.1",\n    "X-Amzn-Trace-Id": "Root=1-65af2926-497590027bcdb09e34752b78",\n    "X-B3-Parentspanid": "347dddedf73ec176",\n    "X-B3-Sampled": "1",\n    "X-B3-Spanid": "429afa01d0b0067c",\n    "X-B3-Traceid": "aea58f4b490766eccb08275acd52a13a",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  ...\n}\n')),(0,i.kt)("p",null,"Navigate to the Zipkin web UI at ",(0,i.kt)("a",{parentName:"p",href:"http://127.0.0.1:9411/zipkin"},"http://127.0.0.1:9411/zipkin")," and click ",(0,i.kt)("strong",{parentName:"p"},"Run Query"),", you should see a trace corresponding to the request:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.api7.ai/uploads/2024/01/23/MaXhacYO_zipkin-run-query.png",alt:"trace-from-request"})),(0,i.kt)("p",null,"Click ",(0,i.kt)("strong",{parentName:"p"},"Show")," to see more tracing details:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.api7.ai/uploads/2024/01/23/3SmfFq9f_trace-details.png",alt:"v2-trace-spans"})),(0,i.kt)("p",null,"Note that with span version 2, every traced request creates the following spans:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"request\n\u251c\u2500\u2500 proxy\n\u2514\u2500\u2500 response\n")),(0,i.kt)("p",null,"where ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy")," represents the time from the beginning of the request to the beginning of ",(0,i.kt)("inlineCode",{parentName:"p"},"header_filter"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"response")," represents the time from the beginning of ",(0,i.kt)("inlineCode",{parentName:"p"},"header_filter")," to the beginning of ",(0,i.kt)("inlineCode",{parentName:"p"},"log"),"."),(0,i.kt)("p",null,"Now, update the Plugin on the Route to use span version 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes/zipkin-tracing-route" -X PATCH \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "plugins": {\n      "zipkin": {\n        "span_version": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Send another request to the Route:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9080/anything"\n')),(0,i.kt)("p",null,"In the Zipkin web UI, you should see a new trace with details similar to the following:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.api7.ai/uploads/2024/01/23/OPw2sTPa_v1-trace-spans.png",alt:"v1-trace-spans"})),(0,i.kt)("p",null,"Note that with the older span version 1, every traced request creates the following spans:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"request\n\u251c\u2500\u2500 rewrite\n\u251c\u2500\u2500 access\n\u2514\u2500\u2500 proxy\n    \u2514\u2500\u2500 body_filter\n")),(0,i.kt)("h3",{id:"send-traces-to-jaeger"},"Send Traces to Jaeger"),(0,i.kt)("p",null,"The following example demonstrates how to trace requests to a Route and send traces to Jaeger."),(0,i.kt)("p",null,"Start a Jaeger instance in Docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=9411 \\\n  -p 16686:16686 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one\n")),(0,i.kt)("p",null,"Create a Route with ",(0,i.kt)("inlineCode",{parentName:"p"},"zipkin"),". Please adjust the IP address as needed for the Zipkin HTTP endpoint, and configure the sample ratio to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to trace every request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "kin-tracing-route",\n    "uri": "/anything",\n    "plugins": {\n      "kin": {\n        "endpoint": "http://127.0.0.1:9411/api/v2/spans",\n        "sample_ratio": 1\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Send a request to the Route:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9080/anything"\n')),(0,i.kt)("p",null,"You should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,i.kt)("p",null,"Navigate to the Jaeger web UI at ",(0,i.kt)("a",{parentName:"p",href:"http://127.0.0.1:16686"},"http://127.0.0.1:16686"),", select APISIX as the Service, and click ",(0,i.kt)("strong",{parentName:"p"},"Find Traces"),", you should see a trace corresponding to the request:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.api7.ai/uploads/2024/01/23/X6QdLN3l_jaeger.png",alt:"jaeger-traces"})),(0,i.kt)("p",null,"Similarly, you should find more span details once you click into a trace:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://static.api7.ai/uploads/2024/01/23/iP9fXI2A_jaeger-details.png",alt:"jaeger-details"})),(0,i.kt)("h3",{id:"using-trace-variables-in-logging"},"Using Trace Variables in Logging"),(0,i.kt)("p",null,"The following example demonstrates how to configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"kin")," Plugin to set the following built-in variables, which can be used in logger Plugins or access logs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kin_context_traceparent"),": ",(0,i.kt)("a",{parentName:"li",href:"https://www.w3.org/TR/trace-context/#trace-context-http-headers-format"},"trace parent")," ID"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kin_trace_id"),": trace ID of the current span"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kin_span_id"),": span ID of the current span")),(0,i.kt)("p",null,"Update the configuration file as below. You can customize the access log format to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"zipkin")," Plugin variables, and set ",(0,i.kt)("inlineCode",{parentName:"p"},"zipkin")," variables in the ",(0,i.kt)("inlineCode",{parentName:"p"},"set_ngx_var")," field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},'nginx_config:\n  http:\n    enable_access_log: true\n    access_log_format: \'{"time": "$time_iso8601","zipkin_context_traceparent": "$zipkin_context_traceparent","zipkin_trace_id": "$zipkin_trace_id","zipkin_span_id": "$zipkin_span_id","remote_addr": "$remote_addr"}\'\n    access_log_format_escape: json\nplugin_attr:\n  zipkin:\n    set_ngx_var: true\n')),(0,i.kt)("p",null,"Reload APISIX for configuration changes to take effect."),(0,i.kt)("p",null,"You should see access log entries similar to the following when you generate requests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'{"time": "23/Jan/2024:06:28:00 +0000","zipkin_context_traceparent": "00-61bce33055c56f5b9bec75227befd142-13ff3c7370b29925-01","zipkin_trace_id": "61bce33055c56f5b9bec75227befd142","zipkin_span_id": "13ff3c7370b29925","remote_addr": "172.28.0.1"}\n')))}u.isMDXComponent=!0}}]);