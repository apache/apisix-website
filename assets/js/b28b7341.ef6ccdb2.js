"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[26324],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,k=m["".concat(s,".").concat(c)]||m[c]||p[c]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49025:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={title:"limit-count",keywords:["Apache APISIX","API Gateway","Limit Count"],description:"The limit-count plugin uses a fixed window algorithm to limit the rate of requests by the number of requests within a given time interval. Requests exceeding the configured quota will be rejected."},l=void 0,o={unversionedId:"plugins/limit-count",id:"plugins/limit-count",isDocsHomePage:!1,title:"limit-count",description:"The limit-count plugin uses a fixed window algorithm to limit the rate of requests by the number of requests within a given time interval. Requests exceeding the configured quota will be rejected.",source:"@site/docs/apisix/plugins/limit-count.md",sourceDirName:"plugins",slug:"/plugins/limit-count",permalink:"/docs/apisix/next/plugins/limit-count",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/limit-count.md",tags:[],version:"current",frontMatter:{title:"limit-count",keywords:["Apache APISIX","API Gateway","Limit Count"],description:"The limit-count plugin uses a fixed window algorithm to limit the rate of requests by the number of requests within a given time interval. Requests exceeding the configured quota will be rejected."},sidebar:"docs",previous:{title:"limit-conn",permalink:"/docs/apisix/next/plugins/limit-conn"},next:{title:"proxy-cache",permalink:"/docs/apisix/next/plugins/proxy-cache"}},s=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Apply Rate Limiting by Remote Address",id:"apply-rate-limiting-by-remote-address",children:[]},{value:"Apply Rate Limiting by Remote Address and Consumer Name",id:"apply-rate-limiting-by-remote-address-and-consumer-name",children:[]},{value:"Share Quota among Routes",id:"share-quota-among-routes",children:[]},{value:"Share Quota Among APISIX Nodes with a Redis Server",id:"share-quota-among-apisix-nodes-with-a-redis-server",children:[]},{value:"Share Quota Among APISIX Nodes with a Redis Cluster",id:"share-quota-among-apisix-nodes-with-a-redis-cluster",children:[]},{value:"Rate Limit with Anonymous Consumer",id:"rate-limit-with-anonymous-consumer",children:[]}]}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/limit-count"})),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin uses a fixed window algorithm to limit the rate of requests by the number of requests within a given time interval. Requests exceeding the configured quota will be rejected."),(0,i.kt)("p",null,"You may see the following rate limiting headers in the response:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-RateLimit-Limit"),": the total quota"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-RateLimit-Remaining"),": the remaining quota"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-RateLimit-Reset"),": number of seconds left for the counter to reset")),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"count"),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"True"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"> 0"),(0,i.kt)("td",{parentName:"tr",align:null},"The maximum number of requests allowed within a given time interval.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"time_window"),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"True"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"> 0"),(0,i.kt)("td",{parentName:"tr",align:null},"The time interval corresponding to the rate limiting ",(0,i.kt)("inlineCode",{parentName:"td"},"count")," in seconds.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"key_type"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"var"),(0,i.kt)("td",{parentName:"tr",align:null},'["var","var_combination","constant"]'),(0,i.kt)("td",{parentName:"tr",align:null},"The type of key. If the ",(0,i.kt)("inlineCode",{parentName:"td"},"key_type")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"var"),", the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," is interpreted a variable. If the ",(0,i.kt)("inlineCode",{parentName:"td"},"key_type")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"var_combination"),", the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," is interpreted as a combination of variables. If the ",(0,i.kt)("inlineCode",{parentName:"td"},"key_type")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"constant"),", the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," is interpreted as a constant.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"key"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"remote_addr"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The key to count requests by. If the ",(0,i.kt)("inlineCode",{parentName:"td"},"key_type")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"var"),", the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," is interpreted a variable. The variable does not need to be prefixed by a dollar sign (",(0,i.kt)("inlineCode",{parentName:"td"},"$"),"). If the ",(0,i.kt)("inlineCode",{parentName:"td"},"key_type")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"var_combination"),", the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," is interpreted as a combination of variables. All variables should be prefixed by dollar signs (",(0,i.kt)("inlineCode",{parentName:"td"},"$"),"). For example, to configure the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," to use a combination of two request headers ",(0,i.kt)("inlineCode",{parentName:"td"},"custom-a")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"custom-b"),", the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," should be configured as ",(0,i.kt)("inlineCode",{parentName:"td"},"$http_custom_a $http_custom_b"),". If the ",(0,i.kt)("inlineCode",{parentName:"td"},"key_type")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"constant"),", the ",(0,i.kt)("inlineCode",{parentName:"td"},"key")," is interpreted as a constant value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rejected_code"),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"503"),(0,i.kt)("td",{parentName:"tr",align:null},"[200,...,599]"),(0,i.kt)("td",{parentName:"tr",align:null},"The HTTP status code returned when a request is rejected for exceeding the threshold.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rejected_msg"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"non-empty"),(0,i.kt)("td",{parentName:"tr",align:null},"The response body returned when a request is rejected for exceeding the threshold.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"policy"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"local"),(0,i.kt)("td",{parentName:"tr",align:null},'["local","redis","redis-cluster"]'),(0,i.kt)("td",{parentName:"tr",align:null},"The policy for rate limiting counter. If it is ",(0,i.kt)("inlineCode",{parentName:"td"},"local"),", the counter is stored in memory locally. If it is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis"),", the counter is stored on a Redis instance. If it is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis-cluster"),", the counter is stored in a Redis cluster.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"allow_degradation"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"If true, allow APISIX to continue handling requests without the plugin when the plugin or its dependencies become unavailable.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"show_limit_quota_header"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"If true, include ",(0,i.kt)("inlineCode",{parentName:"td"},"X-RateLimit-Limit")," to show the total quota and ",(0,i.kt)("inlineCode",{parentName:"td"},"X-RateLimit-Remaining")," to show the remaining quota in the response header.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"group"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"non-empty"),(0,i.kt)("td",{parentName:"tr",align:null},"The ",(0,i.kt)("inlineCode",{parentName:"td"},"group")," ID for the plugin, such that routes of the same ",(0,i.kt)("inlineCode",{parentName:"td"},"group")," can share the same rate limiting counter.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_host"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The address of the Redis node. Required when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_port"),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"6379"),(0,i.kt)("td",{parentName:"tr",align:null},"[1,...]"),(0,i.kt)("td",{parentName:"tr",align:null},"The port of the Redis node when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_username"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The username for Redis if Redis ACL is used. If you use the legacy authentication method ",(0,i.kt)("inlineCode",{parentName:"td"},"requirepass"),", configure only the ",(0,i.kt)("inlineCode",{parentName:"td"},"redis_password"),". Used when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_password"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The password of the Redis node when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"redis-cluster"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_ssl"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"If true, use SSL to connect to Redis cluster when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_ssl_verify"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"If true, verify the server SSL certificate when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_database"),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},">= 0"),(0,i.kt)("td",{parentName:"tr",align:null},"The database number in Redis when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_timeout"),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"1000"),(0,i.kt)("td",{parentName:"tr",align:null},"[1,...]"),(0,i.kt)("td",{parentName:"tr",align:null},"The Redis timeout value in milliseconds when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"redis-cluster"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_cluster_nodes"),(0,i.kt)("td",{parentName:"tr",align:null},"array","[string]"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The list of the Redis cluster nodes with at least two addresses. Required when policy is redis-cluster.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_cluster_name"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the Redis cluster. Required when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis-cluster"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_cluster_ssl"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"If true, use SSL to connect to Redis cluster when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis-cluster"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"redis_cluster_ssl_verify"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"If true, verify the server SSL certificate when ",(0,i.kt)("inlineCode",{parentName:"td"},"policy")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"redis-cluster"),".")))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"The examples below demonstrate how you can configure ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," in different scenarios."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can fetch the ",(0,i.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,i.kt)("h3",{id:"apply-rate-limiting-by-remote-address"},"Apply Rate Limiting by Remote Address"),(0,i.kt)("p",null,"The following example demonstrates the rate limiting of requests by a single variable, ",(0,i.kt)("inlineCode",{parentName:"p"},"remote_addr"),"."),(0,i.kt)("p",null,"Create a Route with ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin that allows for a quota of 1 within a 30-second window per remote address:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "limit-count-route",\n    "uri": "/get",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429,\n        "key_type": "var",\n        "key": "remote_addr"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Send a request to verify:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get"\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,i.kt)("p",null,"The request has consumed all the quota allowed for the time window. If you send the request again within the same 30-second time interval, you should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 429 Too Many Requests")," response, indicating the request surpasses the quota threshold."),(0,i.kt)("h3",{id:"apply-rate-limiting-by-remote-address-and-consumer-name"},"Apply Rate Limiting by Remote Address and Consumer Name"),(0,i.kt)("p",null,"The following example demonstrates the rate limiting of requests by a combination of variables, ",(0,i.kt)("inlineCode",{parentName:"p"},"remote_addr")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"consumer_name"),". It allows for a quota of 1 within a 30-second window per remote address and for each consumer."),(0,i.kt)("p",null,"Create a Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"john"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "john"\n  }\'\n')),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the consumer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/john/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "john-key"\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create a second Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"jane"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jane"\n  }\'\n')),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the Consumer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jane/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jane-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jane-key"\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create a Route with ",(0,i.kt)("inlineCode",{parentName:"p"},"key-auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugins, and specify in the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin to use a combination of variables as the rate limiting key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "limit-count-route",\n    "uri": "/get",\n    "plugins": {\n      "key-auth": {},\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429,\n        "key_type": "var_combination",\n        "key": "$remote_addr $consumer_name"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Send a request as the Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"jane"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"curl -i \"http://127.0.0.1:9080/get\" -H 'apikey: jane-key'\n")),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the corresponding response body."),(0,i.kt)("p",null,"This request has consumed all the quota set for the time window. If you send the same request as the Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"jane")," within the same 30-second time interval, you should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 429 Too Many Requests")," response, indicating the request surpasses the quota threshold."),(0,i.kt)("p",null,"Send the same request as the Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"john")," within the same 30-second time interval:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"curl -i \"http://127.0.0.1:9080/get\" -H 'apikey: john-key'\n")),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the corresponding response body, indicating the request is not rate limited."),(0,i.kt)("p",null,"Send the same request as the Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"john")," again within the same 30-second time interval, you should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 429 Too Many Requests")," response."),(0,i.kt)("p",null,"This verifies the plugin rate limits by the combination of variables, ",(0,i.kt)("inlineCode",{parentName:"p"},"remote_addr")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"consumer_name"),"."),(0,i.kt)("h3",{id:"share-quota-among-routes"},"Share Quota among Routes"),(0,i.kt)("p",null,"The following example demonstrates the sharing of rate limiting quota among multiple routes by configuring the ",(0,i.kt)("inlineCode",{parentName:"p"},"group")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin."),(0,i.kt)("p",null,"Note that the configurations of the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin of the same ",(0,i.kt)("inlineCode",{parentName:"p"},"group")," should be identical. To avoid update anomalies and repetitive configurations, you can create a Service with ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin and Upstream for routes to connect to."),(0,i.kt)("p",null,"Create a service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/services" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "limit-count-service",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429,\n        "group": "srv1"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create two Routes and configure their ",(0,i.kt)("inlineCode",{parentName:"p"},"service_id")," to be ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count-service"),", so that they share the same configurations for the Plugin and Upstream:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "limit-count-route-1",\n    "service_id": "limit-count-service",\n    "uri": "/get1",\n    "plugins": {\n      "proxy-rewrite": {\n        "uri": "/get"\n      }\n    }\n  }\'\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "limit-count-route-2",\n    "service_id": "limit-count-service",\n    "uri": "/get2",\n    "plugins": {\n      "proxy-rewrite": {\n        "uri": "/get"\n      }\n    }\n  }\'\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugins/proxy-rewrite"},(0,i.kt)("inlineCode",{parentName:"a"},"proxy-rewrite"))," plugin is used to rewrite the URI to ",(0,i.kt)("inlineCode",{parentName:"p"},"/get")," so that requests are forwarded to the correct endpoint."))),(0,i.kt)("p",null,"Send a request to Route ",(0,i.kt)("inlineCode",{parentName:"p"},"/get1"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get1"\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the corresponding response body."),(0,i.kt)("p",null,"Send the same request to Route ",(0,i.kt)("inlineCode",{parentName:"p"},"/get2")," within the same 30-second time interval:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get2"\n')),(0,i.kt)("p",null,"You should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 429 Too Many Requests")," response, which verifies the two routes share the same rate limiting quota."),(0,i.kt)("h3",{id:"share-quota-among-apisix-nodes-with-a-redis-server"},"Share Quota Among APISIX Nodes with a Redis Server"),(0,i.kt)("p",null,"The following example demonstrates the rate limiting of requests across multiple APISIX nodes with a Redis server, such that different APISIX nodes share the same rate limiting quota."),(0,i.kt)("p",null,"On each APISIX instance, create a Route with the following configurations. Adjust the address of the Admin API, Redis host, port, password, and database accordingly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "limit-count-route",\n    "uri": "/get",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429,\n        "key": "remote_addr",\n        "policy": "redis",\n        "redis_host": "192.168.xxx.xxx",\n        "redis_port": 6379,\n        "redis_password": "p@ssw0rd",\n        "redis_database": 1\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Send a request to an APISIX instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get"\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the corresponding response body."),(0,i.kt)("p",null,"Send the same request to a different APISIX instance within the same 30-second time interval, you should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 429 Too Many Requests")," response, verifying routes configured in different APISIX nodes share the same quota."),(0,i.kt)("h3",{id:"share-quota-among-apisix-nodes-with-a-redis-cluster"},"Share Quota Among APISIX Nodes with a Redis Cluster"),(0,i.kt)("p",null,"You can also use a Redis cluster to apply the same quota across multiple APISIX nodes, such that different APISIX nodes share the same rate limiting quota."),(0,i.kt)("p",null,"Ensure that your Redis instances are running in ",(0,i.kt)("a",{parentName:"p",href:"https://redis.io/docs/management/scaling/#create-and-use-a-redis-cluster"},"cluster mode"),". A minimum of two nodes are required for the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin configurations."),(0,i.kt)("p",null,"On each APISIX instance, create a Route with the following configurations. Adjust the address of the Admin API, Redis cluster nodes, password, cluster name, and SSL varification accordingly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "limit-count-route",\n    "uri": "/get",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429,\n        "key": "remote_addr",\n        "policy": "redis-cluster",\n        "redis_cluster_nodes": [\n          "192.168.xxx.xxx:6379",\n          "192.168.xxx.xxx:16379"\n        ],\n        "redis_password": "p@ssw0rd",\n        "redis_cluster_name": "redis-cluster-1",\n        "redis_cluster_ssl": true\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Send a request to an APISIX instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get"\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the corresponding response body."),(0,i.kt)("p",null,"Send the same request to a different APISIX instance within the same 30-second time interval, you should receive an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 429 Too Many Requests")," response, verifying routes configured in different APISIX nodes share the same quota."),(0,i.kt)("h3",{id:"rate-limit-with-anonymous-consumer"},"Rate Limit with Anonymous Consumer"),(0,i.kt)("p",null,"does not need to authenticate and has less quotas. While this example uses ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugins/key-auth"},(0,i.kt)("inlineCode",{parentName:"a"},"key-auth"))," for authentication, the anonymous Consumer can also be configured with ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugins/basic-auth"},(0,i.kt)("inlineCode",{parentName:"a"},"basic-auth")),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugins/jwt-auth"},(0,i.kt)("inlineCode",{parentName:"a"},"jwt-auth")),", and ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugins/hmac-auth"},(0,i.kt)("inlineCode",{parentName:"a"},"hmac-auth")),"."),(0,i.kt)("p",null,"Create a regular Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"john")," and configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," plugin to allow for a quota of 3 within a 30-second window:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "john",\n    "plugins": {\n      "limit-count": {\n        "count": 3,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"john"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/john/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "john-key"\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create an anonymous user ",(0,i.kt)("inlineCode",{parentName:"p"},"anonymous")," and configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 1 within a 30-second window:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "anonymous",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create a Route and configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"key-auth")," Plugin to accept anonymous Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"anonymous")," from bypassing the authentication:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "key-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "key-auth": {\n        "anonymous_consumer": "anonymous"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"To verify, send five consecutive requests with ",(0,i.kt)("inlineCode",{parentName:"p"},"john"),"'s key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -H \'apikey: john-key\' -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,i.kt)("p",null,"You should see the following response, showing that out of the 5 requests, 3 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"200:    3, 429:    2\n")),(0,i.kt)("p",null,"Send five anonymous requests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,i.kt)("p",null,"You should see the following response, showing that only one request was successful:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"200:    1, 429:    4\n")))}u.isMDXComponent=!0}}]);