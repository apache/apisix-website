"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[10382],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),h=r,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||i;return t?a.createElement(m,l(l({ref:n},p),{},{components:t})):a.createElement(m,l({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},57789:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const i={title:"key-auth",keywords:["Apache APISIX","API Gateway","Plugin","Key Auth","key-auth"],description:"The key-auth Plugin supports the use of an authentication key as a mechanism for clients to authenticate themselves before accessing Upstream resources."},l=void 0,o={unversionedId:"plugins/key-auth",id:"plugins/key-auth",isDocsHomePage:!1,title:"key-auth",description:"The key-auth Plugin supports the use of an authentication key as a mechanism for clients to authenticate themselves before accessing Upstream resources.",source:"@site/docs/apisix/plugins/key-auth.md",sourceDirName:"plugins",slug:"/plugins/key-auth",permalink:"/docs/apisix/next/plugins/key-auth",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/key-auth.md",tags:[],version:"current",frontMatter:{title:"key-auth",keywords:["Apache APISIX","API Gateway","Plugin","Key Auth","key-auth"],description:"The key-auth Plugin supports the use of an authentication key as a mechanism for clients to authenticate themselves before accessing Upstream resources."},sidebar:"docs",previous:{title:"attach-consumer-label",permalink:"/docs/apisix/next/plugins/attach-consumer-label"},next:{title:"jwt-auth",permalink:"/docs/apisix/next/plugins/jwt-auth"}},s=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Implement Key Authentication on Route",id:"implement-key-authentication-on-route",children:[]},{value:"Hide Authentication Information From Upstream",id:"hide-authentication-information-from-upstream",children:[]},{value:"Demonstrate Priority of Keys in Header and Query",id:"demonstrate-priority-of-keys-in-header-and-query",children:[]},{value:"Add Consumer Custom ID to Header",id:"add-consumer-custom-id-to-header",children:[]},{value:"Rate Limit with Anonymous Consumer",id:"rate-limit-with-anonymous-consumer",children:[]}]}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/key-auth"})),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Plugin supports the use of an authentication key as a mechanism for clients to authenticate themselves before accessing Upstream resources."),(0,r.kt)("p",null,"To use the plugin, you would configure authentication keys on ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/next/terminology/consumer"},"Consumers")," and enable the Plugin on routes or services. The key can be included in the request URL query string or request header. APISIX will then verify the key to determine if a request should be allowed or denied to access Upstream resources."),(0,r.kt)("p",null,"When a Consumer is successfully authenticated, APISIX adds additional headers, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Consumer-Username"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Credential-Indentifier"),", and other Consumer custom headers if configured, to the request, before proxying it to the Upstream service. The Upstream service will be able to differentiate between consumers and implement additional logics as needed. If any of these values is not available, the corresponding header will not be added."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,"For Consumer/Credential:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique key for a Consumer. This field supports saving the value in Secret Manager using the ",(0,r.kt)("a",{parentName:"td",href:"/docs/apisix/next/terminology/secret"},"APISIX Secret")," resource.")))),(0,r.kt)("p",null,"NOTE: ",(0,r.kt)("inlineCode",{parentName:"p"},'encrypt_fields = {"key"}')," is also defined in the schema, which means that the field will be stored encrypted in etcd. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugin-develop#encrypted-storage-fields"},"encrypted storage fields"),"."),(0,r.kt)("p",null,"For Route:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"header"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"apikey"),(0,r.kt)("td",{parentName:"tr",align:null},"The header to get the key from.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"apikey"),(0,r.kt)("td",{parentName:"tr",align:null},"The query string to get the key from. Lower priority than header.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hide_credentials"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, do not pass the header or query string with key to Upstream services.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"anonymous_consumer"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Anonymous Consumer name. If configured, allow anonymous users to bypass the authentication.")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The examples below demonstrate how you can work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Plugin for different scenarios."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can fetch the ",(0,r.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,r.kt)("h3",{id:"implement-key-authentication-on-route"},"Implement Key Authentication on Route"),(0,r.kt)("p",null,"The following example demonstrates how to implement key authentications on a Route and include the key in the request header."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jack-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "key-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "key-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("h4",{id:"verify-with-a-valid-key"},"Verify with a Valid Key"),(0,r.kt)("p",null,"Send a request to with the valid key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -i \"http://127.0.0.1:9080/anything\" -H 'apikey: jack-key'\n")),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("h4",{id:"verify-with-an-invalid-key"},"Verify with an Invalid Key"),(0,r.kt)("p",null,"Send a request with an invalid key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -i \"http://127.0.0.1:9080/anything\" -H 'apikey: wrong-key'\n")),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," response with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"message":"Invalid API key in request"}\n')),(0,r.kt)("h4",{id:"verify-without-a-key"},"Verify without a Key"),(0,r.kt)("p",null,"Send a request to without a key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," response with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"message":"Missing API key found in request"}\n')),(0,r.kt)("h3",{id:"hide-authentication-information-from-upstream"},"Hide Authentication Information From Upstream"),(0,r.kt)("p",null,"The following example demonstrates how to prevent the key from being sent to the Upstream services by configuring ",(0,r.kt)("inlineCode",{parentName:"p"},"hide_credentials"),". By default, the authentication key is forwarded to the Upstream services, which might lead to security risks in some circumstances."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jack-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("h4",{id:"without-hiding-credentials"},"Without Hiding Credentials"),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," and configure ",(0,r.kt)("inlineCode",{parentName:"p"},"hide_credentials")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", which is the default configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n-H "X-API-KEY: ${admin_key}" \\\n-d \'{\n  "id": "key-auth-route",\n  "uri": "/anything",\n  "plugins": {\n    "key-auth": {\n      "hide_credentials": false\n    }\n  },\n  "upstream": {\n    "type": "roundrobin",\n    "nodes": {\n      "httpbin.org:80": 1\n    }\n  }\n}\'\n')),(0,r.kt)("p",null,"Send a request with the valid key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything?apikey=jack-key"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {\n    "auth": "jack-key"\n  },\n  "data": "",\n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.2.1",\n    "X-Consumer-Username": "jack",\n    "X-Credential-Identifier": "cred-jack-key-auth",\n    "X-Amzn-Trace-Id": "Root=1-6502d8a5-2194962a67aa21dd33f94bb2",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "json": null,\n  "method": "GET",\n  "origin": "127.0.0.1, 103.248.35.179",\n  "url": "http://127.0.0.1/anything?apikey=jack-key"\n}\n')),(0,r.kt)("p",null,"Note that the Credential ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key")," is visible to the Upstream service."),(0,r.kt)("h4",{id:"hide-credentials"},"Hide Credentials"),(0,r.kt)("p",null,"Update the plugin's ",(0,r.kt)("inlineCode",{parentName:"p"},"hide_credentials")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes/key-auth-route" -X PATCH \\\n-H "X-API-KEY: ${admin_key}" \\\n-d \'{\n  "plugins": {\n    "key-auth": {\n      "hide_credentials": true\n    }\n  }\n}\'\n')),(0,r.kt)("p",null,"Send a request with the valid key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything?apikey=jack-key"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "data": "",\n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.2.1",\n    "X-Consumer-Username": "jack",\n    "X-Credential-Identifier": "cred-jack-key-auth",\n    "X-Amzn-Trace-Id": "Root=1-6502d85c-16f34dbb5629a5960183e803",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "json": null,\n  "method": "GET",\n  "origin": "127.0.0.1, 103.248.35.179",\n  "url": "http://127.0.0.1/anything"\n}\n')),(0,r.kt)("p",null,"Note that the Credential ",(0,r.kt)("inlineCode",{parentName:"p"},"jack-key")," is no longer visible to the Upstream service."),(0,r.kt)("h3",{id:"demonstrate-priority-of-keys-in-header-and-query"},"Demonstrate Priority of Keys in Header and Query"),(0,r.kt)("p",null,"The following example demonstrates how to implement key authentication by consumers on a Route and customize the URL parameter that should include the key. The example also shows that when the API key is configured in both the header and the query string, the request header has a higher priority."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack"\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jack-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n-H "X-API-KEY: ${admin_key}" \\\n-d \'{\n  "id": "key-auth-route",\n  "uri": "/anything",\n  "plugins": {\n    "key-auth": {\n      "query": "auth"\n    }\n  },\n  "upstream": {\n    "type": "roundrobin",\n    "nodes": {\n      "httpbin.org:80": 1\n    }\n  }\n}\'\n')),(0,r.kt)("h4",{id:"verify-with-a-valid-key-1"},"Verify with a Valid Key"),(0,r.kt)("p",null,"Send a request to with the valid key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything?auth=jack-key"\n')),(0,r.kt)("p",null,"You should receive an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response."),(0,r.kt)("h4",{id:"verify-with-an-invalid-key-1"},"Verify with an Invalid Key"),(0,r.kt)("p",null,"Send a request with an invalid key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything?auth=wrong-key"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," response with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"message":"Invalid API key in request"}\n')),(0,r.kt)("h4",{id:"verify-with-a-valid-key-in-query-string"},"Verify with a Valid Key in Query String"),(0,r.kt)("p",null,"However, if you include the valid key in header with the invalid key still in the URL query string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -i \"http://127.0.0.1:9080/anything?auth=wrong-key\" -H 'apikey: jack-key'\n")),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response. This shows that the key included in the header always has a higher priority."),(0,r.kt)("h3",{id:"add-consumer-custom-id-to-header"},"Add Consumer Custom ID to Header"),(0,r.kt)("p",null,"The following example demonstrates how you can attach a Consumer custom ID to authenticated request in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer-Custom-Id")," header, which can be used to implement additional logics as needed."),(0,r.kt)("p",null,"Create a Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack")," with a custom ID label:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack",\n    "labels": {\n      "custom_id": "495aec6a"\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the Consumer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jack-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route with ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "key-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "key-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To verify, send a request to the Route with the valid key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything?auth=jack-key"\n')),(0,r.kt)("p",null,"You should see an ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {\n    "auth": "jack-key"\n  },\n  "data": "",\n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66ea8d64-33df89052ae198a706e18c2a",\n    "X-Consumer-Username": "jack",\n    "X-Credential-Identifier": "cred-jack-key-auth",\n    "X-Consumer-Custom-Id": "495aec6a",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "json": null,\n  "method": "GET",\n  "origin": "192.168.65.1, 205.198.122.37",\n  "url": "http://127.0.0.1/anything?apikey=jack-key"\n}\n')),(0,r.kt)("h3",{id:"rate-limit-with-anonymous-consumer"},"Rate Limit with Anonymous Consumer"),(0,r.kt)("p",null,"The following example demonstrates how you can configure different rate limiting policies by regular and anonymous consumers, where the anonymous Consumer does not need to authenticate and has less quotas."),(0,r.kt)("p",null,"Create a regular Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack")," and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 3 within a 30-second window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "jack",\n    "plugins": {\n      "limit-count": {\n        "count": 3,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create the ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Credential for the Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/jack/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-jack-key-auth",\n    "plugins": {\n      "key-auth": {\n        "key": "jack-key"\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create an anonymous user ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 1 within a 30-second window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "anonymous",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"Create a Route and configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"key-auth")," Plugin to accept anonymous Consumer ",(0,r.kt)("inlineCode",{parentName:"p"},"anonymous")," from bypassing the authentication:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "key-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "key-auth": {\n        "anonymous_consumer": "anonymous"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,r.kt)("p",null,"To verify, send five consecutive requests with ",(0,r.kt)("inlineCode",{parentName:"p"},"jack"),"'s key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -H \'apikey: jack-key\' -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that out of the 5 requests, 3 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    3, 429:    2\n")),(0,r.kt)("p",null,"Send five anonymous requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,r.kt)("p",null,"You should see the following response, showing that only one request was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"200:    1, 429:    4\n")))}p.isMDXComponent=!0}}]);