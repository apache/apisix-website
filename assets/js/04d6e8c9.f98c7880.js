"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[69296],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),d=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(a),h=n,m=c["".concat(o,".").concat(h)]||c[h]||u[h]||i;return a?r.createElement(m,l(l({ref:t},p),{},{components:a})):r.createElement(m,l({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var d=2;d<i;d++)l[d]=a[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},25376:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=a(87462),n=(a(67294),a(3905));const i={title:"real-ip",keywords:["Apache APISIX","API Gateway","Plugin","Real IP"],description:"The real-ip plugin allows Apache APISIX to set the client's real IP by the IP address passed in the HTTP header or HTTP query string."},l=void 0,s={unversionedId:"plugins/real-ip",id:"version-3.12/plugins/real-ip",isDocsHomePage:!1,title:"real-ip",description:"The real-ip plugin allows Apache APISIX to set the client's real IP by the IP address passed in the HTTP header or HTTP query string.",source:"@site/docs-apisix_versioned_docs/version-3.12/plugins/real-ip.md",sourceDirName:"plugins",slug:"/plugins/real-ip",permalink:"/docs/apisix/3.12/plugins/real-ip",editUrl:"/edit#https://github.com/apache/apisix/edit/release/3.12/docs/en/latest/plugins/real-ip.md",tags:[],version:"3.12",frontMatter:{title:"real-ip",keywords:["Apache APISIX","API Gateway","Plugin","Real IP"],description:"The real-ip plugin allows Apache APISIX to set the client's real IP by the IP address passed in the HTTP header or HTTP query string."},sidebar:"version-3.12/docs",previous:{title:"brotli",permalink:"/docs/apisix/3.12/plugins/brotli"},next:{title:"server-info",permalink:"/docs/apisix/3.12/plugins/server-info"}},o=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Obtain Real Client Address From URI Parameter",id:"obtain-real-client-address-from-uri-parameter",children:[]},{value:"Obtain Real Client Address From Header",id:"obtain-real-client-address-from-header",children:[]},{value:"Obtain Real Client Address Behind Multiple Proxies",id:"obtain-real-client-address-behind-multiple-proxies",children:[]}]}],d={toc:o};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("head",null,(0,n.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/real-ip"})),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"real-ip")," Plugin allows APISIX to set the client's real IP by the IP address passed in the HTTP header or HTTP query string. This is particularly useful when APISIX is behind a reverse proxy since the proxy could act as the request-originating client otherwise."),(0,n.kt)("p",null,"The Plugin is functionally similar to NGINX's ",(0,n.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/http/ngx_http_realip_module.html"},"ngx_http_realip_module")," but offers more flexibility."),(0,n.kt)("h2",{id:"attributes"},"Attributes"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Required"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"),(0,n.kt)("th",{parentName:"tr",align:null},"Valid values"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"source"),(0,n.kt)("td",{parentName:"tr",align:null},"string"),(0,n.kt)("td",{parentName:"tr",align:null},"True"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"A built-in ",(0,n.kt)("a",{parentName:"td",href:"https://apisix.apache.org/docs/apisix/apisix-variable/"},"APISIX variable")," or ",(0,n.kt)("a",{parentName:"td",href:"https://nginx.org/en/docs/varindex.html"},"NGINX variable"),", such as ",(0,n.kt)("inlineCode",{parentName:"td"},"http_x_forwarded_for")," or ",(0,n.kt)("inlineCode",{parentName:"td"},"arg_realip"),". The variable value should be a valid IP address that represents the client's real IP address, with an optional port.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"trusted_addresses"),(0,n.kt)("td",{parentName:"tr",align:null},"array","[string]"),(0,n.kt)("td",{parentName:"tr",align:null},"False"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"array of IPv4 or IPv6 addresses (CIDR notation acceptable)"),(0,n.kt)("td",{parentName:"tr",align:null},"Trusted addresses that are known to send correct replacement addresses. This configuration sets the ",(0,n.kt)("a",{parentName:"td",href:"https://nginx.org/en/docs/http/ngx_http_realip_module.html#set_real_ip_from"},(0,n.kt)("inlineCode",{parentName:"a"},"set_real_ip_from"))," directive.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"recursive"),(0,n.kt)("td",{parentName:"tr",align:null},"boolean"),(0,n.kt)("td",{parentName:"tr",align:null},"False"),(0,n.kt)("td",{parentName:"tr",align:null},"False"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"If false, replace the original client address that matches one of the trusted addresses by the last address sent in the configured ",(0,n.kt)("inlineCode",{parentName:"td"},"source"),".",(0,n.kt)("br",null),"If true, replace the original client address that matches one of the trusted addresses by the last non-trusted address sent in the configured ",(0,n.kt)("inlineCode",{parentName:"td"},"source"),".")))),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"If the address specified in ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," is missing or invalid, the Plugin would not change the client address."))),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("p",null,"The examples below demonstrate how you can configure ",(0,n.kt)("inlineCode",{parentName:"p"},"real-ip")," in different scenarios."),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"You can fetch the ",(0,n.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,n.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,n.kt)("h3",{id:"obtain-real-client-address-from-uri-parameter"},"Obtain Real Client Address From URI Parameter"),(0,n.kt)("p",null,"The following example demonstrates how to update the client IP address with a URI parameter."),(0,n.kt)("p",null,"Create a Route as follows. You should configure ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," to obtain value from the URL parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"realip")," using ",(0,n.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/apisix-variable/"},"APISIX variable")," or ",(0,n.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/varindex.html"},"NGINX variable"),". Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"response-rewrite")," Plugin to set response headers to verify if the client IP and port were actually updated."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "real-ip-route",\n    "uri": "/get",\n    "plugins": {\n      "real-ip": {\n        "source": "arg_realip",\n        "trusted_addresses": ["127.0.0.0/24"]\n      },\n      "response-rewrite": {\n        "headers": {\n          "remote_addr": "$remote_addr",\n          "remote_port": "$remote_port"\n        }\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,n.kt)("p",null,"Send a request to the Route with real IP and port in the URL parameter:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get?realip=1.2.3.4:9080"\n')),(0,n.kt)("p",null,"You should see the response includes the following header:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"remote-addr: 1.2.3.4\nremote-port: 9080\n")),(0,n.kt)("h3",{id:"obtain-real-client-address-from-header"},"Obtain Real Client Address From Header"),(0,n.kt)("p",null,"The following example shows how to set the real client IP when APISIX is behind a reverse proxy, such as a load balancer when the proxy exposes the real client IP in the ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For"},(0,n.kt)("inlineCode",{parentName:"a"},"X-Forwarded-For"))," header."),(0,n.kt)("p",null,"Create a Route as follows. You should configure ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," to obtain value from the request header ",(0,n.kt)("inlineCode",{parentName:"p"},"X-Forwarded-For")," using ",(0,n.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/apisix-variable/"},"APISIX variable")," or ",(0,n.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/varindex.html"},"NGINX variable"),". Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"response-rewrite")," Plugin to set a response header to verify if the client IP was actually updated."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "real-ip-route",\n    "uri": "/get",\n    "plugins": {\n      "real-ip": {\n        "source": "http_x_forwarded_for",\n        "trusted_addresses": ["127.0.0.0/24"]\n      },\n      "response-rewrite": {\n        "headers": {\n          "remote_addr": "$remote_addr"\n        }\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,n.kt)("p",null,"Send a request to the Route:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get"\n')),(0,n.kt)("p",null,"You should see a response including the following header:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"remote-addr: 10.26.3.19\n")),(0,n.kt)("p",null,"The IP address should correspond to the IP address of the request-originating client."),(0,n.kt)("h3",{id:"obtain-real-client-address-behind-multiple-proxies"},"Obtain Real Client Address Behind Multiple Proxies"),(0,n.kt)("p",null,"The following example shows how to get the real client IP when APISIX is behind multiple proxies, which causes ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For"},(0,n.kt)("inlineCode",{parentName:"a"},"X-Forwarded-For"))," header to include a list of proxy IP addresses."),(0,n.kt)("p",null,"Create a Route as follows. You should configure ",(0,n.kt)("inlineCode",{parentName:"p"},"source")," to obtain value from the request header ",(0,n.kt)("inlineCode",{parentName:"p"},"X-Forwarded-For")," using ",(0,n.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/apisix-variable/"},"APISIX variable")," or ",(0,n.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/varindex.html"},"NGINX variable"),". Set ",(0,n.kt)("inlineCode",{parentName:"p"},"recursive")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," so that the original client address that matches one of the trusted addresses is replaced by the last non-trusted address sent in the configured ",(0,n.kt)("inlineCode",{parentName:"p"},"source"),". Then, use the ",(0,n.kt)("inlineCode",{parentName:"p"},"response-rewrite")," Plugin to set a response header to verify if the client IP was actually updated."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n  "id": "real-ip-route",\n  "uri": "/get",\n  "plugins": {\n    "real-ip": {\n      "source": "http_x_forwarded_for",\n      "recursive": true,\n      "trusted_addresses": ["192.128.0.0/16", "127.0.0.0/24"]\n    },\n    "response-rewrite": {\n      "headers": {\n        "remote_addr": "$remote_addr"\n      }\n    }\n  },\n  "upstream": {\n    "type": "roundrobin",\n    "nodes": {\n      "httpbin.org:80": 1\n    }\n  }\n}\'\n')),(0,n.kt)("p",null,"Send a request to the Route:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/get" \\\n  -H "X-Forwarded-For: 127.0.0.2, 192.128.1.1, 127.0.0.1"\n')),(0,n.kt)("p",null,"You should see a response including the following header:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"remote-addr: 127.0.0.2\n")))}p.isMDXComponent=!0}}]);