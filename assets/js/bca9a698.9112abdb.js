"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[79259],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>d});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=t.createContext({}),l=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=l(e.components);return t.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(a),d=i,g=m["".concat(o,".").concat(d)]||m[d]||u[d]||s;return a?t.createElement(g,r(r({ref:n},c),{},{components:a})):t.createElement(g,r({ref:n},c))}));function d(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=a.length,r=new Array(s);r[0]=m;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var l=2;l<s;l++)r[l]=a[l];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},75217:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>o,default:()=>m,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var t=a(87462),i=(a(67294),a(3905)),s=a(55064),r=a(58215);const p={title:"Configuration Examples",slug:"/reference/apisix-ingress-controller/examples",description:"Explore a variety of APISIX Ingress Controller configuration examples to help you customize settings to suit your environment effectively."},o=void 0,l={unversionedId:"reference/example",id:"version-2.0.0/reference/example",isDocsHomePage:!1,title:"Configuration Examples",description:"Explore a variety of APISIX Ingress Controller configuration examples to help you customize settings to suit your environment effectively.",source:"@site/docs-apisix-ingress-controller_versioned_docs/version-2.0.0/reference/example.md",sourceDirName:"reference",slug:"/reference/apisix-ingress-controller/examples",permalink:"/docs/ingress-controller/reference/apisix-ingress-controller/examples",editUrl:"/edit#https://github.com/apache/apisix-ingress-controller/edit/v2.0.0/docs/en/latest/reference/example.md",tags:[],version:"2.0.0",frontMatter:{title:"Configuration Examples",slug:"/reference/apisix-ingress-controller/examples",description:"Explore a variety of APISIX Ingress Controller configuration examples to help you customize settings to suit your environment effectively."},sidebar:"version-2.0.0/docs",previous:{title:"Custom Resource Definitions API Reference",permalink:"/docs/ingress-controller/reference/apisix-ingress-controller/api-reference"},next:{title:"Configuration File",permalink:"/docs/ingress-controller/reference/apisix-ingress-controller/configuration-file"}},c=[{value:"Configure CP Endpoint and Admin Key",id:"configure-cp-endpoint-and-admin-key",children:[]},{value:"Define Controller and Gateway",id:"define-controller-and-gateway",children:[]},{value:"Route to K8s Services",id:"route-to-k8s-services",children:[]},{value:"Route to External Services",id:"route-to-external-services",children:[]},{value:"Configure Weighted Services",id:"configure-weighted-services",children:[]},{value:"Configure Upstream",id:"configure-upstream",children:[]},{value:"Configure Consumer and Credentials",id:"configure-consumer-and-credentials",children:[]},{value:"Configure Plugin on Consumer",id:"configure-plugin-on-consumer",children:[]},{value:"Configure Route Priority and Matching Conditions",id:"configure-route-priority-and-matching-conditions",children:[]},{value:"Configure Plugin on a Route",id:"configure-plugin-on-a-route",children:[]},{value:"Configure Global Plugin",id:"configure-global-plugin",children:[]},{value:"Configure Plugin Metadata",id:"configure-plugin-metadata",children:[]},{value:"Configure Plugin Config",id:"configure-plugin-config",children:[]},{value:"Configure Gateway Access Information",id:"configure-gateway-access-information",children:[]}],u={toc:c};function m(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"APISIX Ingress Controller supports both Ingress resources and Gateway API for traffic management in Kubernetes. In addition to these standard Kubernetes APIs, the APISIX Ingress Controller also supports a set of ",(0,i.kt)("a",{parentName:"p",href:"/docs/ingress-controller/reference/apisix-ingress-controller/api-reference"},"CRDs (Custom Resource Definitions)")," designed specifically for APISIX-native functionality."),(0,i.kt)("p",null,"This document provides examples of common configurations covering how and when to use these resources. You should adjust custom values such as namespaces, route URIs, and credentials to match your environment."),(0,i.kt)("h2",{id:"configure-cp-endpoint-and-admin-key"},"Configure CP Endpoint and Admin Key"),(0,i.kt)("p",null,"To update the Control Plane endpoint and admin key for connectivity between APISIX Ingress Controller and Control Plane at runtime:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: GatewayProxy\nmetadata:\n  namespace: ingress-apisix\n  name: apisix-config\nspec:\n  provider:\n    type: ControlPlane\n    controlPlane:\n      endpoints:\n      - http://127.0.0.1:9180\n      auth:\n        type: AdminKey\n        adminKey:\n          value: replace-with-your-admin-key\n")),(0,i.kt)("h2",{id:"define-controller-and-gateway"},"Define Controller and Gateway"),(0,i.kt)("p",null,"To specify the controller responsible for handling resources before applying further configurations:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"Ingress",value:"ingress"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: gateway.networking.k8s.io/v1\nkind: GatewayClass\nmetadata:\n  namespace: ingress-apisix\n  name: apisix\nspec:\n  controllerName: "apisix.apache.org/apisix-ingress-controller"    # 1\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  namespace: ingress-apisix\n  name: apisix\nspec:\n  gatewayClassName: apisix\n  listeners:\n  - name: http\n    protocol: HTTP\n    port: 80                    # 2\n  infrastructure:\n    parametersRef:\n      group: apisix.apache.org  # 3\n      kind: GatewayProxy        # 4\n      name: apisix-config       # 5\n')),(0,i.kt)("p",null,"\u2776 The controllerName field in GatewayClass needs to be customized if you are running multiple distinct instances of the APISIX Ingress Controller in the same cluster (not a single instance with multiple replicas). Each ingress controller instance must use a unique controllerName in its ",(0,i.kt)("a",{parentName:"p",href:"/docs/ingress-controller/reference/apisix-ingress-controller/configuration-file"},"configuration file"),", and the corresponding GatewayClass should reference that value."),(0,i.kt)("p",null,"\u2777 The ",(0,i.kt)("inlineCode",{parentName:"p"},"port")," in the Gateway listener is required but ignored. This is due to limitations in the data plane: it cannot dynamically open new ports. Since the Ingress Controller does not manage the data plane deployment, it cannot automatically update the configuration or restart the data plane to apply port changes."),(0,i.kt)("p",null,"\u2778 API group of the referenced resource."),(0,i.kt)("p",null,"\u2779 Kind of the referenced resource."),(0,i.kt)("p",null,"\u277a Name of the referenced resource. Should match the ",(0,i.kt)("inlineCode",{parentName:"p"},"metadata.name")," of the GatewayProxy resource.")),(0,i.kt)(r.Z,{value:"ingress",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  namespace: ingress-apisix\n  name: apisix\nspec:\n  controller: apisix.apache.org/apisix-ingress-controller\n  parameters:\n    apiGroup: apisix.apache.org\n    kind: GatewayProxy\n    name: apisix-config\n    namespace: ingress-apisix\n    scope: Namespace\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  namespace: ingress-apisix\n  name: apisix\nspec:\n  controller: apisix.apache.org/apisix-ingress-controller\n  parameters:\n    apiGroup: apisix.apache.org\n    kind: GatewayProxy\n    name: apisix-config\n    namespace: ingress-apisix\n    scope: Namespace\n")))),(0,i.kt)("h2",{id:"route-to-k8s-services"},"Route to K8s Services"),(0,i.kt)("p",null,"To create a route that proxies requests to a service on K8s:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"Ingress",value:"ingress"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  parentRefs:\n  - name: apisix\n  rules:\n  - matches:\n    - path:\n        type: Exact\n        value: /ip\n    backendRefs:\n    - name: httpbin\n      port: 80\n"))),(0,i.kt)(r.Z,{value:"ingress",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  ingressClassName: apisix\n  rules:\n  - http:\n      paths:\n      - path: /ip\n        pathType: Exact\n        backend:\n          service:\n            name: httpbin\n            port:\n              number: 80\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  ingressClassName: apisix\n  http:\n  - name: httpbin\n    match:\n      paths:\n      - /ip\n    backends:\n    - serviceName: httpbin\n      servicePort: 80\n")))),(0,i.kt)("h2",{id:"route-to-external-services"},"Route to External Services"),(0,i.kt)("p",null,"To create a route that proxies requests to a service publicly hosted:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"Ingress",value:"ingress"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin-external-domain\nspec:\n  type: ExternalName\n  externalName: httpbin.org\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  namespace: ingress-apisix\n  name: get-ip\nspec:\n  parentRefs:\n  - name: apisix\n  rules:\n  - matches:\n    - path:\n        type: Exact\n        value: /ip\n    backendRefs:\n    - name: httpbin-external-domain\n      port: 80\n"))),(0,i.kt)(r.Z,{value:"ingress",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin-external-domain\nspec:\n  type: ExternalName\n  externalName: httpbin.org\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  namespace: ingress-apisix\n  name: get-ip\nspec:\n  ingressClassName: apisix\n  rules:\n  - http:\n      paths:\n      - path: /ip\n        pathType: Exact\n        backend:\n          service:\n            name: httpbin-external-domain\n            port:\n              number: 80\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixUpstream\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin-external-domain\nspec:\n  ingressClassName: apisix\n  externalNodes:\n  - type: Domain\n    name: httpbin.org\n---\napiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  namespace: ingress-apisix\n  name: get-ip\nspec:\n  ingressClassName: apisix\n  http:\n    - name: get-ip\n      match:\n        paths:\n          - /ip\n      upstreams:\n      - name: httpbin-external-domain\n")))),(0,i.kt)("h2",{id:"configure-weighted-services"},"Configure Weighted Services"),(0,i.kt)("p",null,"To create a route that proxies traffic to upstream services by weight:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  parentRefs:\n  - name: apisix\n  rules:\n  - matches:\n    - path:\n        type: Exact\n        value: /ip\n    backendRefs:\n    - name: httpbin-1\n      port: 80\n      weight: 3\n    - name: httpbin-2\n      port: 80\n      weight: 7\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  ingressClassName: apisix\n  http:\n  - name: httpbin\n    match:\n      paths:\n      - /ip\n    backends:\n    - serviceName: httpbin-1\n      servicePort: 80\n      weight: 3\n    - serviceName: httpbin-2\n      servicePort: 80\n      weight: 7\n")))),(0,i.kt)("p",null,"This configuration is not supported by the Ingress resource."),(0,i.kt)("h2",{id:"configure-upstream"},"Configure Upstream"),(0,i.kt)("p",null,"To configure upstream related configurations, including load balancing algorithm, how the host header is passed to upstream, service timeout, and more:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apisix.apache.org/v1alpha1\nkind: BackendTrafficPolicy\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  targetRefs:\n  - name: httpbin\n    kind: Service\n    group: ""\n  timeout:\n    send: 10s\n    read: 10s\n    connect: 10s\n  scheme: http\n  retries: 10\n  loadbalancer:\n    type: roundrobin\n  passHost: rewrite\n  upstreamHost: httpbin.example.com\n'))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixUpstream\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  ingressClassName: apisix\n  timeout:\n    send: 10s\n    read: 10s\n    connect: 10s\n  scheme: http\n  retries: 10\n  loadbalancer:\n    type: roundrobin\n  passHost: rewrite\n  upstreamHost: httpbin.example.com\n")))),(0,i.kt)("h2",{id:"configure-consumer-and-credentials"},"Configure Consumer and Credentials"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("p",null,"To create a consumer and configure the authentication credentials directly on the consumer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: Consumer\nmetadata:\n  namespace: ingress-apisix\n  name: alice\nspec:\n  gatewayRef:\n    name: apisix\n  credentials:\n    - type: key-auth\n      name: primary-key\n      config:\n        key: alice-primary-key\n")),(0,i.kt)("p",null,"You can also use the secret CRD, where the credential should be base64 encoded:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Secret\nmetadata:\n  namespace: ingress-apisix\n  name: key-auth-primary\ndata:\n  key: YWxpY2UtcHJpbWFyeS1rZXk=\n---\napiVersion: apisix.apache.org/v1alpha1\nkind: Consumer\nmetadata:\n  namespace: ingress-apisix\n  name: alice\nspec:\n  gatewayRef:\n    name: apisix\n  credentials:\n    - type: key-auth\n      name: key-auth-primary\n      secretRef:\n        name: key-auth-primary\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("p",null,"To create a consumer and configure the authentication credentials directly on the consumer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixConsumer\nmetadata:\n  namespace: ingress-apisix\n  name: alice\nspec:\n  ingressClassName: apisix\n  authParameter:\n    keyAuth:\n      value:\n        key: alice-primary-key\n")),(0,i.kt)("p",null,"You can also use the secret CRD, where the credential should be base64 encoded:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Secret\nmetadata:\n  namespace: ingress-apisix\n  name: key-auth-primary\ndata:\n  key: YWxpY2UtcHJpbWFyeS1rZXk=\n---\napiVersion: apisix.apache.org/v2\nkind: ApisixConsumer\nmetadata:\n  namespace: ingress-apisix\n  name: alice\nspec:\n  ingressClassName: apisix\n  authParameter:\n    keyAuth:\n      secretRef:\n        name: key-auth-primary\n")))),(0,i.kt)("h2",{id:"configure-plugin-on-consumer"},"Configure Plugin on Consumer"),(0,i.kt)("p",null,"To configure plugin(s) on a consumer, such as a rate limiting plugin:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: Consumer\nmetadata:\n  namespace: ingress-apisix\n  name: alice\nspec:\n  gatewayRef:\n    name: apisix\n  credentials:\n    - type: key-auth\n      name: alice-key\n      config:\n        key: alice-key\n  plugins:\n    - name: limit-count\n      config:\n        count: 3\n        time_window: 60\n        key: remote_addr\n        key_type: var\n        policy: local\n        rejected_code: 429\n        rejected_msg: Too many requests\n        show_limit_quota_header: true\n        allow_degradation: false\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("p",null,"ApisixConsumer currently does not support configuring plugins on consumers."))),(0,i.kt)("h2",{id:"configure-route-priority-and-matching-conditions"},"Configure Route Priority and Matching Conditions"),(0,i.kt)("p",null,"To configure route priority and request matching conditions on a targeted route:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: HTTPRoutePolicy\nmetadata:\n  namespace: ingress-apisix\n  name: http-route-policy\nspec:\n  targetRefs:\n  - group: gateway.networking.k8s.io\n    kind: HTTPRoute\n    name: httpbin\n  priority: 10\n  vars:\n  - - http_x_test_name\n    - ==\n    - new_name\n  - - arg_test\n    - ==\n    - test_name\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  ingressClassName: apisix\n  http:\n  - name: httpbin\n    match:\n      paths:\n      - /*\n      exprs:\n      - subject:\n          scope: Header\n          name: X-Test-Name\n        op: Equal\n        value: new_name\n      - subject:\n          scope: Query\n          name: test\n        op: Equal\n        value: test_name\n    backends:\n    - serviceName: httpbin\n      servicePort: 80\n")))),(0,i.kt)("h2",{id:"configure-plugin-on-a-route"},"Configure Plugin on a Route"),(0,i.kt)("p",null,"To configure plugins on a route:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: PluginConfig\nmetadata:\n  namespace: ingress-apisix\n  name: auth-plugin-config\nspec:\n  plugins:\n    - name: key-auth\n      config:\n        _meta:\n          disable: false\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  namespace: ingress-apisix\n  name: get-ip\nspec:\n  parentRefs:\n  - name: apisix\n  rules:\n  - matches: \n    - path:\n        type: Exact\n        value: /ip\n    filters:\n    - type: ExtensionRef\n      extensionRef:\n        group: apisix.apache.org\n        kind: PluginConfig\n        name: auth-plugin-config\n    backendRefs:\n    - name: httpbin\n      port: 80\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("p",null,"To enable ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"key-auth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"wolf-rbac"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"jwt-auth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ldap-auth"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"hmac-auth"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  namespace: ingress-apisix\n  name: get-ip\nspec:\n  ingressClassName: apisix\n  http:\n    - name: get-ip\n      match:\n        paths:\n          - /ip\n      authentication:\n        enable: true\n        type: keyAuth\n      backends:\n      - serviceName: httpbin\n        servicePort: 80\n")),(0,i.kt)("p",null,"To enable other plugins:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  namespace: ingress-apisix\n  name: get-ip\nspec:\n  ingressClassName: apisix\n  http:\n    - name: get-ip\n      match:\n        paths:\n          - /ip\n      plugins:\n      - name: limit-count\n        enable: true\n        config:\n          count: 2\n          time_window: 10\n          rejected_code: 429\n      backends:\n      - serviceName: httpbin\n        servicePort: 80\n")))),(0,i.kt)("h2",{id:"configure-global-plugin"},"Configure Global Plugin"),(0,i.kt)("p",null,"To configure a global plugin:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: GatewayProxy\nmetadata:\n  namespace: ingress-apisix\n  name: apisix-config\nspec:\n  plugins:\n  - name: clickhouse-logger\n    config:\n      endpoint_addr: http://clickhouse-clickhouse-installation.apisix.svc.cluster.local:8123\n      user: quickstart-user\n      password: quickstart-pass\n      logtable: test\n      database: quickstart_db\n"))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixGlobalRule\nmetadata:\n  namespace: ingress-apisix\n  name: apisix-global-rule-logging\nspec:\n  ingressClassName: apisix\n  plugins:\n  - name: clickhouse-logger\n    enable: true\n    config:\n      endpoint_addr: http://clickhouse-clickhouse-installation.apisix.svc.cluster.local:8123\n      user: quickstart-user\n      password: quickstart-pass\n      logtable: test\n      database: quickstart_db\n")))),(0,i.kt)("h2",{id:"configure-plugin-metadata"},"Configure Plugin Metadata"),(0,i.kt)("p",null,"To configure plugin metadata:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apisix.apache.org/v1alpha1\nkind: GatewayProxy\nmetadata:\n  namespace: ingress-apisix\n  name: apisix-config\nspec:\n  pluginMetadata:\n    opentelemetry: {\n      "trace_id_source": "x-request-id",\n      "resource": {\n        "service.name": "APISIX"\n      },\n      "collector": {\n        "address": "simplest-collector:4318",\n        "request_timeout": 3,\n        "request_headers": {\n          "Authorization": "token"\n        }\n      },\n      "batch_span_processor": {\n        "drop_on_queue_full": false,\n        "max_queue_size": 1024,\n        "batch_timeout": 2,\n        "inactive_timeout": 1,\n        "max_export_batch_size": 16\n      },\n      "set_ngx_var": true\n    }\n'))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("p",null,"Not currently supported."))),(0,i.kt)("h2",{id:"configure-plugin-config"},"Configure Plugin Config"),(0,i.kt)("p",null,"To create a plugin config and reference it in a route:"),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apisix.apache.org/v1alpha1\nkind: PluginConfig\nmetadata:\n  namespace: ingress-apisix\n  name: example-plugin-config\nspec:\n  plugins:\n  - name: response-rewrite\n    enable: true\n    config:\n      headers:\n        X-Plugin-Config: "example-response-rewrite"\n        X-Plugin-Test: "enabled"\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  parentRefs:\n  - name: apisix\n  rules:\n  - matches: \n    - path:\n        type: Exact\n        value: /ip\n    filters:\n    - type: ExtensionRef\n      extensionRef:\n        group: apisix.apache.org\n        kind: PluginConfig\n        name: example-plugin-config\n    backendRefs:\n    - name: httpbin\n      port: 80\n'))),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apisix.apache.org/v2\nkind: ApisixPluginConfig\nmetadata:\n  namespace: ingress-apisix\n  name: example-plugin-config\nspec:\n  ingressClassName: apisix\n  plugins:\n  - name: response-rewrite\n    enable: true\n    config:\n      headers:\n        X-Plugin-Config: "example-response-rewrite"\n        X-Plugin-Test: "enabled"\n---\napiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  namespace: ingress-apisix\n  name: httpbin\nspec:\n  ingressClassName: apisix\n  http:\n  - name: get-ip\n    match:\n      paths:\n      - /ip\n    backends:\n    - serviceName: httpbin\n      servicePort: 80\n    plugin_config_name: example-plugin-config\n')))),(0,i.kt)("h2",{id:"configure-gateway-access-information"},"Configure Gateway Access Information"),(0,i.kt)("p",null,"These configurations allow Ingress Controller users to access the gateway."),(0,i.kt)(s.Z,{groupId:"k8s-api",defaultValue:"gateway",values:[{label:"Gateway API",value:"gateway"},{label:"Ingress",value:"ingress"},{label:"APISIX CRD",value:"apisix-crd"}],mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"gateway",mdxType:"TabItem"},(0,i.kt)("p",null,"To configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"statusAddress"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: GatewayProxy\nmetadata:\n  namespace: ingress-apisix\n  name: apisix-config\nspec:\n  statusAddress:\n    - 10.24.87.13\n"))),(0,i.kt)(r.Z,{value:"ingress",mdxType:"TabItem"},(0,i.kt)("p",null,"If you are using Ingress resources, you can configure either ",(0,i.kt)("inlineCode",{parentName:"p"},"statusAddress")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"publishService"),"."),(0,i.kt)("p",null,"To configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"statusAddress"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: GatewayProxy\nmetadata:\n  namespace: ingress-apisix\n  name: apisix-config\nspec:\n  statusAddress:\n    - 10.24.87.13\n")),(0,i.kt)("p",null,"To configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishService"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v1alpha1\nkind: GatewayProxy\nmetadata:\n  namespace: ingress-apisix\n  name: apisix-config\nspec:\n  publishService: apisix-ee-3-gateway-gateway\n")),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"publishService"),", make sure your gateway Service is of ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadBalancer")," type the address can be populated. The controller will use the endpoint of this Service to update the status information of the Ingress resource. The format can be either ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace/svc-name")," or simply ",(0,i.kt)("inlineCode",{parentName:"p"},"svc-name")," if the default namespace is correctly set.")),(0,i.kt)(r.Z,{value:"apisix-crd",mdxType:"TabItem"},(0,i.kt)("p",null,"Not supported."))))}m.isMDXComponent=!0},58215:(e,n,a)=>{a.d(n,{Z:()=>i});var t=a(67294);const i=function(e){let{children:n,hidden:a,className:i}=e;return t.createElement("div",{role:"tabpanel",hidden:a,className:i},n)}},55064:(e,n,a)=>{a.d(n,{Z:()=>l});var t=a(67294),i=a(79443);const s=function(){const e=(0,t.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var r=a(86010);const p="tabItem_vU9c",o="tabItemActive_cw6a";const l=function(e){var n;const{lazy:a,block:i,defaultValue:l,values:c,groupId:u,className:m}=e,d=t.Children.toArray(e.children),g=null!=c?c:d.map((e=>({value:e.props.value,label:e.props.label}))),h=null!=l?l:null==(n=d.find((e=>e.props.default)))?void 0:n.props.value,{tabGroupChoices:k,setTabGroupChoices:y}=s(),[f,x]=(0,t.useState)(h),v=[];if(null!=u){const e=k[u];null!=e&&e!==f&&g.some((n=>n.value===e))&&x(e)}const b=e=>{const n=e.currentTarget,a=v.indexOf(n),t=g[a].value;x(t),null!=u&&(y(u,t),setTimeout((()=>{(function(e){const{top:n,left:a,bottom:t,right:i}=e.getBoundingClientRect(),{innerHeight:s,innerWidth:r}=window;return n>=0&&i<=r&&t<=s&&a>=0})(n)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(o),setTimeout((()=>n.classList.remove(o)),2e3))}),150))},w=e=>{var n;let a=null;switch(e.key){case"ArrowRight":{const n=v.indexOf(e.target)+1;a=v[n]||v[0];break}case"ArrowLeft":{const n=v.indexOf(e.target)-1;a=v[n]||v[v.length-1];break}}null==(n=a)||n.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},m)},g.map((e=>{let{value:n,label:a}=e;return t.createElement("li",{role:"tab",tabIndex:f===n?0:-1,"aria-selected":f===n,className:(0,r.Z)("tabs__item",p,{"tabs__item--active":f===n}),key:n,ref:e=>v.push(e),onKeyDown:w,onFocus:b,onClick:b},null!=a?a:n)}))),a?(0,t.cloneElement)(d.filter((e=>e.props.value===f))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},d.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==f})))))}},79443:(e,n,a)=>{a.d(n,{Z:()=>t});const t=(0,a(67294).createContext)(void 0)},86010:(e,n,a)=>{function t(e){var n,a,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(a=t(e[n]))&&(i&&(i+=" "),i+=a);else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}a.d(n,{Z:()=>i});const i=function(){for(var e,n,a=0,i="";a<arguments.length;)(e=arguments[a++])&&(n=t(e))&&(i&&(i+=" "),i+=n);return i}}}]);