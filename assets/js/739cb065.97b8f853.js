"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[21645],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=l(n),d=r,g=h["".concat(p,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},88810:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},assets:function(){return l},toc:function(){return c},default:function(){return h}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),s={title:"Apache APISIX \xd7 KubeSphere: Providing a better gateway and K8S Ingress Controller",author:"Jintao Zhang",authorURL:"https://github.com/tao12345666333",authorImageURL:"https://avatars.githubusercontent.com/u/3264292?v=4",keywords:["API Gateway","APISIX","KubeSphere","Ingress"],description:"This article describes the direct deployment of Apache APISIX and APISIX Ingress Controller in KubeSphere using the official Apache APISIX Helm repository. And Apache APISIX can be used as a gateway or as a data plane for APISIX Ingress Controller to carry business traffic.",tags:["Practical Case"]},i=void 0,p={permalink:"/blog/2021/08/31/Apache APISIX \xd7 KubeSphere-a-better-gateway-and-K8S-Ingress-Controller",source:"@site/blog/2021/08/31/Apache APISIX \xd7 KubeSphere-a-better-gateway-and-K8S-Ingress-Controller.md",title:"Apache APISIX \xd7 KubeSphere: Providing a better gateway and K8S Ingress Controller",description:"This article describes the direct deployment of Apache APISIX and APISIX Ingress Controller in KubeSphere using the official Apache APISIX Helm repository. And Apache APISIX can be used as a gateway or as a data plane for APISIX Ingress Controller to carry business traffic.",date:"2021-08-31T00:00:00.000Z",formattedDate:"August 31, 2021",tags:[{label:"Practical Case",permalink:"/blog/tags/practical-case"}],readingTime:5.485,truncated:!0,authors:[{name:"Jintao Zhang",url:"https://github.com/tao12345666333",imageURL:"https://avatars.githubusercontent.com/u/3264292?v=4"}],prevItem:{title:"Python helps you develop Apache APISIX plugin",permalink:"/blog/2021/09/06/python-helps-you-quickly-with-Apache-APISIX-development"},nextItem:{title:"Webinar\uff5c See you at the Apache APISIX Ingress Community Meeting on Wednesday at 2pm!",permalink:"/blog/2021/08/30/Ingress-Meeting"}},l={authorsImageUrls:[void 0]},c=[{value:"Introduction to KubeSphere",id:"introduction-to-kubesphere",children:[]},{value:"Introduction to Apache APISIX",id:"introduction-to-apache-apisix",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Deploy Apache APISIX and Apache APISIX Ingress Controller",id:"deploy-apache-apisix-and-apache-apisix-ingress-controller",children:[]},{value:"Deploying the sample project",id:"deploying-the-sample-project",children:[]},{value:"Using Apache APISIX as a Gateway Proxy",id:"using-apache-apisix-as-a-gateway-proxy",children:[]},{value:"Proxy services using APISIX Ingress Controller",id:"proxy-services-using-apisix-ingress-controller",children:[]},{value:"Summary",id:"summary",children:[]},{value:"Future Outlook",id:"future-outlook",children:[]}],u={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This article describes the direct deployment of Apache APISIX and APISIX Ingress Controller in KubeSphere using the official Apache APISIX Helm repository. And Apache APISIX can be used as a gateway or a data plane for APISIX Ingress Controller to carry business traffic.")),(0,o.kt)("h2",{id:"introduction-to-kubesphere"},"Introduction to KubeSphere"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://kubesphere.io/"},"KubeSphere")," is a cloud-native application-oriented system built on top of Kubernetes, fully open source, supporting multi-cloud and multi-cluster management, providing full-stack IT automation capabilities, and simplifying enterprise DevOps workflows. Its architecture makes it easy to integrate third-party applications with cloud-native eco-components in a plug-and-play fashion."),(0,o.kt)("p",null,"As a full-stack, multi-tenant container platform, KubeSphere provides an operations-friendly, wizard-based interface to help organizations quickly build a powerful and feature-rich container cloud platform. DevOps, application lifecycle management, microservice governance (service grid), log query and collection, service and networking, multi-tenant management, monitoring and alerting, event and audit queries, storage management, access control, GPU support, network policies, image repository management, and security management."),(0,o.kt)("h2",{id:"introduction-to-apache-apisix"},"Introduction to Apache APISIX"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix"},"Apache APISIX")," is an open source, high-performance, dynamic cloud-native gateway donated to the Apache Foundation by Shenzhen Tributary Technology Co. Apache APISIX currently covers API gateways, LB, Kubernetes Ingress, Service Mesh, and many other scenarios."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Existing Kubernetes clusters already managed in KubeSphere."),(0,o.kt)("h2",{id:"deploy-apache-apisix-and-apache-apisix-ingress-controller"},"Deploy Apache APISIX and Apache APISIX Ingress Controller"),(0,o.kt)("p",null,"We can either enable KubeSphere's ",(0,o.kt)("a",{parentName:"p",href:"https://kubesphere.io/docs/pluggable-components/app-store/"},"AppStore")," by referring to KubeSphere's documentation, or use the ",(0,o.kt)("a",{parentName:"p",href:"https://kubesphere.io/docs/pluggable-components/app-store/"},"Helm repository")," using Apache APISIX (",(0,o.kt)("a",{parentName:"p",href:"https://charts.apiseven.com"},"https://charts.apiseven.com"),") for deployment. Here, we directly use the Helm repository of Apache APISIX for deployment."),(0,o.kt)("p",null,"Execute the following command to add the Helm repo for Apache APISIX and complete the deployment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'\u279c ~ helm repo add apisix https://charts.apiseven.com\n"apisix" has been added to your repositories\n\u279c ~ helm repo add bitnami https://charts.bitnami.com/bitnami\n"bitnami" has been added to your repositories\n\u279c ~ helm repo update\n\u279c ~ kubectl create ns apisix\nnamespace/apisix created\n\u279c ~ helm install apisix apisix/apisix --set gateway.type=NodePort --set ingress-controller.enabled=true --namespace apisix\nW0827 18:19:58.504653 294386 warnings.go:70] apiextensions.k8s.io/v1beta1 CustomResourceDefinition is deprecated in v1.16+, unavailable in v1.22+; use apiextensions.k8s.io/v1 CustomResourceDefinition\nNAME: apisix\nLAST DEPLOYED: Fri Aug 27 18:20:00 2021\nNAMESPACE: apisix\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\n1: Get the application URL by running these commands:\n  export NODE_PORT=$(kubectl get --namespace apisix -o jsonpath="{.spec.ports[0].nodePort}" services apisix-gateway)\n  export NODE_IP=$(kubectl get nodes --namespace apisix -o jsonpath="{.items[0].status.addresses[0].address}")\n  echo http://$NODE_IP:$NODE_PORT\n')),(0,o.kt)("p",null,"Verify that it has been successfully deployed and is running."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"\u279c ~ kubectl -n apisix get pods\nNAME                                         READY   STATUS    RESTARTS   AGE\napisix-77d7545d4d-cvdhs                      1/1     Running   0          4m7s\napisix-etcd-0                                1/1     Running   0          4m7s\napisix-etcd-1                                1/1     Running   0          4m7s\napisix-etcd-2                                1/1     Running   0          4m7s\napisix-ingress-controller-74c6b5fbdd-94ngk   1/1     Running   0          4m7s\n")),(0,o.kt)("p",null,"You can see that the related Pods are running properly."),(0,o.kt)("h2",{id:"deploying-the-sample-project"},"Deploying the sample project"),(0,o.kt)("p",null,"We use ",(0,o.kt)("inlineCode",{parentName:"p"},"kennethreitz/httpbin")," as a sample project for demonstration purposes. The deployment is also done directly in KubeSphere."),(0,o.kt)("p",null,"Just select Services - Stateless Services and create it."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1630404138226-5475c163-d372-414e-af74-5c5a86f19629.png",alt:"KubeSphere APISIX Ingress Controller demo"})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1630404173444-9bb73e0d-5bee-428e-a257-4685500344ef.png",alt:"KubeSphere APISIX Ingress Controller demo"})),(0,o.kt)("p",null,"You can see the successful deployment in KubeSphere's Services and Loads interface, or you can check directly in the terminal to see if the deployment has succeeded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"~ kubectl get pods,svc -l app=httpbin\nNAME                             READY   STATUS    RESTARTS   AGE\npod/httpbin-v1-7d6dc7d5f-5lcmg   1/1     Running   0          48s\n\nNAME              TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nservice/httpbin   ClusterIP   10.96.0.5    <none>        80/TCP    48s\n")),(0,o.kt)("h2",{id:"using-apache-apisix-as-a-gateway-proxy"},"Using Apache APISIX as a Gateway Proxy"),(0,o.kt)("p",null,"We start by demonstrating how to use Apache APISIX as a gateway to proxy services in a Kubernetes cluster."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'root@apisix:~$ kubectl -n apisix exec -it `kubectl -n apisix get pods -l app.kubernetes.io/name=apisix -o name` -- bash\nbash-5.1# curl httpbin.default/get\n{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "httpbin.default",\n    "User-Agent": "curl/7.77.0"\n  },\n  "origin": "10.244.2.9",\n  "url": "http://httpbin.default/get"\n}\n')),(0,o.kt)("p",null,"As you can see, the sample project can be accessed normally from within the Apache APISIX Pod. Next, use Apache APISIX to proxy the sample project."),(0,o.kt)("p",null,"Here we use ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," to call the admin interface of Apache APISIX and create a route. All requests with host header ",(0,o.kt)("inlineCode",{parentName:"p"},"httpbin.org")," are forwarded to the actual application service ",(0,o.kt)("inlineCode",{parentName:"p"},"httpbin.default:80"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'bash-5.1# curl "http://127.0.0.1:9180/apisix/admin/routes/1" -H "X-API-KEY: edd1c9f034335f136f87ad84b625c8f1" -X PUT -d \'\n{\n  "uri": "/get",\n  "host": "httpbin.org",\n  "upstream": {\n    "type": "roundrobin",\n    "nodes": {\n      "httpbin.default:80": 1\n    }\n  }\n}\'\n{"node":{"key":"\\/apisix\\/routes\\/1","value":{"host":"httpbin.org","update_time":1630060883,"uri":"\\/*","create_time":1630060883,"priority":0,"upstream":{"type":"roundrobin","pass_host":"pass","nodes":{"httpbin.default:80":1},"hash_on":"vars","scheme":"http"},"id":"1","status":1}},"action":"set"}\n')),(0,o.kt)("p",null,"You'll get output similar to the above, next verify that the proxy is successful:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'bash-5.1# curl http://127.0.0.1:9080/get -H "HOST: httpbin.org"\n{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "httpbin.org",\n    "User-Agent": "curl/7.77.0",\n    "X-Forwarded-Host": "httpbin.org"\n  },\n  "origin": "127.0.0.1",\n  "url": "http://httpbin.org/get"\n}\n')),(0,o.kt)("p",null,"The above output shows that the traffic of the example project has been proxied through Apache APISIX. Next, let's try to access the sample project outside the cluster via Apache APISIX."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"root@apisix:~$ kubectl  -n apisix get svc -l app.kubernetes.io/name=apisix\nNAME             TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\napisix-admin     ClusterIP   10.96.33.97    <none>        9180/TCP       22m\napisix-gateway   NodePort    10.96.126.83   <none>        80:31441/TCP   22m\n")),(0,o.kt)("p",null,"When deployed using Helm chart, the Apache APISIX port is exposed by default as a NodePort. We use the Node IP + NodePort port for access testing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'root@apisix:~$ curl http://172.18.0.5:31441/get -H "HOST: httpbin.org"\n{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "httpbin.org",\n    "User-Agent": "curl/7.76.1",\n    "X-Forwarded-Host": "httpbin.org"\n  },\n  "origin": "10.244.2.1",\n  "url": "http://httpbin.org/get"\n}\n')),(0,o.kt)("p",null,"As you can see, ",(0,o.kt)("strong",{parentName:"p"},"it is already possible to proxy services within the Kubernetes cluster outside the cluster via Apache APISIX as a gateway.")),(0,o.kt)("h2",{id:"proxy-services-using-apisix-ingress-controller"},"Proxy services using APISIX Ingress Controller"),(0,o.kt)("p",null,"We can add application routes (Ingress) directly in KubeSphere and Apache APISIX Ingress Controller will automatically sync the routing rules to Apache APISIX to complete the proxy for the service."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1630404265190-585b9b09-72d5-4320-b0fe-9cf8a73c55ea.png",alt:"KubeSphere APISIX Ingress Controller demo"})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1630404325747-b92928dc-2c6b-4574-a49d-32b6bcb187f9.png",alt:"KubeSphere APISIX Ingress Controller demo"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," We added the annotation configuration of ",(0,o.kt)("inlineCode",{parentName:"p"},"kubernetes.io/ingress.class: apisix")," to support multiple ingress-controller scenarios in the cluster."),(0,o.kt)("p",null,"After saving, you can see the following screen."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://static.apiseven.com/202108/1630404366474-dfe8ae08-f16d-417f-8ef3-3495ebda0f7d.png",alt:"KubeSphere APISIX Ingress Controller demo"})),(0,o.kt)("p",null,"Test if the proxy is successful under the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'root@apisix:~$ curl http://172.18.0.5:31441/get -H "HOST: http-ing.org"  {  "args": {},   "headers": {    "Accept": "*/*",     "Host": "http-ing.org",     "User-Agent": "curl/7.76.1",     "X-Forwarded-Host": "http-ing.org"  },   "origin": "10.244.2.1",   "url": "http://http-ing.org/get"}\n')),(0,o.kt)("p",null,"You can see that it is also proxied properly."),(0,o.kt)("p",null,"In addition to the above, Apache APISIX Ingress Controller extends Kubernetes by way of CRD, and you can also publish custom resources like ",(0,o.kt)("inlineCode",{parentName:"p"},"ApisixRoute")," to expose services in Kubernetes to the public."),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"You can deploy Apache APISIX and APISIX Ingress Controller directly in KubeSphere using the official Apache APISIX Helm repository. And Apache APISIX can be used as a gateway or as a data plane for APISIX Ingress Controller to carry business traffic."),(0,o.kt)("h2",{id:"future-outlook"},"Future Outlook"),(0,o.kt)("p",null,"Apache APISIX has already partnered with the KubeSphere community, so you can find Apache APISIX directly in KubeSphere's own application repository, without having to manually add a Helm repository."))}h.isMDXComponent=!0}}]);