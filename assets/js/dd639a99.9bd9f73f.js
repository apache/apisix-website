"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[56031],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(t),h=i,m=c["".concat(s,".").concat(h)]||c[h]||p[h]||r;return t?a.createElement(m,o(o({ref:n},d),{},{components:t})):a.createElement(m,o({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},52784:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const r={title:"basic-auth",keywords:["Apache APISIX","API Gateway","Plugin","Basic Auth","basic-auth"],description:"The basic-auth Plugin adds basic access authentication for Consumers to authenticate themselves before being able to access Upstream resources."},o=void 0,l={unversionedId:"plugins/basic-auth",id:"plugins/basic-auth",isDocsHomePage:!1,title:"basic-auth",description:"The basic-auth Plugin adds basic access authentication for Consumers to authenticate themselves before being able to access Upstream resources.",source:"@site/docs/apisix/plugins/basic-auth.md",sourceDirName:"plugins",slug:"/plugins/basic-auth",permalink:"/docs/apisix/next/plugins/basic-auth",editUrl:"/edit#https://github.com/apache/apisix/edit/master/docs/en/latest/plugins/basic-auth.md",tags:[],version:"current",frontMatter:{title:"basic-auth",keywords:["Apache APISIX","API Gateway","Plugin","Basic Auth","basic-auth"],description:"The basic-auth Plugin adds basic access authentication for Consumers to authenticate themselves before being able to access Upstream resources."},sidebar:"docs",previous:{title:"jwe-decrypt",permalink:"/docs/apisix/next/plugins/jwe-decrypt"},next:{title:"authz-keycloak",permalink:"/docs/apisix/next/plugins/authz-keycloak"}},s=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Examples",id:"examples",children:[{value:"Implement Basic Authentication on Route",id:"implement-basic-authentication-on-route",children:[]},{value:"Hide Authentication Information From Upstream",id:"hide-authentication-information-from-upstream",children:[]},{value:"Add Consumer Custom ID to Header",id:"add-consumer-custom-id-to-header",children:[]},{value:"Rate Limit with Anonymous Consumer",id:"rate-limit-with-anonymous-consumer",children:[]}]}],u={toc:s};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://docs.api7.ai/hub/basic-auth"})),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," Plugin adds ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Basic_access_authentication"},"basic access authentication")," for ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/next/terminology/consumer"},"Consumers")," to authenticate themselves before being able to access Upstream resources."),(0,i.kt)("p",null,"When a Consumer is successfully authenticated, APISIX adds additional headers, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"X-Consumer-Username"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"X-Credential-Indentifier"),", and other Consumer custom headers if configured, to the request, before proxying it to the Upstream service. The Upstream service will be able to differentiate between consumers and implement additional logics as needed. If any of these values is not available, the corresponding header will not be added."),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("p",null,"For Consumer/Credentials:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"username"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"True"),(0,i.kt)("td",{parentName:"tr",align:null},"Unique basic auth username for a consumer.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"password"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"True"),(0,i.kt)("td",{parentName:"tr",align:null},"Basic auth password for the consumer.")))),(0,i.kt)("p",null,"NOTE: ",(0,i.kt)("inlineCode",{parentName:"p"},'encrypt_fields = {"password"}')," is also defined in the schema, which means that the field will be stored encrypted in etcd. See ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/next/plugin-develop#encrypted-storage-fields"},"encrypted storage fields"),"."),(0,i.kt)("p",null,"For Route:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"hide_credentials"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"If true, do not pass the authorization request header to Upstream services.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"anonymous_consumer"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Anonymous Consumer name. If configured, allow anonymous users to bypass the authentication.")))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"The examples below demonstrate how you can work with the ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," Plugin for different scenarios."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can fetch the ",(0,i.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,i.kt)("h3",{id:"implement-basic-authentication-on-route"},"Implement Basic Authentication on Route"),(0,i.kt)("p",null,"The following example demonstrates how to implement basic authentication on a Route."),(0,i.kt)("p",null,"Create a Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"johndoe"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "johndoe"\n  }\'\n')),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," Credential for the consumer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/johndoe/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-basic-auth",\n    "plugins": {\n      "basic-auth": {\n        "username": "johndoe",\n        "password": "john-key"\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create a Route with ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "basic-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "basic-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("h4",{id:"verify-with-a-valid-key"},"Verify with a Valid Key"),(0,i.kt)("p",null,"Send a request to with the valid key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -u johndoe:john-key\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Apikey": "john-key",\n    "Authorization": "Basic am9obmRvZTpqb2huLWtleQ==",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66e5107c-5bb3e24f2de5baf733aec1cc",\n    "X-Consumer-Username": "john",\n    "X-Credential-Indentifier": "cred-john-basic-auth",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "origin": "192.168.65.1, 205.198.122.37",\n  "url": "http://127.0.0.1/get"\n}\n')),(0,i.kt)("h4",{id:"verify-with-an-invalid-key"},"Verify with an Invalid Key"),(0,i.kt)("p",null,"Send a request with an invalid key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -u johndoe:invalid-key\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," response with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'{"message":"Invalid user authorization"}\n')),(0,i.kt)("h4",{id:"verify-without-a-key"},"Verify without a Key"),(0,i.kt)("p",null,"Send a request to without a key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything"\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," response with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'{"message":"Missing authorization in request"}\n')),(0,i.kt)("h3",{id:"hide-authentication-information-from-upstream"},"Hide Authentication Information From Upstream"),(0,i.kt)("p",null,"The following example demonstrates how to prevent the key from being sent to the Upstream services by configuring ",(0,i.kt)("inlineCode",{parentName:"p"},"hide_credentials"),". In APISIX, the authentication key is forwarded to the Upstream services by default, which might lead to security risks in some circumstances and you should consider updating ",(0,i.kt)("inlineCode",{parentName:"p"},"hide_credentials"),"."),(0,i.kt)("p",null,"Create a Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"johndoe"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "johndoe"\n  }\'\n')),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," Credential for the consumer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/johndoe/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-basic-auth",\n    "plugins": {\n      "basic-auth": {\n        "username": "johndoe",\n        "password": "john-key"\n      }\n    }\n  }\'\n')),(0,i.kt)("h4",{id:"without-hiding-credentials"},"Without Hiding Credentials"),(0,i.kt)("p",null,"Create a Route with ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," and configure ",(0,i.kt)("inlineCode",{parentName:"p"},"hide_credentials")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", which is the default configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n-H "X-API-KEY: ${admin_key}" \\\n-d \'{\n  "id": "basic-auth-route",\n  "uri": "/anything",\n  "plugins": {\n    "basic-auth": {\n      "hide_credentials": false\n    }\n  },\n  "upstream": {\n    "type": "roundrobin",\n    "nodes": {\n      "httpbin.org:80": 1\n    }\n  }\n}\'\n')),(0,i.kt)("p",null,"Send a request with the valid key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -u johndoe:john-key\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "data": "",\n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept": "*/*",\n    "Authorization": "Basic am9obmRvZTpqb2huLWtleQ==",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66cc2195-22bd5f401b13480e63c498c6",\n    "X-Consumer-Username": "john",\n    "X-Credential-Indentifier": "cred-john-basic-auth",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "json": null,\n  "method": "GET",\n  "origin": "192.168.65.1, 43.228.226.23",\n  "url": "http://127.0.0.1/anything"\n}\n')),(0,i.kt)("p",null,"Note that the credentials are visible to the Upstream service in base64-encoded format."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can also pass the base64-encoded credentials in the request using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Authorization")," header as such:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -H "Authorization: Basic am9obmRvZTpqb2huLWtleQ=="\n')))),(0,i.kt)("h4",{id:"hide-credentials"},"Hide Credentials"),(0,i.kt)("p",null,"Update the plugin's ",(0,i.kt)("inlineCode",{parentName:"p"},"hide_credentials")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes/basic-auth-route" -X PATCH \\\n-H "X-API-KEY: ${admin_key}" \\\n-d \'{\n  "plugins": {\n    "basic-auth": {\n      "hide_credentials": true\n    }\n  }\n}\'\n')),(0,i.kt)("p",null,"Send a request with the valid key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -u johndoe:john-key\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "data": "",\n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66cc21a7-4f6ac87946e25f325167d53a",\n    "X-Consumer-Username": "john",\n    "X-Credential-Indentifier": "cred-john-basic-auth",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "json": null,\n  "method": "GET",\n  "origin": "192.168.65.1, 43.228.226.23",\n  "url": "http://127.0.0.1/anything"\n}\n')),(0,i.kt)("p",null,"Note that the credentials are no longer visible to the Upstream service."),(0,i.kt)("h3",{id:"add-consumer-custom-id-to-header"},"Add Consumer Custom ID to Header"),(0,i.kt)("p",null,"The following example demonstrates how you can attach a Consumer custom ID to authenticated request in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer-Custom-Id")," header, which can be used to implement additional logics as needed."),(0,i.kt)("p",null,"Create a Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"johndoe")," with a custom ID label:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "johndoe",\n    "labels": {\n      "custom_id": "495aec6a"\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," Credential for the consumer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/johndoe/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-basic-auth",\n    "plugins": {\n      "basic-auth": {\n        "username": "johndoe",\n        "password": "john-key"\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create a Route with ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "basic-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "basic-auth": {}\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"To verify, send a request to the Route with the valid key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i "http://127.0.0.1:9080/anything" -u johndoe:john-key\n')),(0,i.kt)("p",null,"You should see an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 200 OK")," response with the ",(0,i.kt)("inlineCode",{parentName:"p"},"X-Consumer-Custom-Id")," similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "data": "",\n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept": "*/*",\n    "Authorization": "Basic am9obmRvZTpqb2huLWtleQ==",\n    "Host": "127.0.0.1",\n    "User-Agent": "curl/8.6.0",\n    "X-Amzn-Trace-Id": "Root=1-66ea8d64-33df89052ae198a706e18c2a",\n    "X-Consumer-Username": "johndoe",\n    "X-Credential-Identifier": "cred-john-basic-auth",\n    "X-Consumer-Custom-Id": "495aec6a",\n    "X-Forwarded-Host": "127.0.0.1"\n  },\n  "json": null,\n  "method": "GET",\n  "origin": "192.168.65.1, 205.198.122.37",\n  "url": "http://127.0.0.1/anything"\n}\n')),(0,i.kt)("h3",{id:"rate-limit-with-anonymous-consumer"},"Rate Limit with Anonymous Consumer"),(0,i.kt)("p",null,"The following example demonstrates how you can configure different rate limiting policies by regular and anonymous consumers, where the anonymous Consumer does not need to authenticate and has less quotas."),(0,i.kt)("p",null,"Create a regular Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"johndoe")," and configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 3 within a 30-second window:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "johndoe",\n    "plugins": {\n      "limit-count": {\n        "count": 3,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," Credential for the Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"johndoe"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers/johndoe/credentials" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "cred-john-basic-auth",\n    "plugins": {\n      "basic-auth": {\n        "username": "johndoe",\n        "password": "john-key"\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create an anonymous user ",(0,i.kt)("inlineCode",{parentName:"p"},"anonymous")," and configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"limit-count")," Plugin to allow for a quota of 1 within a 30-second window:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/consumers" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "username": "anonymous",\n    "plugins": {\n      "limit-count": {\n        "count": 1,\n        "time_window": 30,\n        "rejected_code": 429\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"Create a Route and configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth")," Plugin to accept anonymous Consumer ",(0,i.kt)("inlineCode",{parentName:"p"},"anonymous")," from bypassing the authentication:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://127.0.0.1:9180/apisix/admin/routes" -X PUT \\\n  -H "X-API-KEY: ${admin_key}" \\\n  -d \'{\n    "id": "basic-auth-route",\n    "uri": "/anything",\n    "plugins": {\n      "basic-auth": {\n        "anonymous_consumer": "anonymous"\n      }\n    },\n    "upstream": {\n      "type": "roundrobin",\n      "nodes": {\n        "httpbin.org:80": 1\n      }\n    }\n  }\'\n')),(0,i.kt)("p",null,"To verify, send five consecutive requests with ",(0,i.kt)("inlineCode",{parentName:"p"},"john"),"'s key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -u johndoe:john-key -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,i.kt)("p",null,"You should see the following response, showing that out of the 5 requests, 3 requests were successful (status code 200) while the others were rejected (status code 429)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"200:    3, 429:    2\n")),(0,i.kt)("p",null,"Send five anonymous requests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'resp=$(seq 5 | xargs -I{} curl "http://127.0.0.1:9080/anything" -o /dev/null -s -w "%{http_code}\\n") && \\\n  count_200=$(echo "$resp" | grep "200" | wc -l) && \\\n  count_429=$(echo "$resp" | grep "429" | wc -l) && \\\n  echo "200": $count_200, "429": $count_429\n')),(0,i.kt)("p",null,"You should see the following response, showing that only one request was successful:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"200:    1, 429:    4\n")))}d.isMDXComponent=!0}}]);