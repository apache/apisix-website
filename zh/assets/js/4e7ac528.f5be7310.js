"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[90596],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),h=r,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||a;return t?i.createElement(m,l(l({ref:n},u),{},{components:t})):i.createElement(m,l({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<a;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},73627:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=t(87462),r=(t(67294),t(3905));const a={title:"The internal of apisix java plugin runner"},l=void 0,o={unversionedId:"the-internal-of-apisix-java-plugin-runner",id:"the-internal-of-apisix-java-plugin-runner",isDocsHomePage:!1,title:"The internal of apisix java plugin runner",description:"This article explains the internal design of apisix-java-plugin-runner.",source:"@site/docs/apisix-java-plugin-runner/the-internal-of-apisix-java-plugin-runner.md",sourceDirName:".",slug:"/the-internal-of-apisix-java-plugin-runner",permalink:"/zh/docs/java-plugin-runner/next/the-internal-of-apisix-java-plugin-runner",editUrl:"/zh/edit#https://github.com/apache/apisix-java-plugin-runner/edit/main/docs/zh/latest/the-internal-of-apisix-java-plugin-runner.md",tags:[],version:"current",frontMatter:{title:"The internal of apisix java plugin runner"},sidebar:"docs",previous:{title:"How it works",permalink:"/zh/docs/java-plugin-runner/next/how-it-works"},next:{title:"Installation",permalink:"/zh/docs/java-plugin-runner/next/installation-guide"}},p=[{value:"Table of Contents",id:"table-of-contents",children:[]},{value:"Overview",id:"overview",children:[]},{value:"Communication",id:"communication",children:[]},{value:"Serialization",id:"serialization",children:[]},{value:"Codec",id:"codec",children:[]},{value:"Threading model",id:"threading-model",children:[]}],s={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This article explains the internal design of apisix-java-plugin-runner."),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#communication"},"Communication")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#serialization"},"Serialization")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#codec"},"Codec"))),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The apisix-java-plugin-runner designed as a TCP server built using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/netty/netty"},"netty"),",\nit provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"PluginFilter")," interface for users to implement."),(0,r.kt)("p",null,"Users only need to focus on their business logic, not on the details of how the apisix java plugin runner communicates with APISIX."),(0,r.kt)("p",null,"The inter-process communication between them is depicted by the following diagram."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix-java-plugin-runner/main/docs/assets/images/the-internal-of-apisix-java-plugin-runner.png",alt:"the-internal-of-apisix-java-plugin-runner"})),(0,r.kt)("h2",{id:"communication"},"Communication"),(0,r.kt)("p",null,"apisix-java-plugin-runner and APISIX use the Unix Domain Socket for inter-process communication,\nso they need to be deployed in the same instance."),(0,r.kt)("p",null,"apisix-java-plugin-runner is managed by APISIX. APISIX starts the apisix-java-plugin-runner when it starts and ends it when it\nends. if the apisix-java-plugin-runner quits in the middle, APISIX will restart it automatically."),(0,r.kt)("h2",{id:"serialization"},"Serialization"),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/flatbuffers"},"flatbuffers")),(0,r.kt)("p",null,"FlatBuffers is a cross platform serialization library architected for maximum memory efficiency.\nIt allows you to directly access serialized data without parsing/unpacking it first, while still having great forward/backward compatibility."),(0,r.kt)("p",null,"You can refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/api7/ext-plugin-proto/blob/main/ext-plugin.fbs"},"ext-plugin.fbs"),"\nschema file to see how Lua and Java layout the serialized objects."),(0,r.kt)("h2",{id:"codec"},"Codec"),(0,r.kt)("p",null,"apisix-java-plugin-runner and APISIX use a private binary protocol for coding and decoding.\nThe protocol format is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1 byte of type + 3 bytes of length + data\n")),(0,r.kt)("p",null,"The type can be 0 ~ 7, and the length can be [0, 8M). The length of data is determined by length."),(0,r.kt)("p",null,"The current type takes the following values"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 means error"),(0,r.kt)("li",{parentName:"ul"},"1 means prepare_conf"),(0,r.kt)("li",{parentName:"ul"},"2 means http_req_call")),(0,r.kt)("p",null,"The binary data generated by the flatbuffer serialization is placed in the data segment."),(0,r.kt)("h2",{id:"threading-model"},"Threading model"),(0,r.kt)("p",null,"Apisix plugin runner will run your plugins directly onto the event loop."),(0,r.kt)("p",null,"While this empower the best performance possible, as a plugin developer you will have the responsibility\nnever to block threads on the event loop. Doing so would result in catastrophic performance drop."),(0,r.kt)("p",null,"Hopefully one can write asynchronous plugins easily: just call the ",(0,r.kt)("inlineCode",{parentName:"p"},"PluginFilterChain")," as a callback once you\nare done."),(0,r.kt)("p",null,"For instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Component\npublic class AsyncResponseFilter implements PluginFilter {\n    @Override\n    public String name() {\n        return "AyncResponseFilter";\n    }\n\n    @Override\n    public void postFilter(PostRequest request, PostResponse response, PluginFilterChain chain) {\n        callExternalService()\n            .thenAccept(body -> {\n                response.setBody(body);\n                chain.postFilter(request, response);\n            });\n    }\n\n    // This simulates calls to an external service\n    CompletableFuture<String> callExternalService() {\n        return CompletableFuture.completedFuture("response_body");\n    }\n}\n')))}u.isMDXComponent=!0}}]);