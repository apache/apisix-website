"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[37674],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(p,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},77697:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"Wasm"},l=void 0,o={unversionedId:"wasm",id:"version-3.10/wasm",isDocsHomePage:!1,title:"Wasm",description:"APISIX supports Wasm plugins written with Proxy Wasm SDK.",source:"@site/docs-apisix_versioned_docs/version-3.10/wasm.md",sourceDirName:".",slug:"/wasm",permalink:"/zh/docs/apisix/3.10/wasm",editUrl:"/zh/edit#https://github.com/apache/apisix/edit/release/3.10/docs/zh/latest/wasm.md",tags:[],version:"3.10",frontMatter:{title:"Wasm"},sidebar:"version-3.10/docs",previous:{title:"\u5916\u90e8\u63d2\u4ef6",permalink:"/zh/docs/apisix/3.10/external-plugin"},next:{title:"The Implementation of Plugin Runner",permalink:"/zh/docs/apisix/3.10/internal/plugin-runner"}},p=[{value:"Programming model",id:"programming-model",children:[]},{value:"How to use",id:"how-to-use",children:[]},{value:"Example",id:"example",children:[]}],s={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"APISIX supports Wasm plugins written with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/proxy-wasm/spec#sdks"},"Proxy Wasm SDK"),"."),(0,r.kt)("p",null,"Currently, only a few APIs are implemented. Please follow ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/api7/wasm-nginx-module"},"wasm-nginx-module")," to know the progress."),(0,r.kt)("h2",{id:"programming-model"},"Programming model"),(0,r.kt)("p",null,"The plugin supports the following concepts from Proxy Wasm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"                    Wasm Virtual Machine\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Your Plugin                                               \u2502\n\u2502          \u2502                                                     \u2502\n\u2502          \u2502 1: 1                                                \u2502\n\u2502          \u2502         1: N                                        \u2502\n\u2502      VMContext  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  PluginContext                      \u2502\n\u2502                                           \u2572 1: N               \u2502\n\u2502                                            \u2572                   \u2502\n\u2502                                             \u2572  HttpContext     \u2502\n\u2502                                               (Http stream)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All plugins run in the same Wasm VM, like the Lua plugin in the Lua VM"),(0,r.kt)("li",{parentName:"ul"},"Each plugin has its own VMContext (the root ctx)"),(0,r.kt)("li",{parentName:"ul"},"Each configured route/global rules has its own PluginContext (the plugin ctx).\nFor example, if we have a service configuring with Wasm plugin, and two routes inherit from it,\nthere will be two plugin ctxs."),(0,r.kt)("li",{parentName:"ul"},"Each HTTP request which hits the configuration will have its own HttpContext (the HTTP ctx).\nFor example, if we configure both global rules and route, the HTTP request will\nhave two HTTP ctxs, one for the plugin ctx from global rules and the other for the\nplugin ctx from route.")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("p",null,"First of all, we need to define the plugin in ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'wasm:\n  plugins:\n    - name: wasm_log # the name of the plugin\n      priority: 7999 # priority\n      file: t/wasm/log/main.go.wasm # the path of `.wasm` file\n      http_request_phase: access # default to "access", can be one of ["access", "rewrite"]\n')),(0,r.kt)("p",null,"That's all. Now you can use the wasm plugin as a regular plugin."),(0,r.kt)("p",null,"For example, enable this plugin on the specified route:"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can fetch the ",(0,r.kt)("inlineCode",{parentName:"p"},"admin_key")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yaml")," and save to an environment variable with the following command:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin_key=$(yq '.deployment.admin.admin_key[0].key' conf/config.yaml | sed 's/\"//g')\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i http://127.0.0.1:9180/apisix/admin/routes/1  -H "X-API-KEY: $admin_key" -X PUT -d \'\n{\n    "uri": "/index.html",\n    "plugins": {\n         "wasm_log": {\n             "conf": "blahblah"\n         }\n    },\n    "upstream": {\n        "type": "roundrobin",\n        "nodes": {\n            "127.0.0.1:1980": 1\n        }\n    }\n}\'\n')),(0,r.kt)("p",null,"Attributes below can be configured in the plugin:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Requirement"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Valid"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"conf"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},'!= ""'),(0,r.kt)("td",{parentName:"tr",align:null},"the plugin ctx configuration which can be fetched via Proxy Wasm SDK")))),(0,r.kt)("p",null,"Here is the mapping between Proxy Wasm callbacks and APISIX's phases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_configure"),": run once there is not PluginContext for the new configuration.\nFor example, when the first request hits the route which has Wasm plugin configured."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_http_request_headers"),": run in the access/rewrite phase, depends on the configuration of ",(0,r.kt)("inlineCode",{parentName:"li"},"http_request_phase"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_http_request_body"),": run in the same phase of ",(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_http_request_headers"),". To run this callback, we need to set property ",(0,r.kt)("inlineCode",{parentName:"li"},"wasm_process_req_body")," to non-empty value in ",(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_http_request_headers"),". See ",(0,r.kt)("inlineCode",{parentName:"li"},"t/wasm/request-body/main.go")," as an example."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_http_response_headers"),": run in the header_filter phase."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_http_response_body"),": run in the body_filter phase. To run this callback, we need to set property ",(0,r.kt)("inlineCode",{parentName:"li"},"wasm_process_resp_body")," to non-empty value in ",(0,r.kt)("inlineCode",{parentName:"li"},"proxy_on_http_response_headers"),". See ",(0,r.kt)("inlineCode",{parentName:"li"},"t/wasm/response-rewrite/main.go")," as an example.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"We have reimplemented some Lua plugin via Wasm, under ",(0,r.kt)("inlineCode",{parentName:"p"},"t/wasm/")," of this repo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"fault-injection"),(0,r.kt)("li",{parentName:"ul"},"forward-auth"),(0,r.kt)("li",{parentName:"ul"},"response-rewrite")))}m.isMDXComponent=!0}}]);