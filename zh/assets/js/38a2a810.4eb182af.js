"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[23698],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),p=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},91463:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=t(87462),a=(t(67294),t(3905));const i={title:"Install with Helm",keywords:["APISIX ingress","Apache APISIX","Kubernetes ingress","kind"],description:"Guide to install APISIX ingress controller on kind."},s=void 0,l={unversionedId:"install",id:"install",isDocsHomePage:!1,title:"Install with Helm",description:"Guide to install APISIX ingress controller on kind.",source:"@site/docs/apisix-ingress-controller/install.md",sourceDirName:".",slug:"/install",permalink:"/zh/docs/ingress-controller/next/install",editUrl:"/zh/edit#https://github.com/apache/apisix-ingress-controller/edit/master/docs/zh/latest/install.md",tags:[],version:"current",frontMatter:{title:"Install with Helm",keywords:["APISIX ingress","Apache APISIX","Kubernetes ingress","kind"],description:"Guide to install APISIX ingress controller on kind."},sidebar:"docs",previous:{title:"Deployment Architecture",permalink:"/zh/docs/ingress-controller/next/concepts/deployment-architecture"},next:{title:"Developer Guide",permalink:"/zh/docs/ingress-controller/next/developer-guide"}},o=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Install APISIX and APISIX Ingress Controller",id:"install-apisix-and-apisix-ingress-controller",children:[]},{value:"Install APISIX and APISIX Ingress Controller (Standalone API-driven mode)",id:"install-apisix-and-apisix-ingress-controller-standalone-api-driven-mode",children:[]},{value:"Install APISIX Ingress Controller",id:"install-apisix-ingress-controller",children:[]}],p={toc:o};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Helm is a package manager for Kubernetes that automates the release and management of software on Kubernetes."),(0,a.kt)("p",null,"This document guides you through installing the APISIX ingress controller using Helm."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Before installing APISIX ingress controller, ensure you have:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A working Kubernetes cluster (version 1.26+)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Production: TKE, EKS, AKS, or other cloud-managed clusters"),(0,a.kt)("li",{parentName:"ul"},"Development: minikube, kind, or k3s"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/"},"kubectl")," installed and configured to access your cluster"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/"},"Helm")," (version 3.8+) installed")),(0,a.kt)("p",null,"Make sure to update the Helm repositories:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add apisix https://charts.apiseven.com\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\n")),(0,a.kt)("h2",{id:"install-apisix-and-apisix-ingress-controller"},"Install APISIX and APISIX Ingress Controller"),(0,a.kt)("p",null,"The script below installs APISIX and APISIX Ingress Controller:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm install apisix \\\n  --namespace ingress-apisix \\\n  --create-namespace \\\n  --set ingress-controller.enabled=true \\\n  --set ingress-controller.apisix.adminService.namespace=ingress-apisix \\\n  --set ingress-controller.gatewayProxy.createDefault=true \\\n  apisix/apisix\n")),(0,a.kt)("h2",{id:"install-apisix-and-apisix-ingress-controller-standalone-api-driven-mode"},"Install APISIX and APISIX Ingress Controller (Standalone API-driven mode)"),(0,a.kt)("p",null,"To run APISIX in ",(0,a.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/deployment-modes/#api-driven-experimental"},"APISIX Standalone API-driven mode"),", use the following script to install APISIX and the APISIX Ingress Controller:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm install apisix \\\n  --namespace ingress-apisix \\\n  --create-namespace \\\n  --set apisix.deployment.role=traditional \\\n  --set apisix.deployment.role_traditional.config_provider=yaml \\\n  --set etcd.enabled=false \\\n  --set ingress-controller.enabled=true \\\n  --set ingress-controller.config.provider.type=apisix-standalone \\\n  --set ingress-controller.apisix.adminService.namespace=ingress-apisix \\\n  --set ingress-controller.gatewayProxy.createDefault=true \\\n  apisix/apisix\n")),(0,a.kt)("h2",{id:"install-apisix-ingress-controller"},"Install APISIX Ingress Controller"),(0,a.kt)("p",null,"The script below installs APISIX Ingress Controller:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Set the access address and adminkey for apisix\nhelm install apisix-ingress-controller \\\n  --create-namespace \\\n  -n ingress-apisix \\\n  --set gatewayProxy.createDefault=true \\\n  --set gatewayProxy.provider.controlPlane.auth.adminKey.value=edd1c9f034335f136f87ad84b625c8f1 \\\n  --set apisix.adminService.namespace=apisix-ingress \\\n  --set apisix.adminService.name=apisix-admin \\\n  --set apisix.adminService.port=9180 \\\n  apisix/apisix-ingress-controller\n")))}c.isMDXComponent=!0}}]);