"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[23787],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),g=a,h=m["".concat(l,".").concat(g)]||m[g]||c[g]||s;return n?i.createElement(h,r(r({ref:t},p),{},{components:n})):i.createElement(h,r({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var u=2;u<s;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81917:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var i=n(87462),a=(n(67294),n(3905));const s={title:"Using custom Plugins in APISIX Ingress",keywords:["APISIX ingress","Apache APISIX","Custom Plugins","Lua Plugins"],description:"A tutorial on how you can configure custom Plugins in APISIX Ingress."},r=void 0,o={unversionedId:"tutorials/using-custom-plugins",id:"version-1.8.0/tutorials/using-custom-plugins",isDocsHomePage:!1,title:"Using custom Plugins in APISIX Ingress",description:"A tutorial on how you can configure custom Plugins in APISIX Ingress.",source:"@site/docs-apisix-ingress-controller_versioned_docs/version-1.8.0/tutorials/using-custom-plugins.md",sourceDirName:"tutorials",slug:"/tutorials/using-custom-plugins",permalink:"/zh/docs/ingress-controller/1.8.0/tutorials/using-custom-plugins",editUrl:"/zh/edit#https://github.com/apache/apisix-ingress-controller/edit/v1.8.0/docs/zh/latest/tutorials/using-custom-plugins.md",tags:[],version:"1.8.0",frontMatter:{title:"Using custom Plugins in APISIX Ingress",keywords:["APISIX ingress","Apache APISIX","Custom Plugins","Lua Plugins"],description:"A tutorial on how you can configure custom Plugins in APISIX Ingress."},sidebar:"version-1.8.0/docs",previous:{title:"Exporting Prometheus metrics from APISIX",permalink:"/zh/docs/ingress-controller/1.8.0/tutorials/how-to-access-Apache-APISIX-Prometheus-Metrics-on-k8s"},next:{title:"How to use go-plugin-runner with APISIX Ingress",permalink:"/zh/docs/ingress-controller/1.8.0/tutorials/how-to-use-go-plugin-runner-in-apisix-ingress"}},l=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Deploy httpbin",id:"deploy-httpbin",children:[]},{value:"Writing a Custom Plugin",id:"writing-a-custom-plugin",children:[]},{value:"Deploying APISIX",id:"deploying-apisix",children:[]},{value:"Testing without Enabling the Plugin",id:"testing-without-enabling-the-plugin",children:[]},{value:"Testing the Custom Plugin",id:"testing-the-custom-plugin",children:[]}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("head",null,(0,a.kt)("link",{rel:"canonical",href:"https://navendu.me/posts/custom-plugins-in-apisix-ingress/"})),(0,a.kt)("p",null,"This tutorial explains how you can configure custom Plugins to work with APISIX Ingress."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Before you move on, make sure you:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Have access to a Kubernetes cluster. This tutorial uses ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/kubernetes/minikube"},"minikube"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Install Helm")," to deploy the APISIX Ingress controller.")),(0,a.kt)("h2",{id:"deploy-httpbin"},"Deploy httpbin"),(0,a.kt)("p",null,"We will deploy a sample service, ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/kennethreitz/httpbin/"},"kennethreitz/httpbin"),", for this tutorial."),(0,a.kt)("p",null,"You can deploy it to your Kubernetes cluster by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl run httpbin --image kennethreitz/httpbin --port 80\nkubectl expose pod httpbin --port 80\n")),(0,a.kt)("h2",{id:"writing-a-custom-plugin"},"Writing a Custom Plugin"),(0,a.kt)("p",null,"In this tutorial we will focus only on configuring custom Plugins to work with APISIX Ingress."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"To learn more about how to write custom Plugins, see the ",(0,a.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/plugin-develop/"},"documentation"),". You can also write ",(0,a.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/external-plugin/"},"external Plugins")," in programming languages like Java, Python, and Go."))),(0,a.kt)("p",null,"In this tutorial, we will use a ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/navendu-pottekkat/apisix-in-kubernetes/master/custom-plugin/plugins/custom-response.lua"},"sample Plugin")," that rewrites the response body from the Upstream with a custom value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'{title="custom-response.lua"}',"{title":'"custom-response.lua"}'},'-- some required functionalities are provided by apisix.core\nlocal core = require("apisix.core")\n\n-- define the schema for the Plugin\nlocal schema = {\n    type = "object",\n    properties = {\n        body = {\n            description = "custom response to replace the Upstream response with.",\n            type = "string"\n        },\n    },\n    required = {"body"},\n}\n\nlocal plugin_name = "custom-response"\n\n-- custom Plugins usually have priority between 1 and 99\n-- higher number = higher priority\nlocal _M = {\n    version = 0.1,\n    priority = 23,\n    name = plugin_name,\n    schema = schema,\n}\n\n-- verify the specification\nfunction _M.check_schema(conf)\n    return core.schema.check(schema, conf)\nend\n\n-- run the Plugin in the access phase of the OpenResty lifecycle\nfunction _M.access(conf, ctx)\n    return 200, conf.body\nend\n\nreturn _M\n')),(0,a.kt)("p",null,"Now we can set up APISIX to utilize this Plugin and enable it for specific Routes."),(0,a.kt)("p",null,"While one approach is to create a customized build of APISIX that includes the Plugin's code, this is not a simple task."),(0,a.kt)("p",null,"An alternative method involves generating a ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/configmap/"},"ConfigMap")," from the Lua code and then mounting it onto the APISIX instance within the Kubernetes environment."),(0,a.kt)("p",null,"To create the ConfigMap, you can execute the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create ns ingress-apisix\nkubectl create configmap custom-response-config --from-file=./apisix/plugins/custom-response.lua -n ingress-apisix\n")),(0,a.kt)("p",null,"Now we can deploy APISIX and mount this ConfigMap."),(0,a.kt)("h2",{id:"deploying-apisix"},"Deploying APISIX"),(0,a.kt)("p",null,"We will use Helm to deploy APISIX and APISIX Ingress controller."),(0,a.kt)("p",null,"First, we will update the ",(0,a.kt)("inlineCode",{parentName:"p"},"values.yaml")," file to mount the custom Plugin we created before."),(0,a.kt)("p",null,"You can configure the Plugin under ",(0,a.kt)("inlineCode",{parentName:"p"},"customPlugins")," as shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{title="values.yaml"}',"{title":'"values.yaml"}'},'apisix:\n  ...\n  ...\n  customPlugins:\n    enabled: true\n    plugins:\n      - name: "custom-response"\n        attrs: {}\n        configMap:\n          name: "custom-response-config"\n          mounts:\n            - key: "custom-response.lua"\n              path: "/usr/local/apisix/apisix/plugins/custom-response.lua"\n')),(0,a.kt)("p",null,"You should also enable the Plugin by adding it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"plugins")," list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{title="values.yaml"}',"{title":'"values.yaml"}'},"apisix:\n  ...\n  ...\n  plugins:\n    - api-breaker\n    - authz-keycloak\n    - basic-auth\n    - batch-requests\n    - consumer-restriction\n    - cors\n    ...\n    ...\n    - custom-response\n")),(0,a.kt)("p",null,"Finally you can enable the Ingress controller and configure the gateway to be exposed to external traffic. For this, set ",(0,a.kt)("inlineCode",{parentName:"p"},"service.type=NodePort"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ingress-controller.enabled=true"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"ingress-controller.config.apisix.serviceNamespace=ingress-apisix")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"values.yaml")," file."),(0,a.kt)("p",null,"Now we can run ",(0,a.kt)("inlineCode",{parentName:"p"},"helm install")," with this ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/navendu-pottekkat/apisix-in-kubernetes/master/custom-plugin/values.yaml"},"updated values.yaml")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"helm install apisix apisix/apisix -n ingress-apisix --values ./apisix/values.yaml\n")),(0,a.kt)("p",null,"APISIX and APISIX Ingress controller should be ready in some time with the custom Plugin mounted successfully."),(0,a.kt)("h2",{id:"testing-without-enabling-the-plugin"},"Testing without Enabling the Plugin"),(0,a.kt)("p",null,"First, let's create a Route without our custom Plugin enabled."),(0,a.kt)("p",null,"We will create a Route using the ",(0,a.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/ingress-controller/concepts/apisix_route"},"ApisixRoute")," CRD:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{title="route.yaml"}',"{title":'"route.yaml"}'},"apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  name: api-route\nspec:\n  http:\n    - name: route\n      match:\n        hosts:\n          - local.navendu.me\n        paths:\n          - /api\n      backends:\n        - serviceName: bare-minimum-api\n          servicePort: 8080\n")),(0,a.kt)("p",null,"We can now test the created Route:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"curl http://127.0.0.1:52876/api -H 'host:local.navendu.me'\n")),(0,a.kt)("p",null,"This will give back the response from our Upstream service as expected:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Hello from API v1.0!\n")),(0,a.kt)("h2",{id:"testing-the-custom-plugin"},"Testing the Custom Plugin"),(0,a.kt)("p",null,"Now let's update the Route and enable our custom Plugin on the Route:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{title="route.yaml"}',"{title":'"route.yaml"}'},'apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  name: api-route\nspec:\n  http:\n    - name: route\n      match:\n        hosts:\n          - local.navendu.me\n        paths:\n          - /api\n      backends:\n        - serviceName: bare-minimum-api\n          servicePort: 8080\n      plugins:\n        - name: custom-response\n          enable: true\n          config:\n            body: "Hello from your custom Plugin!"\n')),(0,a.kt)("p",null,'Now, our custom Plugin should rewrite the Upstream response with "Hello from your custom Plugin!"'),(0,a.kt)("p",null,"Let's apply this CRD and test the Route and see what happens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"curl http://127.0.0.1:52876/api -H 'host:local.navendu.me'\n")),(0,a.kt)("p",null,"And as expected, we get the rewritten response from our custom Plugin:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'{title="output"}',"{title":'"output"}'},"Hello from your custom Plugin!\n")))}p.isMDXComponent=!0}}]);