"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[84583],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=p(n),d=a,m=g["".concat(l,".").concat(d)]||g[d]||u[d]||i;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},50646:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={title:"Using APISIX Ingress as Istio Egress Gateway"},s=void 0,o={unversionedId:"tutorials/istio-egress-gateway",id:"version-1.8.0/tutorials/istio-egress-gateway",isDocsHomePage:!1,title:"Using APISIX Ingress as Istio Egress Gateway",description:"Istio uses ingress and egress gateways to configure load balancers executing at the edge of a service mesh. An ingress gateway defines entry points into the mesh that all incoming traffic flows through. Egress gateway is a symmetrical concept; it defines exit points from the mesh.",source:"@site/docs-apisix-ingress-controller_versioned_docs/version-1.8.0/tutorials/istio-egress-gateway.md",sourceDirName:"tutorials",slug:"/tutorials/istio-egress-gateway",permalink:"/zh/docs/ingress-controller/1.8.0/tutorials/istio-egress-gateway",editUrl:"/zh/edit#https://github.com/apache/apisix-ingress-controller/edit/v1.8.0/docs/zh/latest/tutorials/istio-egress-gateway.md",tags:[],version:"1.8.0",frontMatter:{title:"Using APISIX Ingress as Istio Egress Gateway"},sidebar:"version-1.8.0/docs",previous:{title:"Using External Services Discovery In ApisixUpstream",permalink:"/zh/docs/ingress-controller/1.8.0/tutorials/external-service-discovery"},next:{title:"Match Stream Route with SNI",permalink:"/zh/docs/ingress-controller/1.8.0/tutorials/match-stream-route-by-sni"}},l=[{value:"Environment Preparation",id:"environment-preparation",children:[{value:"Install Istio",id:"install-istio",children:[]},{value:"Install APISIX Ingress",id:"install-apisix-ingress",children:[]},{value:"Create Test Workload",id:"create-test-workload",children:[]}]},{value:"Egress Gateway for HTTP Traffic",id:"egress-gateway-for-http-traffic",children:[{value:"Configure Istio",id:"configure-istio",children:[]},{value:"Configure APISIX Ingress",id:"configure-apisix-ingress",children:[]}]}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Istio uses ingress and egress gateways to configure load balancers executing at the edge of a service mesh. An ingress gateway defines entry points into the mesh that all incoming traffic flows through. Egress gateway is a symmetrical concept; it defines exit points from the mesh."),(0,a.kt)("p",null,"Although APISIX Ingress was originally implemented as an Ingress Controller, it can still be used as Istio egress gateway. This article will describe how to use it."),(0,a.kt)("h2",{id:"environment-preparation"},"Environment Preparation"),(0,a.kt)("h3",{id:"install-istio"},"Install Istio"),(0,a.kt)("p",null,"Use the official ",(0,a.kt)("inlineCode",{parentName:"p"},"istioctl")," provided by Istio to install Istio. Here we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," profile of ",(0,a.kt)("inlineCode",{parentName:"p"},"istioctl"),", which contains istio and ingress, but not egress, meets our needs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"istioctl install --set profile=default\n")),(0,a.kt)("h3",{id:"install-apisix-ingress"},"Install APISIX Ingress"),(0,a.kt)("p",null,"In this article, we will run APISIX Ingress in the namespace ",(0,a.kt)("inlineCode",{parentName:"p"},"ingress-apisix"),"."),(0,a.kt)("p",null,"Note that we need to manually label this namespace as ",(0,a.kt)("inlineCode",{parentName:"p"},"istio-injection=disabled")," to avoid APISIX Ingress being injected by Istio."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create ns ingress-apisix\nkubectl label ns ingress-apisix istio-injection=disabled\n\nhelm install apisix apisix/apisix --create-namespace \\\n  --set service.type=NodePort \\\n  --set ingress-controller.enabled=true \\\n  --namespace ingress-apisix \\\n  --set ingress-controller.config.apisix.serviceNamespace=ingress-apisix \\\n  --set apisix.ssl.enabled=true\n")),(0,a.kt)("h3",{id:"create-test-workload"},"Create Test Workload"),(0,a.kt)("p",null,"We will run our tests in the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," namespace. Use the following command to create the required test pod."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl create ns test\nkubectl label ns test istio-injection=enabled\n\nkubectl -n test run consumer --image curlimages/curl \\\n  --image-pull-policy IfNotPresent \\\n  --command -- sh -c "trap : TERM INT; sleep 99d & wait"\n')),(0,a.kt)("p",null,"After the creation is complete, try sending a test request to make sure the service mesh is working properly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n test exec -it consumer -- curl httpbin.org/get\n")),(0,a.kt)("p",null,"The request will return a result similar to the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "httpbin.org",\n    "User-Agent": "curl/7.87.0-DEV",\n    "X-Amzn-Trace-Id": "....",\n    "X-B3-Sampled": "0",\n    "X-B3-Spanid": "....",\n    "X-B3-Traceid": "....",\n    "X-Envoy-Attempt-Count": "1",\n    "X-Envoy-Peer-Metadata": "....",\n    "X-Envoy-Peer-Metadata-Id": "sidecar~10.244.0.21~consumer.test~test.svc.cluster.local"\n  },\n  "origin": "222.0.222.222",\n  "url": "http://httpbin.org/get"\n}\n')),(0,a.kt)("p",null,"This indicates that our traffic is being sent directly from the envoy sidecar."),(0,a.kt)("h2",{id:"egress-gateway-for-http-traffic"},"Egress Gateway for HTTP Traffic"),(0,a.kt)("h3",{id:"configure-istio"},"Configure Istio"),(0,a.kt)("p",null,"Now we need to define some Istio resources to allow requests for ",(0,a.kt)("inlineCode",{parentName:"p"},"httpbin.org")," to be sent to APISIX."),(0,a.kt)("p",null,"Define a ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceEntry")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"httpbin.org"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: httpbin\nspec:\n  hosts:\n  - httpbin.org\n  ports:\n  - number: 80\n    name: http-port\n    protocol: HTTP\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS\n")),(0,a.kt)("p",null,"Create an egress ",(0,a.kt)("inlineCode",{parentName:"p"},"Gateway")," resource for ",(0,a.kt)("inlineCode",{parentName:"p"},"httpbin.org"),", port 80, and a ",(0,a.kt)("inlineCode",{parentName:"p"},"DestinationRule")," for traffic directed to the egress gateway."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: apisix-egress\nspec:\n  selector:\n    app.kubernetes.io/name: apisix\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - httpbin.org\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: egressgateway-for-httpbin\nspec:\n  host: apisix-gateway.ingress-apisix.svc.cluster.local\n  subsets:\n  - name: httpbin\n")),(0,a.kt)("p",null,"Note the ",(0,a.kt)("inlineCode",{parentName:"p"},"selector")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gateway")," resource here, which will select our APISIX Ingress. The ",(0,a.kt)("inlineCode",{parentName:"p"},"host")," field in the ",(0,a.kt)("inlineCode",{parentName:"p"},"DestinationRule")," is the FQDN of the APISIX Ingress service."),(0,a.kt)("p",null,"Define a ",(0,a.kt)("inlineCode",{parentName:"p"},"VirtualService")," to direct traffic from the sidecars to the egress gateway and from the egress gateway to the external service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: httpbin-via-egress-gateway\nspec:\n  hosts:\n  - httpbin.org\n  gateways:\n  - apisix-egress\n  - mesh\n  http:\n  - match:\n    - gateways:\n      - mesh\n      port: 80\n    route:\n    - destination:\n        host: apisix-gateway.ingress-apisix.svc.cluster.local\n        subset: httpbin\n        port:\n          number: 80\n      weight: 100\n  - match:\n    - gateways:\n      - apisix-egress\n      port: 80\n    route:\n    - destination:\n        host: httpbin.org\n        port:\n          number: 80\n      weight: 100\n")),(0,a.kt)("p",null,"In the yaml, ",(0,a.kt)("inlineCode",{parentName:"p"},"mesh")," is the internal gateway of Istio, and ",(0,a.kt)("inlineCode",{parentName:"p"},"apisix-egress")," is the name of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gateway")," resource we defined."),(0,a.kt)("p",null,"Now, our configuration in the Istio is complete. Try request again."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n test exec -it consumer -- curl httpbin.org/get\n")),(0,a.kt)("p",null,"It will return a APISIX error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{"error_msg":"404 Route Not Found"}\n')),(0,a.kt)("p",null,"This error indicates that the traffic has been sent to APISIX correctly. However, APISIX does not handle the Istio resources. So we need to do some additional configuration to make APISIX Ingress generate the correct routing configuration for APISIX."),(0,a.kt)("h3",{id:"configure-apisix-ingress"},"Configure APISIX Ingress"),(0,a.kt)("p",null,"In the Istio configuration, we have successfully directed traffic from the mesh to APISIX, but APISIX doesn't currently have any route."),(0,a.kt)("p",null,"Here, we will use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix-ingress-controller/blob/master/docs/en/latest/tutorials/external-service.md"},"external service")," feature to direct traffic to the external service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2\nkind: ApisixRoute\nmetadata:\n  name: httpbin-route\nspec:\n  http:\n  - name: rule1\n    match:\n      hosts:\n      - httpbin.org\n      paths:\n      - /*\n    upstreams:\n    - name: httpbin-upstream\n---\napiVersion: apisix.apache.org/v2\nkind: ApisixUpstream\nmetadata:\n  name: httpbin-upstream\nspec:\n  externalNodes:\n  - type: Domain\n    name: httpbin.org\n")),(0,a.kt)("p",null,"This configuration defines the route to ",(0,a.kt)("inlineCode",{parentName:"p"},"httpbin.org")," for APISIX. Now we should be able to access the service properly, send the request again to test it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n test exec -it consumer -- curl httpbin.org/get\n")),(0,a.kt)("p",null,"The request will return something like this,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "args": {},\n  "headers": {\n    "Accept": "*/*",\n    "Host": "httpbin.org",\n    "User-Agent": "curl/7.87.0-DEV",\n    "X-Amzn-Trace-Id": "...",\n    "X-B3-Sampled": "0",\n    "X-B3-Spanid": "...",\n    "X-B3-Traceid": "...",\n    "X-Envoy-Attempt-Count": "1",\n    "X-Envoy-Decorator-Operation": "apisix-gateway.ingress-apisix.svc.cluster.local:80/*",\n    "X-Envoy-Peer-Metadata": "...",\n    "X-Envoy-Peer-Metadata-Id": "sidecar~10.244.0.21~consumer.test~test.svc.cluster.local",\n    "X-Forwarded-Host": "httpbin.org"\n  },\n  "origin": "10.244.0.21, 222.0.222.222",\n  "url": "http://httpbin.org/get"\n}\n')),(0,a.kt)("p",null,"Notice that the ",(0,a.kt)("inlineCode",{parentName:"p"},"origin")," field in the result will contain the pod ip of the test pod ",(0,a.kt)("inlineCode",{parentName:"p"},"consumer"),", which indicates that our request was successfully sent to the target service via APISIX."))}c.isMDXComponent=!0}}]);